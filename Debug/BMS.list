
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004908  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  080049c8  080049c8  000059c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d88  08004d88  00006060  2**0
                  CONTENTS
  4 .ARM          00000000  08004d88  08004d88  00006060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d88  08004d88  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d88  08004d88  00005d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d8c  08004d8c  00005d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004d90  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  20000060  08004df0  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  08004df0  00006644  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d69  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003760  00000000  00000000  0001bdf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  0001f558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fdd  00000000  00000000  00020990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012ce1  00000000  00000000  0002196d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8eb  00000000  00000000  0003464e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ff7c  00000000  00000000  00050f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0eb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a70  00000000  00000000  000c0ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000c5968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080049b0 	.word	0x080049b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	080049b0 	.word	0x080049b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	4a06      	ldr	r2, [pc, #24]	@ (8000248 <vApplicationGetIdleTaskMemory+0x28>)
 8000230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	4a05      	ldr	r2, [pc, #20]	@ (800024c <vApplicationGetIdleTaskMemory+0x2c>)
 8000236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2260      	movs	r2, #96	@ 0x60
 800023c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	46bd      	mov	sp, r7
 8000242:	b004      	add	sp, #16
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)
 8000248:	2000007c 	.word	0x2000007c
 800024c:	2000011c 	.word	0x2000011c

08000250 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  */

/**
  * @}
  */
}
 8000254:	46c0      	nop			@ (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800025c:	b590      	push	{r4, r7, lr}
 800025e:	b089      	sub	sp, #36	@ 0x24
 8000260:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000262:	240c      	movs	r4, #12
 8000264:	193b      	adds	r3, r7, r4
 8000266:	0018      	movs	r0, r3
 8000268:	2314      	movs	r3, #20
 800026a:	001a      	movs	r2, r3
 800026c:	2100      	movs	r1, #0
 800026e:	f004 fab7 	bl	80047e0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000272:	4b43      	ldr	r3, [pc, #268]	@ (8000380 <MX_GPIO_Init+0x124>)
 8000274:	695a      	ldr	r2, [r3, #20]
 8000276:	4b42      	ldr	r3, [pc, #264]	@ (8000380 <MX_GPIO_Init+0x124>)
 8000278:	2180      	movs	r1, #128	@ 0x80
 800027a:	03c9      	lsls	r1, r1, #15
 800027c:	430a      	orrs	r2, r1
 800027e:	615a      	str	r2, [r3, #20]
 8000280:	4b3f      	ldr	r3, [pc, #252]	@ (8000380 <MX_GPIO_Init+0x124>)
 8000282:	695a      	ldr	r2, [r3, #20]
 8000284:	2380      	movs	r3, #128	@ 0x80
 8000286:	03db      	lsls	r3, r3, #15
 8000288:	4013      	ands	r3, r2
 800028a:	60bb      	str	r3, [r7, #8]
 800028c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800028e:	4b3c      	ldr	r3, [pc, #240]	@ (8000380 <MX_GPIO_Init+0x124>)
 8000290:	695a      	ldr	r2, [r3, #20]
 8000292:	4b3b      	ldr	r3, [pc, #236]	@ (8000380 <MX_GPIO_Init+0x124>)
 8000294:	2180      	movs	r1, #128	@ 0x80
 8000296:	0289      	lsls	r1, r1, #10
 8000298:	430a      	orrs	r2, r1
 800029a:	615a      	str	r2, [r3, #20]
 800029c:	4b38      	ldr	r3, [pc, #224]	@ (8000380 <MX_GPIO_Init+0x124>)
 800029e:	695a      	ldr	r2, [r3, #20]
 80002a0:	2380      	movs	r3, #128	@ 0x80
 80002a2:	029b      	lsls	r3, r3, #10
 80002a4:	4013      	ands	r3, r2
 80002a6:	607b      	str	r3, [r7, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002aa:	4b35      	ldr	r3, [pc, #212]	@ (8000380 <MX_GPIO_Init+0x124>)
 80002ac:	695a      	ldr	r2, [r3, #20]
 80002ae:	4b34      	ldr	r3, [pc, #208]	@ (8000380 <MX_GPIO_Init+0x124>)
 80002b0:	2180      	movs	r1, #128	@ 0x80
 80002b2:	02c9      	lsls	r1, r1, #11
 80002b4:	430a      	orrs	r2, r1
 80002b6:	615a      	str	r2, [r3, #20]
 80002b8:	4b31      	ldr	r3, [pc, #196]	@ (8000380 <MX_GPIO_Init+0x124>)
 80002ba:	695a      	ldr	r2, [r3, #20]
 80002bc:	2380      	movs	r3, #128	@ 0x80
 80002be:	02db      	lsls	r3, r3, #11
 80002c0:	4013      	ands	r3, r2
 80002c2:	603b      	str	r3, [r7, #0]
 80002c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOOST_GPIO_Port, BOOST_Pin, GPIO_PIN_RESET);
 80002c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000384 <MX_GPIO_Init+0x128>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	2108      	movs	r1, #8
 80002cc:	0018      	movs	r0, r3
 80002ce:	f000 fe97 	bl	8001000 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	2203      	movs	r2, #3
 80002d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	2203      	movs	r2, #3
 80002dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002de:	193b      	adds	r3, r7, r4
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80002e4:	193b      	adds	r3, r7, r4
 80002e6:	4a28      	ldr	r2, [pc, #160]	@ (8000388 <MX_GPIO_Init+0x12c>)
 80002e8:	0019      	movs	r1, r3
 80002ea:	0010      	movs	r0, r2
 80002ec:	f000 fc6c 	bl	8000bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	4a26      	ldr	r2, [pc, #152]	@ (800038c <MX_GPIO_Init+0x130>)
 80002f4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002f6:	193b      	adds	r3, r7, r4
 80002f8:	2203      	movs	r2, #3
 80002fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fc:	193b      	adds	r3, r7, r4
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000302:	193a      	adds	r2, r7, r4
 8000304:	2390      	movs	r3, #144	@ 0x90
 8000306:	05db      	lsls	r3, r3, #23
 8000308:	0011      	movs	r1, r2
 800030a:	0018      	movs	r0, r3
 800030c:	f000 fc5c 	bl	8000bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ALERT_Pin;
 8000310:	193b      	adds	r3, r7, r4
 8000312:	2201      	movs	r2, #1
 8000314:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000316:	193b      	adds	r3, r7, r4
 8000318:	2200      	movs	r2, #0
 800031a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031c:	193b      	adds	r3, r7, r4
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ALERT_GPIO_Port, &GPIO_InitStruct);
 8000322:	193b      	adds	r3, r7, r4
 8000324:	4a17      	ldr	r2, [pc, #92]	@ (8000384 <MX_GPIO_Init+0x128>)
 8000326:	0019      	movs	r1, r3
 8000328:	0010      	movs	r0, r2
 800032a:	f000 fc4d 	bl	8000bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB4 PB5
                           PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 800032e:	0021      	movs	r1, r4
 8000330:	187b      	adds	r3, r7, r1
 8000332:	22fb      	movs	r2, #251	@ 0xfb
 8000334:	0052      	lsls	r2, r2, #1
 8000336:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000338:	000c      	movs	r4, r1
 800033a:	193b      	adds	r3, r7, r4
 800033c:	2203      	movs	r2, #3
 800033e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000340:	193b      	adds	r3, r7, r4
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000346:	193b      	adds	r3, r7, r4
 8000348:	4a0e      	ldr	r2, [pc, #56]	@ (8000384 <MX_GPIO_Init+0x128>)
 800034a:	0019      	movs	r1, r3
 800034c:	0010      	movs	r0, r2
 800034e:	f000 fc3b 	bl	8000bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOST_Pin;
 8000352:	0021      	movs	r1, r4
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2208      	movs	r2, #8
 8000358:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2201      	movs	r2, #1
 800035e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2203      	movs	r2, #3
 800036a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BOOST_GPIO_Port, &GPIO_InitStruct);
 800036c:	187b      	adds	r3, r7, r1
 800036e:	4a05      	ldr	r2, [pc, #20]	@ (8000384 <MX_GPIO_Init+0x128>)
 8000370:	0019      	movs	r1, r3
 8000372:	0010      	movs	r0, r2
 8000374:	f000 fc28 	bl	8000bc8 <HAL_GPIO_Init>

}
 8000378:	46c0      	nop			@ (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	b009      	add	sp, #36	@ 0x24
 800037e:	bd90      	pop	{r4, r7, pc}
 8000380:	40021000 	.word	0x40021000
 8000384:	48000400 	.word	0x48000400
 8000388:	48001400 	.word	0x48001400
 800038c:	000099f3 	.word	0x000099f3

08000390 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000394:	4b1b      	ldr	r3, [pc, #108]	@ (8000404 <MX_I2C1_Init+0x74>)
 8000396:	4a1c      	ldr	r2, [pc, #112]	@ (8000408 <MX_I2C1_Init+0x78>)
 8000398:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800039a:	4b1a      	ldr	r3, [pc, #104]	@ (8000404 <MX_I2C1_Init+0x74>)
 800039c:	4a1b      	ldr	r2, [pc, #108]	@ (800040c <MX_I2C1_Init+0x7c>)
 800039e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003a0:	4b18      	ldr	r3, [pc, #96]	@ (8000404 <MX_I2C1_Init+0x74>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003a6:	4b17      	ldr	r3, [pc, #92]	@ (8000404 <MX_I2C1_Init+0x74>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003ac:	4b15      	ldr	r3, [pc, #84]	@ (8000404 <MX_I2C1_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003b2:	4b14      	ldr	r3, [pc, #80]	@ (8000404 <MX_I2C1_Init+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003b8:	4b12      	ldr	r3, [pc, #72]	@ (8000404 <MX_I2C1_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003be:	4b11      	ldr	r3, [pc, #68]	@ (8000404 <MX_I2C1_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000404 <MX_I2C1_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000404 <MX_I2C1_Init+0x74>)
 80003cc:	0018      	movs	r0, r3
 80003ce:	f000 fe51 	bl	8001074 <HAL_I2C_Init>
 80003d2:	1e03      	subs	r3, r0, #0
 80003d4:	d001      	beq.n	80003da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003d6:	f000 f8f1 	bl	80005bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003da:	4b0a      	ldr	r3, [pc, #40]	@ (8000404 <MX_I2C1_Init+0x74>)
 80003dc:	2100      	movs	r1, #0
 80003de:	0018      	movs	r0, r3
 80003e0:	f000 ff76 	bl	80012d0 <HAL_I2CEx_ConfigAnalogFilter>
 80003e4:	1e03      	subs	r3, r0, #0
 80003e6:	d001      	beq.n	80003ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003e8:	f000 f8e8 	bl	80005bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003ec:	4b05      	ldr	r3, [pc, #20]	@ (8000404 <MX_I2C1_Init+0x74>)
 80003ee:	2100      	movs	r1, #0
 80003f0:	0018      	movs	r0, r3
 80003f2:	f000 ffd3 	bl	800139c <HAL_I2CEx_ConfigDigitalFilter>
 80003f6:	1e03      	subs	r3, r0, #0
 80003f8:	d001      	beq.n	80003fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003fa:	f000 f8df 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003fe:	46c0      	nop			@ (mov r8, r8)
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	2000029c 	.word	0x2000029c
 8000408:	40005400 	.word	0x40005400
 800040c:	2000090e 	.word	0x2000090e

08000410 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b08b      	sub	sp, #44	@ 0x2c
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000418:	2414      	movs	r4, #20
 800041a:	193b      	adds	r3, r7, r4
 800041c:	0018      	movs	r0, r3
 800041e:	2314      	movs	r3, #20
 8000420:	001a      	movs	r2, r3
 8000422:	2100      	movs	r1, #0
 8000424:	f004 f9dc 	bl	80047e0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a1d      	ldr	r2, [pc, #116]	@ (80004a4 <HAL_I2C_MspInit+0x94>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d133      	bne.n	800049a <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000432:	4b1d      	ldr	r3, [pc, #116]	@ (80004a8 <HAL_I2C_MspInit+0x98>)
 8000434:	695a      	ldr	r2, [r3, #20]
 8000436:	4b1c      	ldr	r3, [pc, #112]	@ (80004a8 <HAL_I2C_MspInit+0x98>)
 8000438:	2180      	movs	r1, #128	@ 0x80
 800043a:	0289      	lsls	r1, r1, #10
 800043c:	430a      	orrs	r2, r1
 800043e:	615a      	str	r2, [r3, #20]
 8000440:	4b19      	ldr	r3, [pc, #100]	@ (80004a8 <HAL_I2C_MspInit+0x98>)
 8000442:	695a      	ldr	r2, [r3, #20]
 8000444:	2380      	movs	r3, #128	@ 0x80
 8000446:	029b      	lsls	r3, r3, #10
 8000448:	4013      	ands	r3, r2
 800044a:	613b      	str	r3, [r7, #16]
 800044c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800044e:	193b      	adds	r3, r7, r4
 8000450:	22c0      	movs	r2, #192	@ 0xc0
 8000452:	00d2      	lsls	r2, r2, #3
 8000454:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000456:	0021      	movs	r1, r4
 8000458:	187b      	adds	r3, r7, r1
 800045a:	2212      	movs	r2, #18
 800045c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045e:	187b      	adds	r3, r7, r1
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2203      	movs	r2, #3
 8000468:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2204      	movs	r2, #4
 800046e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000470:	187a      	adds	r2, r7, r1
 8000472:	2390      	movs	r3, #144	@ 0x90
 8000474:	05db      	lsls	r3, r3, #23
 8000476:	0011      	movs	r1, r2
 8000478:	0018      	movs	r0, r3
 800047a:	f000 fba5 	bl	8000bc8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800047e:	4b0a      	ldr	r3, [pc, #40]	@ (80004a8 <HAL_I2C_MspInit+0x98>)
 8000480:	69da      	ldr	r2, [r3, #28]
 8000482:	4b09      	ldr	r3, [pc, #36]	@ (80004a8 <HAL_I2C_MspInit+0x98>)
 8000484:	2180      	movs	r1, #128	@ 0x80
 8000486:	0389      	lsls	r1, r1, #14
 8000488:	430a      	orrs	r2, r1
 800048a:	61da      	str	r2, [r3, #28]
 800048c:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <HAL_I2C_MspInit+0x98>)
 800048e:	69da      	ldr	r2, [r3, #28]
 8000490:	2380      	movs	r3, #128	@ 0x80
 8000492:	039b      	lsls	r3, r3, #14
 8000494:	4013      	ands	r3, r2
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800049a:	46c0      	nop			@ (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	b00b      	add	sp, #44	@ 0x2c
 80004a0:	bd90      	pop	{r4, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	40005400 	.word	0x40005400
 80004a8:	40021000 	.word	0x40021000

080004ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b0:	f000 fa18 	bl	80008e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b4:	f000 f80c 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b8:	f7ff fed0 	bl	800025c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004bc:	f7ff ff68 	bl	8000390 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80004c0:	f000 f962 	bl	8000788 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80004c4:	f7ff fec4 	bl	8000250 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80004c8:	f003 fb2c 	bl	8003b24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004cc:	46c0      	nop			@ (mov r8, r8)
 80004ce:	e7fd      	b.n	80004cc <main+0x20>

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b095      	sub	sp, #84	@ 0x54
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	2420      	movs	r4, #32
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	0018      	movs	r0, r3
 80004dc:	2330      	movs	r3, #48	@ 0x30
 80004de:	001a      	movs	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	f004 f97d 	bl	80047e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e6:	2310      	movs	r3, #16
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	0018      	movs	r0, r3
 80004ec:	2310      	movs	r3, #16
 80004ee:	001a      	movs	r2, r3
 80004f0:	2100      	movs	r1, #0
 80004f2:	f004 f975 	bl	80047e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f6:	003b      	movs	r3, r7
 80004f8:	0018      	movs	r0, r3
 80004fa:	2310      	movs	r3, #16
 80004fc:	001a      	movs	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	f004 f96e 	bl	80047e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000504:	0021      	movs	r1, r4
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2202      	movs	r2, #2
 800050a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2201      	movs	r2, #1
 8000510:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2210      	movs	r2, #16
 8000516:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2202      	movs	r2, #2
 800051c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2200      	movs	r2, #0
 8000522:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	22a0      	movs	r2, #160	@ 0xa0
 8000528:	0392      	lsls	r2, r2, #14
 800052a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2200      	movs	r2, #0
 8000530:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000532:	187b      	adds	r3, r7, r1
 8000534:	0018      	movs	r0, r3
 8000536:	f000 ff93 	bl	8001460 <HAL_RCC_OscConfig>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d001      	beq.n	8000542 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800053e:	f000 f83d 	bl	80005bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000542:	2110      	movs	r1, #16
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2207      	movs	r2, #7
 8000548:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2202      	movs	r2, #2
 800054e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2200      	movs	r2, #0
 800055a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2101      	movs	r1, #1
 8000560:	0018      	movs	r0, r3
 8000562:	f001 fc0b 	bl	8001d7c <HAL_RCC_ClockConfig>
 8000566:	1e03      	subs	r3, r0, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800056a:	f000 f827 	bl	80005bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800056e:	003b      	movs	r3, r7
 8000570:	2221      	movs	r2, #33	@ 0x21
 8000572:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000574:	003b      	movs	r3, r7
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800057a:	003b      	movs	r3, r7
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000580:	003b      	movs	r3, r7
 8000582:	0018      	movs	r0, r3
 8000584:	f001 fe0a 	bl	800219c <HAL_RCCEx_PeriphCLKConfig>
 8000588:	1e03      	subs	r3, r0, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800058c:	f000 f816 	bl	80005bc <Error_Handler>
  }
}
 8000590:	46c0      	nop			@ (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b015      	add	sp, #84	@ 0x54
 8000596:	bd90      	pop	{r4, r7, pc}

08000598 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a04      	ldr	r2, [pc, #16]	@ (80005b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d101      	bne.n	80005ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005aa:	f000 f9af 	bl	800090c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b002      	add	sp, #8
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	40012c00 	.word	0x40012c00

080005bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c0:	b672      	cpsid	i
}
 80005c2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c4:	46c0      	nop			@ (mov r8, r8)
 80005c6:	e7fd      	b.n	80005c4 <Error_Handler+0x8>

080005c8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b002      	add	sp, #8
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e2:	4b12      	ldr	r3, [pc, #72]	@ (800062c <HAL_MspInit+0x50>)
 80005e4:	699a      	ldr	r2, [r3, #24]
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <HAL_MspInit+0x50>)
 80005e8:	2101      	movs	r1, #1
 80005ea:	430a      	orrs	r2, r1
 80005ec:	619a      	str	r2, [r3, #24]
 80005ee:	4b0f      	ldr	r3, [pc, #60]	@ (800062c <HAL_MspInit+0x50>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	2201      	movs	r2, #1
 80005f4:	4013      	ands	r3, r2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <HAL_MspInit+0x50>)
 80005fc:	69da      	ldr	r2, [r3, #28]
 80005fe:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <HAL_MspInit+0x50>)
 8000600:	2180      	movs	r1, #128	@ 0x80
 8000602:	0549      	lsls	r1, r1, #21
 8000604:	430a      	orrs	r2, r1
 8000606:	61da      	str	r2, [r3, #28]
 8000608:	4b08      	ldr	r3, [pc, #32]	@ (800062c <HAL_MspInit+0x50>)
 800060a:	69da      	ldr	r2, [r3, #28]
 800060c:	2380      	movs	r3, #128	@ 0x80
 800060e:	055b      	lsls	r3, r3, #21
 8000610:	4013      	ands	r3, r2
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000616:	2302      	movs	r3, #2
 8000618:	425b      	negs	r3, r3
 800061a:	2200      	movs	r2, #0
 800061c:	2103      	movs	r1, #3
 800061e:	0018      	movs	r0, r3
 8000620:	f000 fa18 	bl	8000a54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000624:	46c0      	nop			@ (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	b002      	add	sp, #8
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40021000 	.word	0x40021000

08000630 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000630:	b5b0      	push	{r4, r5, r7, lr}
 8000632:	b08c      	sub	sp, #48	@ 0x30
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000638:	2300      	movs	r3, #0
 800063a:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t              uwPrescalerValue = 0U;
 800063c:	2300      	movs	r3, #0
 800063e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000640:	4b38      	ldr	r3, [pc, #224]	@ (8000724 <HAL_InitTick+0xf4>)
 8000642:	699a      	ldr	r2, [r3, #24]
 8000644:	4b37      	ldr	r3, [pc, #220]	@ (8000724 <HAL_InitTick+0xf4>)
 8000646:	2180      	movs	r1, #128	@ 0x80
 8000648:	0109      	lsls	r1, r1, #4
 800064a:	430a      	orrs	r2, r1
 800064c:	619a      	str	r2, [r3, #24]
 800064e:	4b35      	ldr	r3, [pc, #212]	@ (8000724 <HAL_InitTick+0xf4>)
 8000650:	699a      	ldr	r2, [r3, #24]
 8000652:	2380      	movs	r3, #128	@ 0x80
 8000654:	011b      	lsls	r3, r3, #4
 8000656:	4013      	ands	r3, r2
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800065c:	230c      	movs	r3, #12
 800065e:	18fa      	adds	r2, r7, r3
 8000660:	2410      	movs	r4, #16
 8000662:	193b      	adds	r3, r7, r4
 8000664:	0011      	movs	r1, r2
 8000666:	0018      	movs	r0, r3
 8000668:	f001 fd56 	bl	8002118 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800066c:	193b      	adds	r3, r7, r4
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000674:	2b00      	cmp	r3, #0
 8000676:	d104      	bne.n	8000682 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000678:	f001 fd38 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 800067c:	0003      	movs	r3, r0
 800067e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000680:	e004      	b.n	800068c <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000682:	f001 fd33 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 8000686:	0003      	movs	r3, r0
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800068c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800068e:	4926      	ldr	r1, [pc, #152]	@ (8000728 <HAL_InitTick+0xf8>)
 8000690:	0018      	movs	r0, r3
 8000692:	f7ff fd39 	bl	8000108 <__udivsi3>
 8000696:	0003      	movs	r3, r0
 8000698:	3b01      	subs	r3, #1
 800069a:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800069c:	4b23      	ldr	r3, [pc, #140]	@ (800072c <HAL_InitTick+0xfc>)
 800069e:	4a24      	ldr	r2, [pc, #144]	@ (8000730 <HAL_InitTick+0x100>)
 80006a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80006a2:	4b22      	ldr	r3, [pc, #136]	@ (800072c <HAL_InitTick+0xfc>)
 80006a4:	4a23      	ldr	r2, [pc, #140]	@ (8000734 <HAL_InitTick+0x104>)
 80006a6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80006a8:	4b20      	ldr	r3, [pc, #128]	@ (800072c <HAL_InitTick+0xfc>)
 80006aa:	6a3a      	ldr	r2, [r7, #32]
 80006ac:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 80006ae:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <HAL_InitTick+0xfc>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b4:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <HAL_InitTick+0xfc>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ba:	4b1c      	ldr	r3, [pc, #112]	@ (800072c <HAL_InitTick+0xfc>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80006c0:	252b      	movs	r5, #43	@ 0x2b
 80006c2:	197c      	adds	r4, r7, r5
 80006c4:	4b19      	ldr	r3, [pc, #100]	@ (800072c <HAL_InitTick+0xfc>)
 80006c6:	0018      	movs	r0, r3
 80006c8:	f001 fe80 	bl	80023cc <HAL_TIM_Base_Init>
 80006cc:	0003      	movs	r3, r0
 80006ce:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80006d0:	197b      	adds	r3, r7, r5
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d11e      	bne.n	8000716 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80006d8:	197c      	adds	r4, r7, r5
 80006da:	4b14      	ldr	r3, [pc, #80]	@ (800072c <HAL_InitTick+0xfc>)
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 ff69 	bl	80025b4 <HAL_TIM_Base_Start_IT>
 80006e2:	0003      	movs	r3, r0
 80006e4:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80006e6:	197b      	adds	r3, r7, r5
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d113      	bne.n	8000716 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80006ee:	200d      	movs	r0, #13
 80006f0:	f000 f9d0 	bl	8000a94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	d809      	bhi.n	800070e <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2200      	movs	r2, #0
 80006fe:	0019      	movs	r1, r3
 8000700:	200d      	movs	r0, #13
 8000702:	f000 f9a7 	bl	8000a54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <HAL_InitTick+0x108>)
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	e003      	b.n	8000716 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 800070e:	232b      	movs	r3, #43	@ 0x2b
 8000710:	18fb      	adds	r3, r7, r3
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000716:	232b      	movs	r3, #43	@ 0x2b
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	781b      	ldrb	r3, [r3, #0]
}
 800071c:	0018      	movs	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	b00c      	add	sp, #48	@ 0x30
 8000722:	bdb0      	pop	{r4, r5, r7, pc}
 8000724:	40021000 	.word	0x40021000
 8000728:	000f4240 	.word	0x000f4240
 800072c:	200002f0 	.word	0x200002f0
 8000730:	40012c00 	.word	0x40012c00
 8000734:	000003e7 	.word	0x000003e7
 8000738:	20000004 	.word	0x20000004

0800073c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000740:	46c0      	nop			@ (mov r8, r8)
 8000742:	e7fd      	b.n	8000740 <NMI_Handler+0x4>

08000744 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000748:	46c0      	nop			@ (mov r8, r8)
 800074a:	e7fd      	b.n	8000748 <HardFault_Handler+0x4>

0800074c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000750:	4b03      	ldr	r3, [pc, #12]	@ (8000760 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000752:	0018      	movs	r0, r3
 8000754:	f001 ffa8 	bl	80026a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000758:	46c0      	nop			@ (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	200002f0 	.word	0x200002f0

08000764 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000768:	4b03      	ldr	r3, [pc, #12]	@ (8000778 <USART1_IRQHandler+0x14>)
 800076a:	0018      	movs	r0, r3
 800076c:	f002 f9ce 	bl	8002b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000770:	46c0      	nop			@ (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			@ (mov r8, r8)
 8000778:	20000338 	.word	0x20000338

0800077c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000780:	46c0      	nop			@ (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800078c:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 800078e:	4a15      	ldr	r2, [pc, #84]	@ (80007e4 <MX_USART1_UART_Init+0x5c>)
 8000790:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000792:	4b13      	ldr	r3, [pc, #76]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 8000794:	22e1      	movs	r2, #225	@ 0xe1
 8000796:	0252      	lsls	r2, r2, #9
 8000798:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ca:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007cc:	0018      	movs	r0, r3
 80007ce:	f002 f927 	bl	8002a20 <HAL_UART_Init>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d001      	beq.n	80007da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007d6:	f7ff fef1 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000338 	.word	0x20000338
 80007e4:	40013800 	.word	0x40013800

080007e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b08b      	sub	sp, #44	@ 0x2c
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	2414      	movs	r4, #20
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	0018      	movs	r0, r3
 80007f6:	2314      	movs	r3, #20
 80007f8:	001a      	movs	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f003 fff0 	bl	80047e0 <memset>
  if(uartHandle->Instance==USART1)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a20      	ldr	r2, [pc, #128]	@ (8000888 <HAL_UART_MspInit+0xa0>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d13a      	bne.n	8000880 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800080a:	4b20      	ldr	r3, [pc, #128]	@ (800088c <HAL_UART_MspInit+0xa4>)
 800080c:	699a      	ldr	r2, [r3, #24]
 800080e:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <HAL_UART_MspInit+0xa4>)
 8000810:	2180      	movs	r1, #128	@ 0x80
 8000812:	01c9      	lsls	r1, r1, #7
 8000814:	430a      	orrs	r2, r1
 8000816:	619a      	str	r2, [r3, #24]
 8000818:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <HAL_UART_MspInit+0xa4>)
 800081a:	699a      	ldr	r2, [r3, #24]
 800081c:	2380      	movs	r3, #128	@ 0x80
 800081e:	01db      	lsls	r3, r3, #7
 8000820:	4013      	ands	r3, r2
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b19      	ldr	r3, [pc, #100]	@ (800088c <HAL_UART_MspInit+0xa4>)
 8000828:	695a      	ldr	r2, [r3, #20]
 800082a:	4b18      	ldr	r3, [pc, #96]	@ (800088c <HAL_UART_MspInit+0xa4>)
 800082c:	2180      	movs	r1, #128	@ 0x80
 800082e:	0289      	lsls	r1, r1, #10
 8000830:	430a      	orrs	r2, r1
 8000832:	615a      	str	r2, [r3, #20]
 8000834:	4b15      	ldr	r3, [pc, #84]	@ (800088c <HAL_UART_MspInit+0xa4>)
 8000836:	695a      	ldr	r2, [r3, #20]
 8000838:	2380      	movs	r3, #128	@ 0x80
 800083a:	029b      	lsls	r3, r3, #10
 800083c:	4013      	ands	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000842:	0021      	movs	r1, r4
 8000844:	187b      	adds	r3, r7, r1
 8000846:	220c      	movs	r2, #12
 8000848:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2202      	movs	r2, #2
 800084e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2203      	movs	r2, #3
 800085a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2201      	movs	r2, #1
 8000860:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	187a      	adds	r2, r7, r1
 8000864:	2390      	movs	r3, #144	@ 0x90
 8000866:	05db      	lsls	r3, r3, #23
 8000868:	0011      	movs	r1, r2
 800086a:	0018      	movs	r0, r3
 800086c:	f000 f9ac 	bl	8000bc8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000870:	2200      	movs	r2, #0
 8000872:	2103      	movs	r1, #3
 8000874:	201b      	movs	r0, #27
 8000876:	f000 f8ed 	bl	8000a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800087a:	201b      	movs	r0, #27
 800087c:	f000 f90a 	bl	8000a94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000880:	46c0      	nop			@ (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	b00b      	add	sp, #44	@ 0x2c
 8000886:	bd90      	pop	{r4, r7, pc}
 8000888:	40013800 	.word	0x40013800
 800088c:	40021000 	.word	0x40021000

08000890 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000890:	480d      	ldr	r0, [pc, #52]	@ (80008c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000892:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000894:	f7ff ff72 	bl	800077c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000898:	480c      	ldr	r0, [pc, #48]	@ (80008cc <LoopForever+0x6>)
  ldr r1, =_edata
 800089a:	490d      	ldr	r1, [pc, #52]	@ (80008d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800089c:	4a0d      	ldr	r2, [pc, #52]	@ (80008d4 <LoopForever+0xe>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a0:	e002      	b.n	80008a8 <LoopCopyDataInit>

080008a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a6:	3304      	adds	r3, #4

080008a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ac:	d3f9      	bcc.n	80008a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ae:	4a0a      	ldr	r2, [pc, #40]	@ (80008d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b0:	4c0a      	ldr	r4, [pc, #40]	@ (80008dc <LoopForever+0x16>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b4:	e001      	b.n	80008ba <LoopFillZerobss>

080008b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b8:	3204      	adds	r2, #4

080008ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008bc:	d3fb      	bcc.n	80008b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008be:	f003 fff7 	bl	80048b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008c2:	f7ff fdf3 	bl	80004ac <main>

080008c6 <LoopForever>:

LoopForever:
    b LoopForever
 80008c6:	e7fe      	b.n	80008c6 <LoopForever>
  ldr   r0, =_estack
 80008c8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80008cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80008d4:	08004d90 	.word	0x08004d90
  ldr r2, =_sbss
 80008d8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80008dc:	20000644 	.word	0x20000644

080008e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e0:	e7fe      	b.n	80008e0 <ADC1_IRQHandler>
	...

080008e4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e8:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <HAL_Init+0x24>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <HAL_Init+0x24>)
 80008ee:	2110      	movs	r1, #16
 80008f0:	430a      	orrs	r2, r1
 80008f2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008f4:	2003      	movs	r0, #3
 80008f6:	f7ff fe9b 	bl	8000630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008fa:	f7ff fe6f 	bl	80005dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008fe:	2300      	movs	r3, #0
}
 8000900:	0018      	movs	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	40022000 	.word	0x40022000

0800090c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000910:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <HAL_IncTick+0x1c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	001a      	movs	r2, r3
 8000916:	4b05      	ldr	r3, [pc, #20]	@ (800092c <HAL_IncTick+0x20>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	18d2      	adds	r2, r2, r3
 800091c:	4b03      	ldr	r3, [pc, #12]	@ (800092c <HAL_IncTick+0x20>)
 800091e:	601a      	str	r2, [r3, #0]
}
 8000920:	46c0      	nop			@ (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			@ (mov r8, r8)
 8000928:	20000008 	.word	0x20000008
 800092c:	200003c0 	.word	0x200003c0

08000930 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  return uwTick;
 8000934:	4b02      	ldr	r3, [pc, #8]	@ (8000940 <HAL_GetTick+0x10>)
 8000936:	681b      	ldr	r3, [r3, #0]
}
 8000938:	0018      	movs	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			@ (mov r8, r8)
 8000940:	200003c0 	.word	0x200003c0

08000944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	0002      	movs	r2, r0
 800094c:	1dfb      	adds	r3, r7, #7
 800094e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000950:	1dfb      	adds	r3, r7, #7
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b7f      	cmp	r3, #127	@ 0x7f
 8000956:	d809      	bhi.n	800096c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000958:	1dfb      	adds	r3, r7, #7
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	001a      	movs	r2, r3
 800095e:	231f      	movs	r3, #31
 8000960:	401a      	ands	r2, r3
 8000962:	4b04      	ldr	r3, [pc, #16]	@ (8000974 <__NVIC_EnableIRQ+0x30>)
 8000964:	2101      	movs	r1, #1
 8000966:	4091      	lsls	r1, r2
 8000968:	000a      	movs	r2, r1
 800096a:	601a      	str	r2, [r3, #0]
  }
}
 800096c:	46c0      	nop			@ (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	b002      	add	sp, #8
 8000972:	bd80      	pop	{r7, pc}
 8000974:	e000e100 	.word	0xe000e100

08000978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	0002      	movs	r2, r0
 8000980:	6039      	str	r1, [r7, #0]
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b7f      	cmp	r3, #127	@ 0x7f
 800098c:	d828      	bhi.n	80009e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800098e:	4a2f      	ldr	r2, [pc, #188]	@ (8000a4c <__NVIC_SetPriority+0xd4>)
 8000990:	1dfb      	adds	r3, r7, #7
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b25b      	sxtb	r3, r3
 8000996:	089b      	lsrs	r3, r3, #2
 8000998:	33c0      	adds	r3, #192	@ 0xc0
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	589b      	ldr	r3, [r3, r2]
 800099e:	1dfa      	adds	r2, r7, #7
 80009a0:	7812      	ldrb	r2, [r2, #0]
 80009a2:	0011      	movs	r1, r2
 80009a4:	2203      	movs	r2, #3
 80009a6:	400a      	ands	r2, r1
 80009a8:	00d2      	lsls	r2, r2, #3
 80009aa:	21ff      	movs	r1, #255	@ 0xff
 80009ac:	4091      	lsls	r1, r2
 80009ae:	000a      	movs	r2, r1
 80009b0:	43d2      	mvns	r2, r2
 80009b2:	401a      	ands	r2, r3
 80009b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	019b      	lsls	r3, r3, #6
 80009ba:	22ff      	movs	r2, #255	@ 0xff
 80009bc:	401a      	ands	r2, r3
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	0018      	movs	r0, r3
 80009c4:	2303      	movs	r3, #3
 80009c6:	4003      	ands	r3, r0
 80009c8:	00db      	lsls	r3, r3, #3
 80009ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009cc:	481f      	ldr	r0, [pc, #124]	@ (8000a4c <__NVIC_SetPriority+0xd4>)
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	b25b      	sxtb	r3, r3
 80009d4:	089b      	lsrs	r3, r3, #2
 80009d6:	430a      	orrs	r2, r1
 80009d8:	33c0      	adds	r3, #192	@ 0xc0
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009de:	e031      	b.n	8000a44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a50 <__NVIC_SetPriority+0xd8>)
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	0019      	movs	r1, r3
 80009e8:	230f      	movs	r3, #15
 80009ea:	400b      	ands	r3, r1
 80009ec:	3b08      	subs	r3, #8
 80009ee:	089b      	lsrs	r3, r3, #2
 80009f0:	3306      	adds	r3, #6
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	18d3      	adds	r3, r2, r3
 80009f6:	3304      	adds	r3, #4
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	1dfa      	adds	r2, r7, #7
 80009fc:	7812      	ldrb	r2, [r2, #0]
 80009fe:	0011      	movs	r1, r2
 8000a00:	2203      	movs	r2, #3
 8000a02:	400a      	ands	r2, r1
 8000a04:	00d2      	lsls	r2, r2, #3
 8000a06:	21ff      	movs	r1, #255	@ 0xff
 8000a08:	4091      	lsls	r1, r2
 8000a0a:	000a      	movs	r2, r1
 8000a0c:	43d2      	mvns	r2, r2
 8000a0e:	401a      	ands	r2, r3
 8000a10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	019b      	lsls	r3, r3, #6
 8000a16:	22ff      	movs	r2, #255	@ 0xff
 8000a18:	401a      	ands	r2, r3
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	0018      	movs	r0, r3
 8000a20:	2303      	movs	r3, #3
 8000a22:	4003      	ands	r3, r0
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a28:	4809      	ldr	r0, [pc, #36]	@ (8000a50 <__NVIC_SetPriority+0xd8>)
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	001c      	movs	r4, r3
 8000a30:	230f      	movs	r3, #15
 8000a32:	4023      	ands	r3, r4
 8000a34:	3b08      	subs	r3, #8
 8000a36:	089b      	lsrs	r3, r3, #2
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	3306      	adds	r3, #6
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	18c3      	adds	r3, r0, r3
 8000a40:	3304      	adds	r3, #4
 8000a42:	601a      	str	r2, [r3, #0]
}
 8000a44:	46c0      	nop			@ (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b003      	add	sp, #12
 8000a4a:	bd90      	pop	{r4, r7, pc}
 8000a4c:	e000e100 	.word	0xe000e100
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
 8000a5e:	230f      	movs	r3, #15
 8000a60:	18fb      	adds	r3, r7, r3
 8000a62:	1c02      	adds	r2, r0, #0
 8000a64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	2b03      	cmp	r3, #3
 8000a6a:	d904      	bls.n	8000a76 <HAL_NVIC_SetPriority+0x22>
 8000a6c:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <HAL_NVIC_SetPriority+0x3c>)
 8000a6e:	218a      	movs	r1, #138	@ 0x8a
 8000a70:	0018      	movs	r0, r3
 8000a72:	f7ff fda9 	bl	80005c8 <assert_failed>
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	230f      	movs	r3, #15
 8000a7a:	18fb      	adds	r3, r7, r3
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b25b      	sxtb	r3, r3
 8000a80:	0011      	movs	r1, r2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f7ff ff78 	bl	8000978 <__NVIC_SetPriority>
}
 8000a88:	46c0      	nop			@ (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b004      	add	sp, #16
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	080049c8 	.word	0x080049c8

08000a94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	0002      	movs	r2, r0
 8000a9c:	1dfb      	adds	r3, r7, #7
 8000a9e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000aa6:	d904      	bls.n	8000ab2 <HAL_NVIC_EnableIRQ+0x1e>
 8000aa8:	4b07      	ldr	r3, [pc, #28]	@ (8000ac8 <HAL_NVIC_EnableIRQ+0x34>)
 8000aaa:	219a      	movs	r1, #154	@ 0x9a
 8000aac:	0018      	movs	r0, r3
 8000aae:	f7ff fd8b 	bl	80005c8 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	b25b      	sxtb	r3, r3
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff ff43 	bl	8000944 <__NVIC_EnableIRQ>
}
 8000abe:	46c0      	nop			@ (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b002      	add	sp, #8
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	080049c8 	.word	0x080049c8

08000acc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2221      	movs	r2, #33	@ 0x21
 8000ad8:	5c9b      	ldrb	r3, [r3, r2]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d008      	beq.n	8000af2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2220      	movs	r2, #32
 8000aea:	2100      	movs	r1, #0
 8000aec:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e020      	b.n	8000b34 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	210e      	movs	r1, #14
 8000afe:	438a      	bics	r2, r1
 8000b00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	438a      	bics	r2, r1
 8000b10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	4091      	lsls	r1, r2
 8000b1e:	000a      	movs	r2, r1
 8000b20:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2221      	movs	r2, #33	@ 0x21
 8000b26:	2101      	movs	r1, #1
 8000b28:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2220      	movs	r2, #32
 8000b2e:	2100      	movs	r1, #0
 8000b30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
}
 8000b34:	0018      	movs	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b002      	add	sp, #8
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b44:	210f      	movs	r1, #15
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2221      	movs	r2, #33	@ 0x21
 8000b50:	5c9b      	ldrb	r3, [r3, r2]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d006      	beq.n	8000b66 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2201      	movs	r2, #1
 8000b62:	701a      	strb	r2, [r3, #0]
 8000b64:	e028      	b.n	8000bb8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	210e      	movs	r1, #14
 8000b72:	438a      	bics	r2, r1
 8000b74:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2101      	movs	r1, #1
 8000b82:	438a      	bics	r2, r1
 8000b84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b8e:	2101      	movs	r1, #1
 8000b90:	4091      	lsls	r1, r2
 8000b92:	000a      	movs	r2, r1
 8000b94:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2221      	movs	r2, #33	@ 0x21
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2220      	movs	r2, #32
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d004      	beq.n	8000bb8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	0010      	movs	r0, r2
 8000bb6:	4798      	blx	r3
    }
  }
  return status;
 8000bb8:	230f      	movs	r3, #15
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	781b      	ldrb	r3, [r3, #0]
}
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b004      	add	sp, #16
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	2390      	movs	r3, #144	@ 0x90
 8000bda:	05db      	lsls	r3, r3, #23
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d010      	beq.n	8000c02 <HAL_GPIO_Init+0x3a>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4ac5      	ldr	r2, [pc, #788]	@ (8000ef8 <HAL_GPIO_Init+0x330>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d00c      	beq.n	8000c02 <HAL_GPIO_Init+0x3a>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4ac4      	ldr	r2, [pc, #784]	@ (8000efc <HAL_GPIO_Init+0x334>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d008      	beq.n	8000c02 <HAL_GPIO_Init+0x3a>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4ac3      	ldr	r2, [pc, #780]	@ (8000f00 <HAL_GPIO_Init+0x338>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d004      	beq.n	8000c02 <HAL_GPIO_Init+0x3a>
 8000bf8:	4bc2      	ldr	r3, [pc, #776]	@ (8000f04 <HAL_GPIO_Init+0x33c>)
 8000bfa:	21b0      	movs	r1, #176	@ 0xb0
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff fce3 	bl	80005c8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	041b      	lsls	r3, r3, #16
 8000c08:	0c1b      	lsrs	r3, r3, #16
 8000c0a:	d005      	beq.n	8000c18 <HAL_GPIO_Init+0x50>
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	2380      	movs	r3, #128	@ 0x80
 8000c12:	025b      	lsls	r3, r3, #9
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d304      	bcc.n	8000c22 <HAL_GPIO_Init+0x5a>
 8000c18:	4bba      	ldr	r3, [pc, #744]	@ (8000f04 <HAL_GPIO_Init+0x33c>)
 8000c1a:	21b1      	movs	r1, #177	@ 0xb1
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f7ff fcd3 	bl	80005c8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d100      	bne.n	8000c2c <HAL_GPIO_Init+0x64>
 8000c2a:	e1d8      	b.n	8000fde <HAL_GPIO_Init+0x416>
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d100      	bne.n	8000c36 <HAL_GPIO_Init+0x6e>
 8000c34:	e1d3      	b.n	8000fde <HAL_GPIO_Init+0x416>
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b11      	cmp	r3, #17
 8000c3c:	d100      	bne.n	8000c40 <HAL_GPIO_Init+0x78>
 8000c3e:	e1ce      	b.n	8000fde <HAL_GPIO_Init+0x416>
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d100      	bne.n	8000c4a <HAL_GPIO_Init+0x82>
 8000c48:	e1c9      	b.n	8000fde <HAL_GPIO_Init+0x416>
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2b12      	cmp	r3, #18
 8000c50:	d100      	bne.n	8000c54 <HAL_GPIO_Init+0x8c>
 8000c52:	e1c4      	b.n	8000fde <HAL_GPIO_Init+0x416>
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	2388      	movs	r3, #136	@ 0x88
 8000c5a:	035b      	lsls	r3, r3, #13
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d100      	bne.n	8000c62 <HAL_GPIO_Init+0x9a>
 8000c60:	e1bd      	b.n	8000fde <HAL_GPIO_Init+0x416>
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	2384      	movs	r3, #132	@ 0x84
 8000c68:	039b      	lsls	r3, r3, #14
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d100      	bne.n	8000c70 <HAL_GPIO_Init+0xa8>
 8000c6e:	e1b6      	b.n	8000fde <HAL_GPIO_Init+0x416>
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	23c4      	movs	r3, #196	@ 0xc4
 8000c76:	039b      	lsls	r3, r3, #14
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d100      	bne.n	8000c7e <HAL_GPIO_Init+0xb6>
 8000c7c:	e1af      	b.n	8000fde <HAL_GPIO_Init+0x416>
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	2390      	movs	r3, #144	@ 0x90
 8000c84:	035b      	lsls	r3, r3, #13
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d100      	bne.n	8000c8c <HAL_GPIO_Init+0xc4>
 8000c8a:	e1a8      	b.n	8000fde <HAL_GPIO_Init+0x416>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685a      	ldr	r2, [r3, #4]
 8000c90:	2388      	movs	r3, #136	@ 0x88
 8000c92:	039b      	lsls	r3, r3, #14
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d100      	bne.n	8000c9a <HAL_GPIO_Init+0xd2>
 8000c98:	e1a1      	b.n	8000fde <HAL_GPIO_Init+0x416>
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	23c8      	movs	r3, #200	@ 0xc8
 8000ca0:	039b      	lsls	r3, r3, #14
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d100      	bne.n	8000ca8 <HAL_GPIO_Init+0xe0>
 8000ca6:	e19a      	b.n	8000fde <HAL_GPIO_Init+0x416>
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b03      	cmp	r3, #3
 8000cae:	d100      	bne.n	8000cb2 <HAL_GPIO_Init+0xea>
 8000cb0:	e195      	b.n	8000fde <HAL_GPIO_Init+0x416>
 8000cb2:	4b94      	ldr	r3, [pc, #592]	@ (8000f04 <HAL_GPIO_Init+0x33c>)
 8000cb4:	21b2      	movs	r1, #178	@ 0xb2
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f7ff fc86 	bl	80005c8 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cbc:	e18f      	b.n	8000fde <HAL_GPIO_Init+0x416>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	000a      	movs	r2, r1
 8000cca:	4013      	ands	r3, r2
 8000ccc:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d100      	bne.n	8000cd6 <HAL_GPIO_Init+0x10e>
 8000cd4:	e180      	b.n	8000fd8 <HAL_GPIO_Init+0x410>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2203      	movs	r2, #3
 8000cdc:	4013      	ands	r3, r2
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d005      	beq.n	8000cee <HAL_GPIO_Init+0x126>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d141      	bne.n	8000d72 <HAL_GPIO_Init+0x1aa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d00c      	beq.n	8000d10 <HAL_GPIO_Init+0x148>
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d008      	beq.n	8000d10 <HAL_GPIO_Init+0x148>
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d004      	beq.n	8000d10 <HAL_GPIO_Init+0x148>
 8000d06:	4b7f      	ldr	r3, [pc, #508]	@ (8000f04 <HAL_GPIO_Init+0x33c>)
 8000d08:	21c2      	movs	r1, #194	@ 0xc2
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff fc5c 	bl	80005c8 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	409a      	lsls	r2, r3
 8000d1e:	0013      	movs	r3, r2
 8000d20:	43da      	mvns	r2, r3
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	409a      	lsls	r2, r3
 8000d32:	0013      	movs	r3, r2
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d46:	2201      	movs	r2, #1
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	091b      	lsrs	r3, r3, #4
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
 8000d64:	0013      	movs	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2203      	movs	r2, #3
 8000d78:	4013      	ands	r3, r2
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d028      	beq.n	8000dd0 <HAL_GPIO_Init+0x208>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d00c      	beq.n	8000da0 <HAL_GPIO_Init+0x1d8>
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d008      	beq.n	8000da0 <HAL_GPIO_Init+0x1d8>
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d004      	beq.n	8000da0 <HAL_GPIO_Init+0x1d8>
 8000d96:	4b5b      	ldr	r3, [pc, #364]	@ (8000f04 <HAL_GPIO_Init+0x33c>)
 8000d98:	21d3      	movs	r1, #211	@ 0xd3
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f7ff fc14 	bl	80005c8 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	2203      	movs	r2, #3
 8000dac:	409a      	lsls	r2, r3
 8000dae:	0013      	movs	r3, r2
 8000db0:	43da      	mvns	r2, r3
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	409a      	lsls	r2, r3
 8000dc2:	0013      	movs	r3, r2
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d13a      	bne.n	8000e52 <HAL_GPIO_Init+0x28a>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	2390      	movs	r3, #144	@ 0x90
 8000de0:	05db      	lsls	r3, r3, #23
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d008      	beq.n	8000df8 <HAL_GPIO_Init+0x230>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a43      	ldr	r2, [pc, #268]	@ (8000ef8 <HAL_GPIO_Init+0x330>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d004      	beq.n	8000df8 <HAL_GPIO_Init+0x230>
 8000dee:	4b45      	ldr	r3, [pc, #276]	@ (8000f04 <HAL_GPIO_Init+0x33c>)
 8000df0:	21e0      	movs	r1, #224	@ 0xe0
 8000df2:	0018      	movs	r0, r3
 8000df4:	f7ff fbe8 	bl	80005c8 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	2b06      	cmp	r3, #6
 8000dfe:	d904      	bls.n	8000e0a <HAL_GPIO_Init+0x242>
 8000e00:	4b40      	ldr	r3, [pc, #256]	@ (8000f04 <HAL_GPIO_Init+0x33c>)
 8000e02:	21e1      	movs	r1, #225	@ 0xe1
 8000e04:	0018      	movs	r0, r3
 8000e06:	f7ff fbdf 	bl	80005c8 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	08da      	lsrs	r2, r3, #3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	3208      	adds	r2, #8
 8000e12:	0092      	lsls	r2, r2, #2
 8000e14:	58d3      	ldr	r3, [r2, r3]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	2207      	movs	r2, #7
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	220f      	movs	r2, #15
 8000e22:	409a      	lsls	r2, r3
 8000e24:	0013      	movs	r3, r2
 8000e26:	43da      	mvns	r2, r3
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	691a      	ldr	r2, [r3, #16]
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	2107      	movs	r1, #7
 8000e36:	400b      	ands	r3, r1
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	409a      	lsls	r2, r3
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	08da      	lsrs	r2, r3, #3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3208      	adds	r2, #8
 8000e4c:	0092      	lsls	r2, r2, #2
 8000e4e:	6939      	ldr	r1, [r7, #16]
 8000e50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	0013      	movs	r3, r2
 8000e62:	43da      	mvns	r2, r3
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2203      	movs	r2, #3
 8000e70:	401a      	ands	r2, r3
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	409a      	lsls	r2, r3
 8000e78:	0013      	movs	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	23c0      	movs	r3, #192	@ 0xc0
 8000e8c:	029b      	lsls	r3, r3, #10
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d100      	bne.n	8000e94 <HAL_GPIO_Init+0x2cc>
 8000e92:	e0a1      	b.n	8000fd8 <HAL_GPIO_Init+0x410>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e94:	4b1c      	ldr	r3, [pc, #112]	@ (8000f08 <HAL_GPIO_Init+0x340>)
 8000e96:	699a      	ldr	r2, [r3, #24]
 8000e98:	4b1b      	ldr	r3, [pc, #108]	@ (8000f08 <HAL_GPIO_Init+0x340>)
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	619a      	str	r2, [r3, #24]
 8000ea0:	4b19      	ldr	r3, [pc, #100]	@ (8000f08 <HAL_GPIO_Init+0x340>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eac:	4a17      	ldr	r2, [pc, #92]	@ (8000f0c <HAL_GPIO_Init+0x344>)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	589b      	ldr	r3, [r3, r2]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	220f      	movs	r2, #15
 8000ec4:	409a      	lsls	r2, r3
 8000ec6:	0013      	movs	r3, r2
 8000ec8:	43da      	mvns	r2, r3
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	2390      	movs	r3, #144	@ 0x90
 8000ed4:	05db      	lsls	r3, r3, #23
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d01a      	beq.n	8000f10 <HAL_GPIO_Init+0x348>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a06      	ldr	r2, [pc, #24]	@ (8000ef8 <HAL_GPIO_Init+0x330>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d007      	beq.n	8000ef2 <HAL_GPIO_Init+0x32a>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a05      	ldr	r2, [pc, #20]	@ (8000efc <HAL_GPIO_Init+0x334>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d101      	bne.n	8000eee <HAL_GPIO_Init+0x326>
 8000eea:	2302      	movs	r3, #2
 8000eec:	e011      	b.n	8000f12 <HAL_GPIO_Init+0x34a>
 8000eee:	2305      	movs	r3, #5
 8000ef0:	e00f      	b.n	8000f12 <HAL_GPIO_Init+0x34a>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00d      	b.n	8000f12 <HAL_GPIO_Init+0x34a>
 8000ef6:	46c0      	nop			@ (mov r8, r8)
 8000ef8:	48000400 	.word	0x48000400
 8000efc:	48000800 	.word	0x48000800
 8000f00:	48001400 	.word	0x48001400
 8000f04:	08004a38 	.word	0x08004a38
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40010000 	.word	0x40010000
 8000f10:	2300      	movs	r3, #0
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	2103      	movs	r1, #3
 8000f16:	400a      	ands	r2, r1
 8000f18:	0092      	lsls	r2, r2, #2
 8000f1a:	4093      	lsls	r3, r2
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f22:	4935      	ldr	r1, [pc, #212]	@ (8000ff8 <HAL_GPIO_Init+0x430>)
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	3302      	adds	r3, #2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f30:	4b32      	ldr	r3, [pc, #200]	@ (8000ffc <HAL_GPIO_Init+0x434>)
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	43da      	mvns	r2, r3
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	2380      	movs	r3, #128	@ 0x80
 8000f46:	035b      	lsls	r3, r3, #13
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x38c>
        {
          temp |= iocurrent;
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f54:	4b29      	ldr	r3, [pc, #164]	@ (8000ffc <HAL_GPIO_Init+0x434>)
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f5a:	4b28      	ldr	r3, [pc, #160]	@ (8000ffc <HAL_GPIO_Init+0x434>)
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	43da      	mvns	r2, r3
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	2380      	movs	r3, #128	@ 0x80
 8000f70:	039b      	lsls	r3, r3, #14
 8000f72:	4013      	ands	r3, r2
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x3b6>
        {
          temp |= iocurrent;
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ffc <HAL_GPIO_Init+0x434>)
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000f84:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <HAL_GPIO_Init+0x434>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	43da      	mvns	r2, r3
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	2380      	movs	r3, #128	@ 0x80
 8000f9a:	029b      	lsls	r3, r3, #10
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0x3e0>
        {
          temp |= iocurrent;
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <HAL_GPIO_Init+0x434>)
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000fae:	4b13      	ldr	r3, [pc, #76]	@ (8000ffc <HAL_GPIO_Init+0x434>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	2380      	movs	r3, #128	@ 0x80
 8000fc4:	025b      	lsls	r3, r3, #9
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x40a>
        {
          temp |= iocurrent;
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <HAL_GPIO_Init+0x434>)
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	40da      	lsrs	r2, r3
 8000fe6:	1e13      	subs	r3, r2, #0
 8000fe8:	d000      	beq.n	8000fec <HAL_GPIO_Init+0x424>
 8000fea:	e668      	b.n	8000cbe <HAL_GPIO_Init+0xf6>
  } 
}
 8000fec:	46c0      	nop			@ (mov r8, r8)
 8000fee:	46c0      	nop			@ (mov r8, r8)
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b006      	add	sp, #24
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	40010000 	.word	0x40010000
 8000ffc:	40010400 	.word	0x40010400

08001000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	0008      	movs	r0, r1
 800100a:	0011      	movs	r1, r2
 800100c:	1cbb      	adds	r3, r7, #2
 800100e:	1c02      	adds	r2, r0, #0
 8001010:	801a      	strh	r2, [r3, #0]
 8001012:	1c7b      	adds	r3, r7, #1
 8001014:	1c0a      	adds	r2, r1, #0
 8001016:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001018:	1cbb      	adds	r3, r7, #2
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d106      	bne.n	800102e <HAL_GPIO_WritePin+0x2e>
 8001020:	23d1      	movs	r3, #209	@ 0xd1
 8001022:	005a      	lsls	r2, r3, #1
 8001024:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <HAL_GPIO_WritePin+0x70>)
 8001026:	0011      	movs	r1, r2
 8001028:	0018      	movs	r0, r3
 800102a:	f7ff facd 	bl	80005c8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800102e:	1c7b      	adds	r3, r7, #1
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00b      	beq.n	800104e <HAL_GPIO_WritePin+0x4e>
 8001036:	1c7b      	adds	r3, r7, #1
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d007      	beq.n	800104e <HAL_GPIO_WritePin+0x4e>
 800103e:	23a4      	movs	r3, #164	@ 0xa4
 8001040:	33ff      	adds	r3, #255	@ 0xff
 8001042:	001a      	movs	r2, r3
 8001044:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <HAL_GPIO_WritePin+0x70>)
 8001046:	0011      	movs	r1, r2
 8001048:	0018      	movs	r0, r3
 800104a:	f7ff fabd 	bl	80005c8 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800104e:	1c7b      	adds	r3, r7, #1
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d004      	beq.n	8001060 <HAL_GPIO_WritePin+0x60>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001056:	1cbb      	adds	r3, r7, #2
 8001058:	881a      	ldrh	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800105e:	e003      	b.n	8001068 <HAL_GPIO_WritePin+0x68>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001060:	1cbb      	adds	r3, r7, #2
 8001062:	881a      	ldrh	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001068:	46c0      	nop			@ (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	b002      	add	sp, #8
 800106e:	bd80      	pop	{r7, pc}
 8001070:	08004a38 	.word	0x08004a38

08001074 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e109      	b.n	800129a <HAL_I2C_Init+0x226>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a86      	ldr	r2, [pc, #536]	@ (80012a4 <HAL_I2C_Init+0x230>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d006      	beq.n	800109e <HAL_I2C_Init+0x2a>
 8001090:	2388      	movs	r3, #136	@ 0x88
 8001092:	009a      	lsls	r2, r3, #2
 8001094:	4b84      	ldr	r3, [pc, #528]	@ (80012a8 <HAL_I2C_Init+0x234>)
 8001096:	0011      	movs	r1, r2
 8001098:	0018      	movs	r0, r3
 800109a:	f7ff fa95 	bl	80005c8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	2380      	movs	r3, #128	@ 0x80
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d305      	bcc.n	80010b6 <HAL_I2C_Init+0x42>
 80010aa:	4a80      	ldr	r2, [pc, #512]	@ (80012ac <HAL_I2C_Init+0x238>)
 80010ac:	4b7e      	ldr	r3, [pc, #504]	@ (80012a8 <HAL_I2C_Init+0x234>)
 80010ae:	0011      	movs	r1, r2
 80010b0:	0018      	movs	r0, r3
 80010b2:	f7ff fa89 	bl	80005c8 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d009      	beq.n	80010d2 <HAL_I2C_Init+0x5e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d005      	beq.n	80010d2 <HAL_I2C_Init+0x5e>
 80010c6:	4a7a      	ldr	r2, [pc, #488]	@ (80012b0 <HAL_I2C_Init+0x23c>)
 80010c8:	4b77      	ldr	r3, [pc, #476]	@ (80012a8 <HAL_I2C_Init+0x234>)
 80010ca:	0011      	movs	r1, r2
 80010cc:	0018      	movs	r0, r3
 80010ce:	f7ff fa7b 	bl	80005c8 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00b      	beq.n	80010f2 <HAL_I2C_Init+0x7e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	691a      	ldr	r2, [r3, #16]
 80010de:	2380      	movs	r3, #128	@ 0x80
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d005      	beq.n	80010f2 <HAL_I2C_Init+0x7e>
 80010e6:	4a73      	ldr	r2, [pc, #460]	@ (80012b4 <HAL_I2C_Init+0x240>)
 80010e8:	4b6f      	ldr	r3, [pc, #444]	@ (80012a8 <HAL_I2C_Init+0x234>)
 80010ea:	0011      	movs	r1, r2
 80010ec:	0018      	movs	r0, r3
 80010ee:	f7ff fa6b 	bl	80005c8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	2bff      	cmp	r3, #255	@ 0xff
 80010f8:	d906      	bls.n	8001108 <HAL_I2C_Init+0x94>
 80010fa:	2389      	movs	r3, #137	@ 0x89
 80010fc:	009a      	lsls	r2, r3, #2
 80010fe:	4b6a      	ldr	r3, [pc, #424]	@ (80012a8 <HAL_I2C_Init+0x234>)
 8001100:	0011      	movs	r1, r2
 8001102:	0018      	movs	r0, r3
 8001104:	f7ff fa60 	bl	80005c8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d021      	beq.n	8001154 <HAL_I2C_Init+0xe0>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d01d      	beq.n	8001154 <HAL_I2C_Init+0xe0>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d019      	beq.n	8001154 <HAL_I2C_Init+0xe0>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	2b03      	cmp	r3, #3
 8001126:	d015      	beq.n	8001154 <HAL_I2C_Init+0xe0>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	2b04      	cmp	r3, #4
 800112e:	d011      	beq.n	8001154 <HAL_I2C_Init+0xe0>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	2b05      	cmp	r3, #5
 8001136:	d00d      	beq.n	8001154 <HAL_I2C_Init+0xe0>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	2b06      	cmp	r3, #6
 800113e:	d009      	beq.n	8001154 <HAL_I2C_Init+0xe0>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	2b07      	cmp	r3, #7
 8001146:	d005      	beq.n	8001154 <HAL_I2C_Init+0xe0>
 8001148:	4a5b      	ldr	r2, [pc, #364]	@ (80012b8 <HAL_I2C_Init+0x244>)
 800114a:	4b57      	ldr	r3, [pc, #348]	@ (80012a8 <HAL_I2C_Init+0x234>)
 800114c:	0011      	movs	r1, r2
 800114e:	0018      	movs	r0, r3
 8001150:	f7ff fa3a 	bl	80005c8 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69db      	ldr	r3, [r3, #28]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d00b      	beq.n	8001174 <HAL_I2C_Init+0x100>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69da      	ldr	r2, [r3, #28]
 8001160:	2380      	movs	r3, #128	@ 0x80
 8001162:	031b      	lsls	r3, r3, #12
 8001164:	429a      	cmp	r2, r3
 8001166:	d005      	beq.n	8001174 <HAL_I2C_Init+0x100>
 8001168:	4a54      	ldr	r2, [pc, #336]	@ (80012bc <HAL_I2C_Init+0x248>)
 800116a:	4b4f      	ldr	r3, [pc, #316]	@ (80012a8 <HAL_I2C_Init+0x234>)
 800116c:	0011      	movs	r1, r2
 800116e:	0018      	movs	r0, r3
 8001170:	f7ff fa2a 	bl	80005c8 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d00b      	beq.n	8001194 <HAL_I2C_Init+0x120>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1a      	ldr	r2, [r3, #32]
 8001180:	2380      	movs	r3, #128	@ 0x80
 8001182:	029b      	lsls	r3, r3, #10
 8001184:	429a      	cmp	r2, r3
 8001186:	d005      	beq.n	8001194 <HAL_I2C_Init+0x120>
 8001188:	4a4d      	ldr	r2, [pc, #308]	@ (80012c0 <HAL_I2C_Init+0x24c>)
 800118a:	4b47      	ldr	r3, [pc, #284]	@ (80012a8 <HAL_I2C_Init+0x234>)
 800118c:	0011      	movs	r1, r2
 800118e:	0018      	movs	r0, r3
 8001190:	f7ff fa1a 	bl	80005c8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2241      	movs	r2, #65	@ 0x41
 8001198:	5c9b      	ldrb	r3, [r3, r2]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d107      	bne.n	80011b0 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2240      	movs	r2, #64	@ 0x40
 80011a4:	2100      	movs	r1, #0
 80011a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	0018      	movs	r0, r3
 80011ac:	f7ff f930 	bl	8000410 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2241      	movs	r2, #65	@ 0x41
 80011b4:	2124      	movs	r1, #36	@ 0x24
 80011b6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2101      	movs	r1, #1
 80011c4:	438a      	bics	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	493c      	ldr	r1, [pc, #240]	@ (80012c4 <HAL_I2C_Init+0x250>)
 80011d2:	400a      	ands	r2, r1
 80011d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4939      	ldr	r1, [pc, #228]	@ (80012c8 <HAL_I2C_Init+0x254>)
 80011e2:	400a      	ands	r2, r1
 80011e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d108      	bne.n	8001200 <HAL_I2C_Init+0x18c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2180      	movs	r1, #128	@ 0x80
 80011f8:	0209      	lsls	r1, r1, #8
 80011fa:	430a      	orrs	r2, r1
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	e007      	b.n	8001210 <HAL_I2C_Init+0x19c>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2184      	movs	r1, #132	@ 0x84
 800120a:	0209      	lsls	r1, r1, #8
 800120c:	430a      	orrs	r2, r1
 800120e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	2b02      	cmp	r3, #2
 8001216:	d104      	bne.n	8001222 <HAL_I2C_Init+0x1ae>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2280      	movs	r2, #128	@ 0x80
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4927      	ldr	r1, [pc, #156]	@ (80012cc <HAL_I2C_Init+0x258>)
 800122e:	430a      	orrs	r2, r1
 8001230:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4922      	ldr	r1, [pc, #136]	@ (80012c8 <HAL_I2C_Init+0x254>)
 800123e:	400a      	ands	r2, r1
 8001240:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691a      	ldr	r2, [r3, #16]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	431a      	orrs	r2, r3
 800124c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	430a      	orrs	r2, r1
 800125a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69d9      	ldr	r1, [r3, #28]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a1a      	ldr	r2, [r3, #32]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	430a      	orrs	r2, r1
 800126a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2101      	movs	r1, #1
 8001278:	430a      	orrs	r2, r1
 800127a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2241      	movs	r2, #65	@ 0x41
 8001286:	2120      	movs	r1, #32
 8001288:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2242      	movs	r2, #66	@ 0x42
 8001294:	2100      	movs	r1, #0
 8001296:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	0018      	movs	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	b002      	add	sp, #8
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	46c0      	nop			@ (mov r8, r8)
 80012a4:	40005400 	.word	0x40005400
 80012a8:	08004aa8 	.word	0x08004aa8
 80012ac:	00000221 	.word	0x00000221
 80012b0:	00000222 	.word	0x00000222
 80012b4:	00000223 	.word	0x00000223
 80012b8:	00000225 	.word	0x00000225
 80012bc:	00000226 	.word	0x00000226
 80012c0:	00000227 	.word	0x00000227
 80012c4:	f0ffffff 	.word	0xf0ffffff
 80012c8:	ffff7fff 	.word	0xffff7fff
 80012cc:	02008000 	.word	0x02008000

080012d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a2c      	ldr	r2, [pc, #176]	@ (8001390 <HAL_I2CEx_ConfigAnalogFilter+0xc0>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d004      	beq.n	80012ee <HAL_I2CEx_ConfigAnalogFilter+0x1e>
 80012e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001394 <HAL_I2CEx_ConfigAnalogFilter+0xc4>)
 80012e6:	2163      	movs	r1, #99	@ 0x63
 80012e8:	0018      	movs	r0, r3
 80012ea:	f7ff f96d 	bl	80005c8 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d009      	beq.n	8001308 <HAL_I2CEx_ConfigAnalogFilter+0x38>
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	2380      	movs	r3, #128	@ 0x80
 80012f8:	015b      	lsls	r3, r3, #5
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d004      	beq.n	8001308 <HAL_I2CEx_ConfigAnalogFilter+0x38>
 80012fe:	4b25      	ldr	r3, [pc, #148]	@ (8001394 <HAL_I2CEx_ConfigAnalogFilter+0xc4>)
 8001300:	2164      	movs	r1, #100	@ 0x64
 8001302:	0018      	movs	r0, r3
 8001304:	f7ff f960 	bl	80005c8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2241      	movs	r2, #65	@ 0x41
 800130c:	5c9b      	ldrb	r3, [r3, r2]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b20      	cmp	r3, #32
 8001312:	d138      	bne.n	8001386 <HAL_I2CEx_ConfigAnalogFilter+0xb6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2240      	movs	r2, #64	@ 0x40
 8001318:	5c9b      	ldrb	r3, [r3, r2]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d101      	bne.n	8001322 <HAL_I2CEx_ConfigAnalogFilter+0x52>
 800131e:	2302      	movs	r3, #2
 8001320:	e032      	b.n	8001388 <HAL_I2CEx_ConfigAnalogFilter+0xb8>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2240      	movs	r2, #64	@ 0x40
 8001326:	2101      	movs	r1, #1
 8001328:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2241      	movs	r2, #65	@ 0x41
 800132e:	2124      	movs	r1, #36	@ 0x24
 8001330:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2101      	movs	r1, #1
 800133e:	438a      	bics	r2, r1
 8001340:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4912      	ldr	r1, [pc, #72]	@ (8001398 <HAL_I2CEx_ConfigAnalogFilter+0xc8>)
 800134e:	400a      	ands	r2, r1
 8001350:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6819      	ldr	r1, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	430a      	orrs	r2, r1
 8001360:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2101      	movs	r1, #1
 800136e:	430a      	orrs	r2, r1
 8001370:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2241      	movs	r2, #65	@ 0x41
 8001376:	2120      	movs	r1, #32
 8001378:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2240      	movs	r2, #64	@ 0x40
 800137e:	2100      	movs	r1, #0
 8001380:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e000      	b.n	8001388 <HAL_I2CEx_ConfigAnalogFilter+0xb8>
  }
  else
  {
    return HAL_BUSY;
 8001386:	2302      	movs	r3, #2
  }
}
 8001388:	0018      	movs	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	b002      	add	sp, #8
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40005400 	.word	0x40005400
 8001394:	08004b18 	.word	0x08004b18
 8001398:	ffffefff 	.word	0xffffefff

0800139c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001454 <HAL_I2CEx_ConfigDigitalFilter+0xb8>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d004      	beq.n	80013ba <HAL_I2CEx_ConfigDigitalFilter+0x1e>
 80013b0:	4b29      	ldr	r3, [pc, #164]	@ (8001458 <HAL_I2CEx_ConfigDigitalFilter+0xbc>)
 80013b2:	2191      	movs	r1, #145	@ 0x91
 80013b4:	0018      	movs	r0, r3
 80013b6:	f7ff f907 	bl	80005c8 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	2b0f      	cmp	r3, #15
 80013be:	d904      	bls.n	80013ca <HAL_I2CEx_ConfigDigitalFilter+0x2e>
 80013c0:	4b25      	ldr	r3, [pc, #148]	@ (8001458 <HAL_I2CEx_ConfigDigitalFilter+0xbc>)
 80013c2:	2192      	movs	r1, #146	@ 0x92
 80013c4:	0018      	movs	r0, r3
 80013c6:	f7ff f8ff 	bl	80005c8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2241      	movs	r2, #65	@ 0x41
 80013ce:	5c9b      	ldrb	r3, [r3, r2]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b20      	cmp	r3, #32
 80013d4:	d139      	bne.n	800144a <HAL_I2CEx_ConfigDigitalFilter+0xae>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2240      	movs	r2, #64	@ 0x40
 80013da:	5c9b      	ldrb	r3, [r3, r2]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d101      	bne.n	80013e4 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e033      	b.n	800144c <HAL_I2CEx_ConfigDigitalFilter+0xb0>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2240      	movs	r2, #64	@ 0x40
 80013e8:	2101      	movs	r1, #1
 80013ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2241      	movs	r2, #65	@ 0x41
 80013f0:	2124      	movs	r1, #36	@ 0x24
 80013f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2101      	movs	r1, #1
 8001400:	438a      	bics	r2, r1
 8001402:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4a13      	ldr	r2, [pc, #76]	@ (800145c <HAL_I2CEx_ConfigDigitalFilter+0xc0>)
 8001410:	4013      	ands	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2101      	movs	r1, #1
 8001432:	430a      	orrs	r2, r1
 8001434:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2241      	movs	r2, #65	@ 0x41
 800143a:	2120      	movs	r1, #32
 800143c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2240      	movs	r2, #64	@ 0x40
 8001442:	2100      	movs	r1, #0
 8001444:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	e000      	b.n	800144c <HAL_I2CEx_ConfigDigitalFilter+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800144a:	2302      	movs	r3, #2
  }
}
 800144c:	0018      	movs	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	b004      	add	sp, #16
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40005400 	.word	0x40005400
 8001458:	08004b18 	.word	0x08004b18
 800145c:	fffff0ff 	.word	0xfffff0ff

08001460 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d102      	bne.n	8001474 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	f000 fc71 	bl	8001d56 <HAL_RCC_OscConfig+0x8f6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d020      	beq.n	80014be <HAL_RCC_OscConfig+0x5e>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2201      	movs	r2, #1
 8001482:	4013      	ands	r3, r2
 8001484:	d11b      	bne.n	80014be <HAL_RCC_OscConfig+0x5e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2202      	movs	r2, #2
 800148c:	4013      	ands	r3, r2
 800148e:	d116      	bne.n	80014be <HAL_RCC_OscConfig+0x5e>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2208      	movs	r2, #8
 8001496:	4013      	ands	r3, r2
 8001498:	d111      	bne.n	80014be <HAL_RCC_OscConfig+0x5e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2204      	movs	r2, #4
 80014a0:	4013      	ands	r3, r2
 80014a2:	d10c      	bne.n	80014be <HAL_RCC_OscConfig+0x5e>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2210      	movs	r2, #16
 80014aa:	4013      	ands	r3, r2
 80014ac:	d107      	bne.n	80014be <HAL_RCC_OscConfig+0x5e>
 80014ae:	2338      	movs	r3, #56	@ 0x38
 80014b0:	33ff      	adds	r3, #255	@ 0xff
 80014b2:	001a      	movs	r2, r3
 80014b4:	4bc1      	ldr	r3, [pc, #772]	@ (80017bc <HAL_RCC_OscConfig+0x35c>)
 80014b6:	0011      	movs	r1, r2
 80014b8:	0018      	movs	r0, r3
 80014ba:	f7ff f885 	bl	80005c8 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2201      	movs	r2, #1
 80014c4:	4013      	ands	r3, r2
 80014c6:	d100      	bne.n	80014ca <HAL_RCC_OscConfig+0x6a>
 80014c8:	e0a4      	b.n	8001614 <HAL_RCC_OscConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00f      	beq.n	80014f2 <HAL_RCC_OscConfig+0x92>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d00b      	beq.n	80014f2 <HAL_RCC_OscConfig+0x92>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d007      	beq.n	80014f2 <HAL_RCC_OscConfig+0x92>
 80014e2:	233e      	movs	r3, #62	@ 0x3e
 80014e4:	33ff      	adds	r3, #255	@ 0xff
 80014e6:	001a      	movs	r2, r3
 80014e8:	4bb4      	ldr	r3, [pc, #720]	@ (80017bc <HAL_RCC_OscConfig+0x35c>)
 80014ea:	0011      	movs	r1, r2
 80014ec:	0018      	movs	r0, r3
 80014ee:	f7ff f86b 	bl	80005c8 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014f2:	4bb3      	ldr	r3, [pc, #716]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	220c      	movs	r2, #12
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	d00e      	beq.n	800151c <HAL_RCC_OscConfig+0xbc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014fe:	4bb0      	ldr	r3, [pc, #704]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	220c      	movs	r2, #12
 8001504:	4013      	ands	r3, r2
 8001506:	2b08      	cmp	r3, #8
 8001508:	d117      	bne.n	800153a <HAL_RCC_OscConfig+0xda>
 800150a:	4bad      	ldr	r3, [pc, #692]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	2380      	movs	r3, #128	@ 0x80
 8001510:	025b      	lsls	r3, r3, #9
 8001512:	401a      	ands	r2, r3
 8001514:	2380      	movs	r3, #128	@ 0x80
 8001516:	025b      	lsls	r3, r3, #9
 8001518:	429a      	cmp	r2, r3
 800151a:	d10e      	bne.n	800153a <HAL_RCC_OscConfig+0xda>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151c:	4ba8      	ldr	r3, [pc, #672]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	2380      	movs	r3, #128	@ 0x80
 8001522:	029b      	lsls	r3, r3, #10
 8001524:	4013      	ands	r3, r2
 8001526:	d100      	bne.n	800152a <HAL_RCC_OscConfig+0xca>
 8001528:	e073      	b.n	8001612 <HAL_RCC_OscConfig+0x1b2>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d000      	beq.n	8001534 <HAL_RCC_OscConfig+0xd4>
 8001532:	e06e      	b.n	8001612 <HAL_RCC_OscConfig+0x1b2>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	f000 fc0e 	bl	8001d56 <HAL_RCC_OscConfig+0x8f6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d107      	bne.n	8001552 <HAL_RCC_OscConfig+0xf2>
 8001542:	4b9f      	ldr	r3, [pc, #636]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4b9e      	ldr	r3, [pc, #632]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 8001548:	2180      	movs	r1, #128	@ 0x80
 800154a:	0249      	lsls	r1, r1, #9
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	e02f      	b.n	80015b2 <HAL_RCC_OscConfig+0x152>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10c      	bne.n	8001574 <HAL_RCC_OscConfig+0x114>
 800155a:	4b99      	ldr	r3, [pc, #612]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	4b98      	ldr	r3, [pc, #608]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 8001560:	4998      	ldr	r1, [pc, #608]	@ (80017c4 <HAL_RCC_OscConfig+0x364>)
 8001562:	400a      	ands	r2, r1
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	4b96      	ldr	r3, [pc, #600]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	4b95      	ldr	r3, [pc, #596]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 800156c:	4996      	ldr	r1, [pc, #600]	@ (80017c8 <HAL_RCC_OscConfig+0x368>)
 800156e:	400a      	ands	r2, r1
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	e01e      	b.n	80015b2 <HAL_RCC_OscConfig+0x152>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b05      	cmp	r3, #5
 800157a:	d10e      	bne.n	800159a <HAL_RCC_OscConfig+0x13a>
 800157c:	4b90      	ldr	r3, [pc, #576]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b8f      	ldr	r3, [pc, #572]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 8001582:	2180      	movs	r1, #128	@ 0x80
 8001584:	02c9      	lsls	r1, r1, #11
 8001586:	430a      	orrs	r2, r1
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	4b8d      	ldr	r3, [pc, #564]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4b8c      	ldr	r3, [pc, #560]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 8001590:	2180      	movs	r1, #128	@ 0x80
 8001592:	0249      	lsls	r1, r1, #9
 8001594:	430a      	orrs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	e00b      	b.n	80015b2 <HAL_RCC_OscConfig+0x152>
 800159a:	4b89      	ldr	r3, [pc, #548]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	4b88      	ldr	r3, [pc, #544]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 80015a0:	4988      	ldr	r1, [pc, #544]	@ (80017c4 <HAL_RCC_OscConfig+0x364>)
 80015a2:	400a      	ands	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	4b86      	ldr	r3, [pc, #536]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	4b85      	ldr	r3, [pc, #532]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 80015ac:	4986      	ldr	r1, [pc, #536]	@ (80017c8 <HAL_RCC_OscConfig+0x368>)
 80015ae:	400a      	ands	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d015      	beq.n	80015e6 <HAL_RCC_OscConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff f9b9 	bl	8000930 <HAL_GetTick>
 80015be:	0003      	movs	r3, r0
 80015c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c2:	e009      	b.n	80015d8 <HAL_RCC_OscConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c4:	f7ff f9b4 	bl	8000930 <HAL_GetTick>
 80015c8:	0002      	movs	r2, r0
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b64      	cmp	r3, #100	@ 0x64
 80015d0:	d902      	bls.n	80015d8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	f000 fbbf 	bl	8001d56 <HAL_RCC_OscConfig+0x8f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d8:	4b79      	ldr	r3, [pc, #484]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	@ 0x80
 80015de:	029b      	lsls	r3, r3, #10
 80015e0:	4013      	ands	r3, r2
 80015e2:	d0ef      	beq.n	80015c4 <HAL_RCC_OscConfig+0x164>
 80015e4:	e016      	b.n	8001614 <HAL_RCC_OscConfig+0x1b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff f9a3 	bl	8000930 <HAL_GetTick>
 80015ea:	0003      	movs	r3, r0
 80015ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ee:	e009      	b.n	8001604 <HAL_RCC_OscConfig+0x1a4>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff f99e 	bl	8000930 <HAL_GetTick>
 80015f4:	0002      	movs	r2, r0
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	@ 0x64
 80015fc:	d902      	bls.n	8001604 <HAL_RCC_OscConfig+0x1a4>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	f000 fba9 	bl	8001d56 <HAL_RCC_OscConfig+0x8f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001604:	4b6e      	ldr	r3, [pc, #440]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	2380      	movs	r3, #128	@ 0x80
 800160a:	029b      	lsls	r3, r3, #10
 800160c:	4013      	ands	r3, r2
 800160e:	d1ef      	bne.n	80015f0 <HAL_RCC_OscConfig+0x190>
 8001610:	e000      	b.n	8001614 <HAL_RCC_OscConfig+0x1b4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001612:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2202      	movs	r2, #2
 800161a:	4013      	ands	r3, r2
 800161c:	d100      	bne.n	8001620 <HAL_RCC_OscConfig+0x1c0>
 800161e:	e086      	b.n	800172e <HAL_RCC_OscConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00b      	beq.n	8001640 <HAL_RCC_OscConfig+0x1e0>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d007      	beq.n	8001640 <HAL_RCC_OscConfig+0x1e0>
 8001630:	2372      	movs	r3, #114	@ 0x72
 8001632:	33ff      	adds	r3, #255	@ 0xff
 8001634:	001a      	movs	r2, r3
 8001636:	4b61      	ldr	r3, [pc, #388]	@ (80017bc <HAL_RCC_OscConfig+0x35c>)
 8001638:	0011      	movs	r1, r2
 800163a:	0018      	movs	r0, r3
 800163c:	f7fe ffc4 	bl	80005c8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	2b1f      	cmp	r3, #31
 8001646:	d906      	bls.n	8001656 <HAL_RCC_OscConfig+0x1f6>
 8001648:	23b9      	movs	r3, #185	@ 0xb9
 800164a:	005a      	lsls	r2, r3, #1
 800164c:	4b5b      	ldr	r3, [pc, #364]	@ (80017bc <HAL_RCC_OscConfig+0x35c>)
 800164e:	0011      	movs	r1, r2
 8001650:	0018      	movs	r0, r3
 8001652:	f7fe ffb9 	bl	80005c8 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001656:	4b5a      	ldr	r3, [pc, #360]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	220c      	movs	r2, #12
 800165c:	4013      	ands	r3, r2
 800165e:	d00b      	beq.n	8001678 <HAL_RCC_OscConfig+0x218>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001660:	4b57      	ldr	r3, [pc, #348]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	220c      	movs	r2, #12
 8001666:	4013      	ands	r3, r2
 8001668:	2b08      	cmp	r3, #8
 800166a:	d11d      	bne.n	80016a8 <HAL_RCC_OscConfig+0x248>
 800166c:	4b54      	ldr	r3, [pc, #336]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	2380      	movs	r3, #128	@ 0x80
 8001672:	025b      	lsls	r3, r3, #9
 8001674:	4013      	ands	r3, r2
 8001676:	d117      	bne.n	80016a8 <HAL_RCC_OscConfig+0x248>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001678:	4b51      	ldr	r3, [pc, #324]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2202      	movs	r2, #2
 800167e:	4013      	ands	r3, r2
 8001680:	d006      	beq.n	8001690 <HAL_RCC_OscConfig+0x230>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d002      	beq.n	8001690 <HAL_RCC_OscConfig+0x230>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	f000 fb63 	bl	8001d56 <HAL_RCC_OscConfig+0x8f6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001690:	4b4b      	ldr	r3, [pc, #300]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	22f8      	movs	r2, #248	@ 0xf8
 8001696:	4393      	bics	r3, r2
 8001698:	0019      	movs	r1, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	00da      	lsls	r2, r3, #3
 80016a0:	4b47      	ldr	r3, [pc, #284]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 80016a2:	430a      	orrs	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a6:	e042      	b.n	800172e <HAL_RCC_OscConfig+0x2ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d025      	beq.n	80016fc <HAL_RCC_OscConfig+0x29c>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b0:	4b43      	ldr	r3, [pc, #268]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b42      	ldr	r3, [pc, #264]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 80016b6:	2101      	movs	r1, #1
 80016b8:	430a      	orrs	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff f938 	bl	8000930 <HAL_GetTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c4:	e009      	b.n	80016da <HAL_RCC_OscConfig+0x27a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c6:	f7ff f933 	bl	8000930 <HAL_GetTick>
 80016ca:	0002      	movs	r2, r0
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d902      	bls.n	80016da <HAL_RCC_OscConfig+0x27a>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	f000 fb3e 	bl	8001d56 <HAL_RCC_OscConfig+0x8f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016da:	4b39      	ldr	r3, [pc, #228]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2202      	movs	r2, #2
 80016e0:	4013      	ands	r3, r2
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x266>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e4:	4b36      	ldr	r3, [pc, #216]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	22f8      	movs	r2, #248	@ 0xf8
 80016ea:	4393      	bics	r3, r2
 80016ec:	0019      	movs	r1, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	00da      	lsls	r2, r3, #3
 80016f4:	4b32      	ldr	r3, [pc, #200]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 80016f6:	430a      	orrs	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	e018      	b.n	800172e <HAL_RCC_OscConfig+0x2ce>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016fc:	4b30      	ldr	r3, [pc, #192]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b2f      	ldr	r3, [pc, #188]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 8001702:	2101      	movs	r1, #1
 8001704:	438a      	bics	r2, r1
 8001706:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff f912 	bl	8000930 <HAL_GetTick>
 800170c:	0003      	movs	r3, r0
 800170e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x2c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001712:	f7ff f90d 	bl	8000930 <HAL_GetTick>
 8001716:	0002      	movs	r2, r0
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x2c4>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e318      	b.n	8001d56 <HAL_RCC_OscConfig+0x8f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001724:	4b26      	ldr	r3, [pc, #152]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2202      	movs	r2, #2
 800172a:	4013      	ands	r3, r2
 800172c:	d1f1      	bne.n	8001712 <HAL_RCC_OscConfig+0x2b2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2208      	movs	r2, #8
 8001734:	4013      	ands	r3, r2
 8001736:	d04e      	beq.n	80017d6 <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00a      	beq.n	8001756 <HAL_RCC_OscConfig+0x2f6>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d006      	beq.n	8001756 <HAL_RCC_OscConfig+0x2f6>
 8001748:	23d9      	movs	r3, #217	@ 0xd9
 800174a:	005a      	lsls	r2, r3, #1
 800174c:	4b1b      	ldr	r3, [pc, #108]	@ (80017bc <HAL_RCC_OscConfig+0x35c>)
 800174e:	0011      	movs	r1, r2
 8001750:	0018      	movs	r0, r3
 8001752:	f7fe ff39 	bl	80005c8 <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d019      	beq.n	8001792 <HAL_RCC_OscConfig+0x332>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800175e:	4b18      	ldr	r3, [pc, #96]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 8001760:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001762:	4b17      	ldr	r3, [pc, #92]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 8001764:	2101      	movs	r1, #1
 8001766:	430a      	orrs	r2, r1
 8001768:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176a:	f7ff f8e1 	bl	8000930 <HAL_GetTick>
 800176e:	0003      	movs	r3, r0
 8001770:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001774:	f7ff f8dc 	bl	8000930 <HAL_GetTick>
 8001778:	0002      	movs	r2, r0
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e2e7      	b.n	8001d56 <HAL_RCC_OscConfig+0x8f6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001786:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 8001788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178a:	2202      	movs	r2, #2
 800178c:	4013      	ands	r3, r2
 800178e:	d0f1      	beq.n	8001774 <HAL_RCC_OscConfig+0x314>
 8001790:	e021      	b.n	80017d6 <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001792:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 8001794:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001796:	4b0a      	ldr	r3, [pc, #40]	@ (80017c0 <HAL_RCC_OscConfig+0x360>)
 8001798:	2101      	movs	r1, #1
 800179a:	438a      	bics	r2, r1
 800179c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179e:	f7ff f8c7 	bl	8000930 <HAL_GetTick>
 80017a2:	0003      	movs	r3, r0
 80017a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a6:	e011      	b.n	80017cc <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a8:	f7ff f8c2 	bl	8000930 <HAL_GetTick>
 80017ac:	0002      	movs	r2, r0
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d90a      	bls.n	80017cc <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e2cd      	b.n	8001d56 <HAL_RCC_OscConfig+0x8f6>
 80017ba:	46c0      	nop			@ (mov r8, r8)
 80017bc:	08004b88 	.word	0x08004b88
 80017c0:	40021000 	.word	0x40021000
 80017c4:	fffeffff 	.word	0xfffeffff
 80017c8:	fffbffff 	.word	0xfffbffff
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017cc:	4ba6      	ldr	r3, [pc, #664]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 80017ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d0:	2202      	movs	r2, #2
 80017d2:	4013      	ands	r3, r2
 80017d4:	d1e8      	bne.n	80017a8 <HAL_RCC_OscConfig+0x348>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2204      	movs	r2, #4
 80017dc:	4013      	ands	r3, r2
 80017de:	d100      	bne.n	80017e2 <HAL_RCC_OscConfig+0x382>
 80017e0:	e0c0      	b.n	8001964 <HAL_RCC_OscConfig+0x504>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e2:	231f      	movs	r3, #31
 80017e4:	18fb      	adds	r3, r7, r3
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00e      	beq.n	8001810 <HAL_RCC_OscConfig+0x3b0>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d00a      	beq.n	8001810 <HAL_RCC_OscConfig+0x3b0>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b05      	cmp	r3, #5
 8001800:	d006      	beq.n	8001810 <HAL_RCC_OscConfig+0x3b0>
 8001802:	23ef      	movs	r3, #239	@ 0xef
 8001804:	005a      	lsls	r2, r3, #1
 8001806:	4b99      	ldr	r3, [pc, #612]	@ (8001a6c <HAL_RCC_OscConfig+0x60c>)
 8001808:	0011      	movs	r1, r2
 800180a:	0018      	movs	r0, r3
 800180c:	f7fe fedc 	bl	80005c8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001810:	4b95      	ldr	r3, [pc, #596]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 8001812:	69da      	ldr	r2, [r3, #28]
 8001814:	2380      	movs	r3, #128	@ 0x80
 8001816:	055b      	lsls	r3, r3, #21
 8001818:	4013      	ands	r3, r2
 800181a:	d111      	bne.n	8001840 <HAL_RCC_OscConfig+0x3e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800181c:	4b92      	ldr	r3, [pc, #584]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 800181e:	69da      	ldr	r2, [r3, #28]
 8001820:	4b91      	ldr	r3, [pc, #580]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 8001822:	2180      	movs	r1, #128	@ 0x80
 8001824:	0549      	lsls	r1, r1, #21
 8001826:	430a      	orrs	r2, r1
 8001828:	61da      	str	r2, [r3, #28]
 800182a:	4b8f      	ldr	r3, [pc, #572]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 800182c:	69da      	ldr	r2, [r3, #28]
 800182e:	2380      	movs	r3, #128	@ 0x80
 8001830:	055b      	lsls	r3, r3, #21
 8001832:	4013      	ands	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001838:	231f      	movs	r3, #31
 800183a:	18fb      	adds	r3, r7, r3
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001840:	4b8b      	ldr	r3, [pc, #556]	@ (8001a70 <HAL_RCC_OscConfig+0x610>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	2380      	movs	r3, #128	@ 0x80
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4013      	ands	r3, r2
 800184a:	d11a      	bne.n	8001882 <HAL_RCC_OscConfig+0x422>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800184c:	4b88      	ldr	r3, [pc, #544]	@ (8001a70 <HAL_RCC_OscConfig+0x610>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b87      	ldr	r3, [pc, #540]	@ (8001a70 <HAL_RCC_OscConfig+0x610>)
 8001852:	2180      	movs	r1, #128	@ 0x80
 8001854:	0049      	lsls	r1, r1, #1
 8001856:	430a      	orrs	r2, r1
 8001858:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185a:	f7ff f869 	bl	8000930 <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001864:	f7ff f864 	bl	8000930 <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b64      	cmp	r3, #100	@ 0x64
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e26f      	b.n	8001d56 <HAL_RCC_OscConfig+0x8f6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001876:	4b7e      	ldr	r3, [pc, #504]	@ (8001a70 <HAL_RCC_OscConfig+0x610>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	@ 0x80
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4013      	ands	r3, r2
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d106      	bne.n	8001898 <HAL_RCC_OscConfig+0x438>
 800188a:	4b77      	ldr	r3, [pc, #476]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 800188c:	6a1a      	ldr	r2, [r3, #32]
 800188e:	4b76      	ldr	r3, [pc, #472]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 8001890:	2101      	movs	r1, #1
 8001892:	430a      	orrs	r2, r1
 8001894:	621a      	str	r2, [r3, #32]
 8001896:	e02d      	b.n	80018f4 <HAL_RCC_OscConfig+0x494>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10c      	bne.n	80018ba <HAL_RCC_OscConfig+0x45a>
 80018a0:	4b71      	ldr	r3, [pc, #452]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 80018a2:	6a1a      	ldr	r2, [r3, #32]
 80018a4:	4b70      	ldr	r3, [pc, #448]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 80018a6:	2101      	movs	r1, #1
 80018a8:	438a      	bics	r2, r1
 80018aa:	621a      	str	r2, [r3, #32]
 80018ac:	4b6e      	ldr	r3, [pc, #440]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 80018ae:	6a1a      	ldr	r2, [r3, #32]
 80018b0:	4b6d      	ldr	r3, [pc, #436]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 80018b2:	2104      	movs	r1, #4
 80018b4:	438a      	bics	r2, r1
 80018b6:	621a      	str	r2, [r3, #32]
 80018b8:	e01c      	b.n	80018f4 <HAL_RCC_OscConfig+0x494>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b05      	cmp	r3, #5
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0x47c>
 80018c2:	4b69      	ldr	r3, [pc, #420]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 80018c4:	6a1a      	ldr	r2, [r3, #32]
 80018c6:	4b68      	ldr	r3, [pc, #416]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 80018c8:	2104      	movs	r1, #4
 80018ca:	430a      	orrs	r2, r1
 80018cc:	621a      	str	r2, [r3, #32]
 80018ce:	4b66      	ldr	r3, [pc, #408]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 80018d0:	6a1a      	ldr	r2, [r3, #32]
 80018d2:	4b65      	ldr	r3, [pc, #404]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 80018d4:	2101      	movs	r1, #1
 80018d6:	430a      	orrs	r2, r1
 80018d8:	621a      	str	r2, [r3, #32]
 80018da:	e00b      	b.n	80018f4 <HAL_RCC_OscConfig+0x494>
 80018dc:	4b62      	ldr	r3, [pc, #392]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 80018de:	6a1a      	ldr	r2, [r3, #32]
 80018e0:	4b61      	ldr	r3, [pc, #388]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 80018e2:	2101      	movs	r1, #1
 80018e4:	438a      	bics	r2, r1
 80018e6:	621a      	str	r2, [r3, #32]
 80018e8:	4b5f      	ldr	r3, [pc, #380]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 80018ea:	6a1a      	ldr	r2, [r3, #32]
 80018ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 80018ee:	2104      	movs	r1, #4
 80018f0:	438a      	bics	r2, r1
 80018f2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d014      	beq.n	8001926 <HAL_RCC_OscConfig+0x4c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fc:	f7ff f818 	bl	8000930 <HAL_GetTick>
 8001900:	0003      	movs	r3, r0
 8001902:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001904:	e009      	b.n	800191a <HAL_RCC_OscConfig+0x4ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001906:	f7ff f813 	bl	8000930 <HAL_GetTick>
 800190a:	0002      	movs	r2, r0
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	4a58      	ldr	r2, [pc, #352]	@ (8001a74 <HAL_RCC_OscConfig+0x614>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e21d      	b.n	8001d56 <HAL_RCC_OscConfig+0x8f6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191a:	4b53      	ldr	r3, [pc, #332]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	2202      	movs	r2, #2
 8001920:	4013      	ands	r3, r2
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x4a6>
 8001924:	e013      	b.n	800194e <HAL_RCC_OscConfig+0x4ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001926:	f7ff f803 	bl	8000930 <HAL_GetTick>
 800192a:	0003      	movs	r3, r0
 800192c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192e:	e009      	b.n	8001944 <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001930:	f7fe fffe 	bl	8000930 <HAL_GetTick>
 8001934:	0002      	movs	r2, r0
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	4a4e      	ldr	r2, [pc, #312]	@ (8001a74 <HAL_RCC_OscConfig+0x614>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e208      	b.n	8001d56 <HAL_RCC_OscConfig+0x8f6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001944:	4b48      	ldr	r3, [pc, #288]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	2202      	movs	r2, #2
 800194a:	4013      	ands	r3, r2
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800194e:	231f      	movs	r3, #31
 8001950:	18fb      	adds	r3, r7, r3
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d105      	bne.n	8001964 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001958:	4b43      	ldr	r3, [pc, #268]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 800195a:	69da      	ldr	r2, [r3, #28]
 800195c:	4b42      	ldr	r3, [pc, #264]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 800195e:	4946      	ldr	r1, [pc, #280]	@ (8001a78 <HAL_RCC_OscConfig+0x618>)
 8001960:	400a      	ands	r2, r1
 8001962:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2210      	movs	r2, #16
 800196a:	4013      	ands	r3, r2
 800196c:	d100      	bne.n	8001970 <HAL_RCC_OscConfig+0x510>
 800196e:	e08c      	b.n	8001a8a <HAL_RCC_OscConfig+0x62a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00e      	beq.n	8001996 <HAL_RCC_OscConfig+0x536>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d00a      	beq.n	8001996 <HAL_RCC_OscConfig+0x536>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	3305      	adds	r3, #5
 8001986:	d006      	beq.n	8001996 <HAL_RCC_OscConfig+0x536>
 8001988:	2389      	movs	r3, #137	@ 0x89
 800198a:	009a      	lsls	r2, r3, #2
 800198c:	4b37      	ldr	r3, [pc, #220]	@ (8001a6c <HAL_RCC_OscConfig+0x60c>)
 800198e:	0011      	movs	r1, r2
 8001990:	0018      	movs	r0, r3
 8001992:	f7fe fe19 	bl	80005c8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2b1f      	cmp	r3, #31
 800199c:	d905      	bls.n	80019aa <HAL_RCC_OscConfig+0x54a>
 800199e:	4a37      	ldr	r2, [pc, #220]	@ (8001a7c <HAL_RCC_OscConfig+0x61c>)
 80019a0:	4b32      	ldr	r3, [pc, #200]	@ (8001a6c <HAL_RCC_OscConfig+0x60c>)
 80019a2:	0011      	movs	r1, r2
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7fe fe0f 	bl	80005c8 <assert_failed>

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d12a      	bne.n	8001a08 <HAL_RCC_OscConfig+0x5a8>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 80019b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 80019b8:	2104      	movs	r1, #4
 80019ba:	430a      	orrs	r2, r1
 80019bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80019be:	4b2a      	ldr	r3, [pc, #168]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 80019c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019c2:	4b29      	ldr	r3, [pc, #164]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 80019c4:	2101      	movs	r1, #1
 80019c6:	430a      	orrs	r2, r1
 80019c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ca:	f7fe ffb1 	bl	8000930 <HAL_GetTick>
 80019ce:	0003      	movs	r3, r0
 80019d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019d4:	f7fe ffac 	bl	8000930 <HAL_GetTick>
 80019d8:	0002      	movs	r2, r0
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e1b7      	b.n	8001d56 <HAL_RCC_OscConfig+0x8f6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019e6:	4b20      	ldr	r3, [pc, #128]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 80019e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ea:	2202      	movs	r2, #2
 80019ec:	4013      	ands	r3, r2
 80019ee:	d0f1      	beq.n	80019d4 <HAL_RCC_OscConfig+0x574>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 80019f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019f4:	22f8      	movs	r2, #248	@ 0xf8
 80019f6:	4393      	bics	r3, r2
 80019f8:	0019      	movs	r1, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	00da      	lsls	r2, r3, #3
 8001a00:	4b19      	ldr	r3, [pc, #100]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 8001a02:	430a      	orrs	r2, r1
 8001a04:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a06:	e040      	b.n	8001a8a <HAL_RCC_OscConfig+0x62a>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	3305      	adds	r3, #5
 8001a0e:	d111      	bne.n	8001a34 <HAL_RCC_OscConfig+0x5d4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001a10:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 8001a12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a14:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 8001a16:	2104      	movs	r1, #4
 8001a18:	438a      	bics	r2, r1
 8001a1a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a1c:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 8001a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a20:	22f8      	movs	r2, #248	@ 0xf8
 8001a22:	4393      	bics	r3, r2
 8001a24:	0019      	movs	r1, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	00da      	lsls	r2, r3, #3
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a32:	e02a      	b.n	8001a8a <HAL_RCC_OscConfig+0x62a>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a34:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 8001a36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a38:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 8001a3a:	2104      	movs	r1, #4
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a40:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 8001a42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a44:	4b08      	ldr	r3, [pc, #32]	@ (8001a68 <HAL_RCC_OscConfig+0x608>)
 8001a46:	2101      	movs	r1, #1
 8001a48:	438a      	bics	r2, r1
 8001a4a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4c:	f7fe ff70 	bl	8000930 <HAL_GetTick>
 8001a50:	0003      	movs	r3, r0
 8001a52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a54:	e014      	b.n	8001a80 <HAL_RCC_OscConfig+0x620>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a56:	f7fe ff6b 	bl	8000930 <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d90d      	bls.n	8001a80 <HAL_RCC_OscConfig+0x620>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e176      	b.n	8001d56 <HAL_RCC_OscConfig+0x8f6>
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	08004b88 	.word	0x08004b88
 8001a70:	40007000 	.word	0x40007000
 8001a74:	00001388 	.word	0x00001388
 8001a78:	efffffff 	.word	0xefffffff
 8001a7c:	00000225 	.word	0x00000225
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a80:	4bb7      	ldr	r3, [pc, #732]	@ (8001d60 <HAL_RCC_OscConfig+0x900>)
 8001a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a84:	2202      	movs	r2, #2
 8001a86:	4013      	ands	r3, r2
 8001a88:	d1e5      	bne.n	8001a56 <HAL_RCC_OscConfig+0x5f6>
  }
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00e      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x650>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d00a      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x650>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d006      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x650>
 8001aa2:	23a6      	movs	r3, #166	@ 0xa6
 8001aa4:	009a      	lsls	r2, r3, #2
 8001aa6:	4baf      	ldr	r3, [pc, #700]	@ (8001d64 <HAL_RCC_OscConfig+0x904>)
 8001aa8:	0011      	movs	r1, r2
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f7fe fd8c 	bl	80005c8 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d100      	bne.n	8001aba <HAL_RCC_OscConfig+0x65a>
 8001ab8:	e14c      	b.n	8001d54 <HAL_RCC_OscConfig+0x8f4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aba:	4ba9      	ldr	r3, [pc, #676]	@ (8001d60 <HAL_RCC_OscConfig+0x900>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	220c      	movs	r2, #12
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d100      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x668>
 8001ac6:	e120      	b.n	8001d0a <HAL_RCC_OscConfig+0x8aa>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d000      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x672>
 8001ad0:	e100      	b.n	8001cd4 <HAL_RCC_OscConfig+0x874>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00b      	beq.n	8001af2 <HAL_RCC_OscConfig+0x692>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ade:	2380      	movs	r3, #128	@ 0x80
 8001ae0:	025b      	lsls	r3, r3, #9
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d005      	beq.n	8001af2 <HAL_RCC_OscConfig+0x692>
 8001ae6:	4aa0      	ldr	r2, [pc, #640]	@ (8001d68 <HAL_RCC_OscConfig+0x908>)
 8001ae8:	4b9e      	ldr	r3, [pc, #632]	@ (8001d64 <HAL_RCC_OscConfig+0x904>)
 8001aea:	0011      	movs	r1, r2
 8001aec:	0018      	movs	r0, r3
 8001aee:	f7fe fd6b 	bl	80005c8 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d059      	beq.n	8001bae <HAL_RCC_OscConfig+0x74e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001afe:	2380      	movs	r3, #128	@ 0x80
 8001b00:	02db      	lsls	r3, r3, #11
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d053      	beq.n	8001bae <HAL_RCC_OscConfig+0x74e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b0a:	2380      	movs	r3, #128	@ 0x80
 8001b0c:	031b      	lsls	r3, r3, #12
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d04d      	beq.n	8001bae <HAL_RCC_OscConfig+0x74e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b16:	23c0      	movs	r3, #192	@ 0xc0
 8001b18:	031b      	lsls	r3, r3, #12
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d047      	beq.n	8001bae <HAL_RCC_OscConfig+0x74e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b22:	2380      	movs	r3, #128	@ 0x80
 8001b24:	035b      	lsls	r3, r3, #13
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d041      	beq.n	8001bae <HAL_RCC_OscConfig+0x74e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b2e:	23a0      	movs	r3, #160	@ 0xa0
 8001b30:	035b      	lsls	r3, r3, #13
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d03b      	beq.n	8001bae <HAL_RCC_OscConfig+0x74e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b3a:	23c0      	movs	r3, #192	@ 0xc0
 8001b3c:	035b      	lsls	r3, r3, #13
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d035      	beq.n	8001bae <HAL_RCC_OscConfig+0x74e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b46:	23e0      	movs	r3, #224	@ 0xe0
 8001b48:	035b      	lsls	r3, r3, #13
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d02f      	beq.n	8001bae <HAL_RCC_OscConfig+0x74e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b52:	2380      	movs	r3, #128	@ 0x80
 8001b54:	039b      	lsls	r3, r3, #14
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d029      	beq.n	8001bae <HAL_RCC_OscConfig+0x74e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b5e:	2390      	movs	r3, #144	@ 0x90
 8001b60:	039b      	lsls	r3, r3, #14
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d023      	beq.n	8001bae <HAL_RCC_OscConfig+0x74e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b6a:	23a0      	movs	r3, #160	@ 0xa0
 8001b6c:	039b      	lsls	r3, r3, #14
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d01d      	beq.n	8001bae <HAL_RCC_OscConfig+0x74e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b76:	23b0      	movs	r3, #176	@ 0xb0
 8001b78:	039b      	lsls	r3, r3, #14
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d017      	beq.n	8001bae <HAL_RCC_OscConfig+0x74e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b82:	23c0      	movs	r3, #192	@ 0xc0
 8001b84:	039b      	lsls	r3, r3, #14
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d011      	beq.n	8001bae <HAL_RCC_OscConfig+0x74e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b8e:	23d0      	movs	r3, #208	@ 0xd0
 8001b90:	039b      	lsls	r3, r3, #14
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d00b      	beq.n	8001bae <HAL_RCC_OscConfig+0x74e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b9a:	23e0      	movs	r3, #224	@ 0xe0
 8001b9c:	039b      	lsls	r3, r3, #14
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d005      	beq.n	8001bae <HAL_RCC_OscConfig+0x74e>
 8001ba2:	4a72      	ldr	r2, [pc, #456]	@ (8001d6c <HAL_RCC_OscConfig+0x90c>)
 8001ba4:	4b6f      	ldr	r3, [pc, #444]	@ (8001d64 <HAL_RCC_OscConfig+0x904>)
 8001ba6:	0011      	movs	r1, r2
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f7fe fd0d 	bl	80005c8 <assert_failed>
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d041      	beq.n	8001c3a <HAL_RCC_OscConfig+0x7da>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d03d      	beq.n	8001c3a <HAL_RCC_OscConfig+0x7da>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d039      	beq.n	8001c3a <HAL_RCC_OscConfig+0x7da>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d035      	beq.n	8001c3a <HAL_RCC_OscConfig+0x7da>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d031      	beq.n	8001c3a <HAL_RCC_OscConfig+0x7da>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bda:	2b05      	cmp	r3, #5
 8001bdc:	d02d      	beq.n	8001c3a <HAL_RCC_OscConfig+0x7da>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d029      	beq.n	8001c3a <HAL_RCC_OscConfig+0x7da>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bea:	2b07      	cmp	r3, #7
 8001bec:	d025      	beq.n	8001c3a <HAL_RCC_OscConfig+0x7da>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d021      	beq.n	8001c3a <HAL_RCC_OscConfig+0x7da>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bfa:	2b09      	cmp	r3, #9
 8001bfc:	d01d      	beq.n	8001c3a <HAL_RCC_OscConfig+0x7da>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c02:	2b0a      	cmp	r3, #10
 8001c04:	d019      	beq.n	8001c3a <HAL_RCC_OscConfig+0x7da>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0a:	2b0b      	cmp	r3, #11
 8001c0c:	d015      	beq.n	8001c3a <HAL_RCC_OscConfig+0x7da>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c12:	2b0c      	cmp	r3, #12
 8001c14:	d011      	beq.n	8001c3a <HAL_RCC_OscConfig+0x7da>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1a:	2b0d      	cmp	r3, #13
 8001c1c:	d00d      	beq.n	8001c3a <HAL_RCC_OscConfig+0x7da>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c22:	2b0e      	cmp	r3, #14
 8001c24:	d009      	beq.n	8001c3a <HAL_RCC_OscConfig+0x7da>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2a:	2b0f      	cmp	r3, #15
 8001c2c:	d005      	beq.n	8001c3a <HAL_RCC_OscConfig+0x7da>
 8001c2e:	4a50      	ldr	r2, [pc, #320]	@ (8001d70 <HAL_RCC_OscConfig+0x910>)
 8001c30:	4b4c      	ldr	r3, [pc, #304]	@ (8001d64 <HAL_RCC_OscConfig+0x904>)
 8001c32:	0011      	movs	r1, r2
 8001c34:	0018      	movs	r0, r3
 8001c36:	f7fe fcc7 	bl	80005c8 <assert_failed>
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3a:	4b49      	ldr	r3, [pc, #292]	@ (8001d60 <HAL_RCC_OscConfig+0x900>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4b48      	ldr	r3, [pc, #288]	@ (8001d60 <HAL_RCC_OscConfig+0x900>)
 8001c40:	494c      	ldr	r1, [pc, #304]	@ (8001d74 <HAL_RCC_OscConfig+0x914>)
 8001c42:	400a      	ands	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c46:	f7fe fe73 	bl	8000930 <HAL_GetTick>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x802>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c50:	f7fe fe6e 	bl	8000930 <HAL_GetTick>
 8001c54:	0002      	movs	r2, r0
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e079      	b.n	8001d56 <HAL_RCC_OscConfig+0x8f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c62:	4b3f      	ldr	r3, [pc, #252]	@ (8001d60 <HAL_RCC_OscConfig+0x900>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	2380      	movs	r3, #128	@ 0x80
 8001c68:	049b      	lsls	r3, r3, #18
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x7f0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d60 <HAL_RCC_OscConfig+0x900>)
 8001c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c72:	220f      	movs	r2, #15
 8001c74:	4393      	bics	r3, r2
 8001c76:	0019      	movs	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c7c:	4b38      	ldr	r3, [pc, #224]	@ (8001d60 <HAL_RCC_OscConfig+0x900>)
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c82:	4b37      	ldr	r3, [pc, #220]	@ (8001d60 <HAL_RCC_OscConfig+0x900>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	4a3c      	ldr	r2, [pc, #240]	@ (8001d78 <HAL_RCC_OscConfig+0x918>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	0019      	movs	r1, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c94:	431a      	orrs	r2, r3
 8001c96:	4b32      	ldr	r3, [pc, #200]	@ (8001d60 <HAL_RCC_OscConfig+0x900>)
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c9c:	4b30      	ldr	r3, [pc, #192]	@ (8001d60 <HAL_RCC_OscConfig+0x900>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b2f      	ldr	r3, [pc, #188]	@ (8001d60 <HAL_RCC_OscConfig+0x900>)
 8001ca2:	2180      	movs	r1, #128	@ 0x80
 8001ca4:	0449      	lsls	r1, r1, #17
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7fe fe41 	bl	8000930 <HAL_GetTick>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x866>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb4:	f7fe fe3c 	bl	8000930 <HAL_GetTick>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e047      	b.n	8001d56 <HAL_RCC_OscConfig+0x8f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc6:	4b26      	ldr	r3, [pc, #152]	@ (8001d60 <HAL_RCC_OscConfig+0x900>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	2380      	movs	r3, #128	@ 0x80
 8001ccc:	049b      	lsls	r3, r3, #18
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x854>
 8001cd2:	e03f      	b.n	8001d54 <HAL_RCC_OscConfig+0x8f4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd4:	4b22      	ldr	r3, [pc, #136]	@ (8001d60 <HAL_RCC_OscConfig+0x900>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b21      	ldr	r3, [pc, #132]	@ (8001d60 <HAL_RCC_OscConfig+0x900>)
 8001cda:	4926      	ldr	r1, [pc, #152]	@ (8001d74 <HAL_RCC_OscConfig+0x914>)
 8001cdc:	400a      	ands	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7fe fe26 	bl	8000930 <HAL_GetTick>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x89c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cea:	f7fe fe21 	bl	8000930 <HAL_GetTick>
 8001cee:	0002      	movs	r2, r0
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x89c>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e02c      	b.n	8001d56 <HAL_RCC_OscConfig+0x8f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfc:	4b18      	ldr	r3, [pc, #96]	@ (8001d60 <HAL_RCC_OscConfig+0x900>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	2380      	movs	r3, #128	@ 0x80
 8001d02:	049b      	lsls	r3, r3, #18
 8001d04:	4013      	ands	r3, r2
 8001d06:	d1f0      	bne.n	8001cea <HAL_RCC_OscConfig+0x88a>
 8001d08:	e024      	b.n	8001d54 <HAL_RCC_OscConfig+0x8f4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_RCC_OscConfig+0x8b6>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e01f      	b.n	8001d56 <HAL_RCC_OscConfig+0x8f6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001d16:	4b12      	ldr	r3, [pc, #72]	@ (8001d60 <HAL_RCC_OscConfig+0x900>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001d1c:	4b10      	ldr	r3, [pc, #64]	@ (8001d60 <HAL_RCC_OscConfig+0x900>)
 8001d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d20:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	2380      	movs	r3, #128	@ 0x80
 8001d26:	025b      	lsls	r3, r3, #9
 8001d28:	401a      	ands	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d10e      	bne.n	8001d50 <HAL_RCC_OscConfig+0x8f0>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	220f      	movs	r2, #15
 8001d36:	401a      	ands	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d107      	bne.n	8001d50 <HAL_RCC_OscConfig+0x8f0>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	23f0      	movs	r3, #240	@ 0xf0
 8001d44:	039b      	lsls	r3, r3, #14
 8001d46:	401a      	ands	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_OscConfig+0x8f4>
        {
          return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <HAL_RCC_OscConfig+0x8f6>
        }
      }
    }
  }

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	0018      	movs	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b008      	add	sp, #32
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			@ (mov r8, r8)
 8001d60:	40021000 	.word	0x40021000
 8001d64:	08004b88 	.word	0x08004b88
 8001d68:	000002a1 	.word	0x000002a1
 8001d6c:	000002a2 	.word	0x000002a2
 8001d70:	000002a3 	.word	0x000002a3
 8001d74:	feffffff 	.word	0xfeffffff
 8001d78:	ffc2ffff 	.word	0xffc2ffff

08001d7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e134      	b.n	8001ffa <HAL_RCC_ClockConfig+0x27e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2201      	movs	r2, #1
 8001d96:	4013      	ands	r3, r2
 8001d98:	d110      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x40>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	4013      	ands	r3, r2
 8001da2:	d10b      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x40>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2204      	movs	r2, #4
 8001daa:	4013      	ands	r3, r2
 8001dac:	d106      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x40>
 8001dae:	23c5      	movs	r3, #197	@ 0xc5
 8001db0:	009a      	lsls	r2, r3, #2
 8001db2:	4b94      	ldr	r3, [pc, #592]	@ (8002004 <HAL_RCC_ClockConfig+0x288>)
 8001db4:	0011      	movs	r1, r2
 8001db6:	0018      	movs	r0, r3
 8001db8:	f7fe fc06 	bl	80005c8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d008      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x58>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x58>
 8001dc8:	4a8f      	ldr	r2, [pc, #572]	@ (8002008 <HAL_RCC_ClockConfig+0x28c>)
 8001dca:	4b8e      	ldr	r3, [pc, #568]	@ (8002004 <HAL_RCC_ClockConfig+0x288>)
 8001dcc:	0011      	movs	r1, r2
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f7fe fbfa 	bl	80005c8 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd4:	4b8d      	ldr	r3, [pc, #564]	@ (800200c <HAL_RCC_ClockConfig+0x290>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	4013      	ands	r3, r2
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d911      	bls.n	8001e06 <HAL_RCC_ClockConfig+0x8a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de2:	4b8a      	ldr	r3, [pc, #552]	@ (800200c <HAL_RCC_ClockConfig+0x290>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2201      	movs	r2, #1
 8001de8:	4393      	bics	r3, r2
 8001dea:	0019      	movs	r1, r3
 8001dec:	4b87      	ldr	r3, [pc, #540]	@ (800200c <HAL_RCC_ClockConfig+0x290>)
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df4:	4b85      	ldr	r3, [pc, #532]	@ (800200c <HAL_RCC_ClockConfig+0x290>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d001      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x8a>
    {
      return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e0f9      	b.n	8001ffa <HAL_RCC_ClockConfig+0x27e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d040      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x116>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2204      	movs	r2, #4
 8001e16:	4013      	ands	r3, r2
 8001e18:	d006      	beq.n	8001e28 <HAL_RCC_ClockConfig+0xac>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e1a:	4b7d      	ldr	r3, [pc, #500]	@ (8002010 <HAL_RCC_ClockConfig+0x294>)
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	4b7c      	ldr	r3, [pc, #496]	@ (8002010 <HAL_RCC_ClockConfig+0x294>)
 8001e20:	21e0      	movs	r1, #224	@ 0xe0
 8001e22:	00c9      	lsls	r1, r1, #3
 8001e24:	430a      	orrs	r2, r1
 8001e26:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d026      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x102>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b80      	cmp	r3, #128	@ 0x80
 8001e36:	d022      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x102>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b90      	cmp	r3, #144	@ 0x90
 8001e3e:	d01e      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x102>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e46:	d01a      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x102>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2bb0      	cmp	r3, #176	@ 0xb0
 8001e4e:	d016      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x102>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2bc0      	cmp	r3, #192	@ 0xc0
 8001e56:	d012      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x102>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2bd0      	cmp	r3, #208	@ 0xd0
 8001e5e:	d00e      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x102>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2be0      	cmp	r3, #224	@ 0xe0
 8001e66:	d00a      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x102>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2bf0      	cmp	r3, #240	@ 0xf0
 8001e6e:	d006      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x102>
 8001e70:	23cd      	movs	r3, #205	@ 0xcd
 8001e72:	009a      	lsls	r2, r3, #2
 8001e74:	4b63      	ldr	r3, [pc, #396]	@ (8002004 <HAL_RCC_ClockConfig+0x288>)
 8001e76:	0011      	movs	r1, r2
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f7fe fba5 	bl	80005c8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e7e:	4b64      	ldr	r3, [pc, #400]	@ (8002010 <HAL_RCC_ClockConfig+0x294>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	22f0      	movs	r2, #240	@ 0xf0
 8001e84:	4393      	bics	r3, r2
 8001e86:	0019      	movs	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	4b60      	ldr	r3, [pc, #384]	@ (8002010 <HAL_RCC_ClockConfig+0x294>)
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2201      	movs	r2, #1
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d052      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00d      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x144>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d009      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x144>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d005      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x144>
 8001eb4:	4a57      	ldr	r2, [pc, #348]	@ (8002014 <HAL_RCC_ClockConfig+0x298>)
 8001eb6:	4b53      	ldr	r3, [pc, #332]	@ (8002004 <HAL_RCC_ClockConfig+0x288>)
 8001eb8:	0011      	movs	r1, r2
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f7fe fb84 	bl	80005c8 <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d107      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec8:	4b51      	ldr	r3, [pc, #324]	@ (8002010 <HAL_RCC_ClockConfig+0x294>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	2380      	movs	r3, #128	@ 0x80
 8001ece:	029b      	lsls	r3, r3, #10
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d114      	bne.n	8001efe <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e090      	b.n	8001ffa <HAL_RCC_ClockConfig+0x27e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x174>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee0:	4b4b      	ldr	r3, [pc, #300]	@ (8002010 <HAL_RCC_ClockConfig+0x294>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	2380      	movs	r3, #128	@ 0x80
 8001ee6:	049b      	lsls	r3, r3, #18
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d108      	bne.n	8001efe <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e084      	b.n	8001ffa <HAL_RCC_ClockConfig+0x27e>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef0:	4b47      	ldr	r3, [pc, #284]	@ (8002010 <HAL_RCC_ClockConfig+0x294>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d101      	bne.n	8001efe <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e07d      	b.n	8001ffa <HAL_RCC_ClockConfig+0x27e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001efe:	4b44      	ldr	r3, [pc, #272]	@ (8002010 <HAL_RCC_ClockConfig+0x294>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2203      	movs	r2, #3
 8001f04:	4393      	bics	r3, r2
 8001f06:	0019      	movs	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	4b40      	ldr	r3, [pc, #256]	@ (8002010 <HAL_RCC_ClockConfig+0x294>)
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f12:	f7fe fd0d 	bl	8000930 <HAL_GetTick>
 8001f16:	0003      	movs	r3, r0
 8001f18:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1a:	e009      	b.n	8001f30 <HAL_RCC_ClockConfig+0x1b4>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f1c:	f7fe fd08 	bl	8000930 <HAL_GetTick>
 8001f20:	0002      	movs	r2, r0
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	4a3c      	ldr	r2, [pc, #240]	@ (8002018 <HAL_RCC_ClockConfig+0x29c>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e064      	b.n	8001ffa <HAL_RCC_ClockConfig+0x27e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f30:	4b37      	ldr	r3, [pc, #220]	@ (8002010 <HAL_RCC_ClockConfig+0x294>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	220c      	movs	r2, #12
 8001f36:	401a      	ands	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d1ec      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f42:	4b32      	ldr	r3, [pc, #200]	@ (800200c <HAL_RCC_ClockConfig+0x290>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2201      	movs	r2, #1
 8001f48:	4013      	ands	r3, r2
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d211      	bcs.n	8001f74 <HAL_RCC_ClockConfig+0x1f8>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f50:	4b2e      	ldr	r3, [pc, #184]	@ (800200c <HAL_RCC_ClockConfig+0x290>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2201      	movs	r2, #1
 8001f56:	4393      	bics	r3, r2
 8001f58:	0019      	movs	r1, r3
 8001f5a:	4b2c      	ldr	r3, [pc, #176]	@ (800200c <HAL_RCC_ClockConfig+0x290>)
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f62:	4b2a      	ldr	r3, [pc, #168]	@ (800200c <HAL_RCC_ClockConfig+0x290>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2201      	movs	r2, #1
 8001f68:	4013      	ands	r3, r2
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x1f8>
    {
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e042      	b.n	8001ffa <HAL_RCC_ClockConfig+0x27e>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2204      	movs	r2, #4
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d02b      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x25a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d01d      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x246>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	2380      	movs	r3, #128	@ 0x80
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d017      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x246>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	23a0      	movs	r3, #160	@ 0xa0
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d011      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x246>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	23c0      	movs	r3, #192	@ 0xc0
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d00b      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x246>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	23e0      	movs	r3, #224	@ 0xe0
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d005      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x246>
 8001fb6:	4a19      	ldr	r2, [pc, #100]	@ (800201c <HAL_RCC_ClockConfig+0x2a0>)
 8001fb8:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <HAL_RCC_ClockConfig+0x288>)
 8001fba:	0011      	movs	r1, r2
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f7fe fb03 	bl	80005c8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc2:	4b13      	ldr	r3, [pc, #76]	@ (8002010 <HAL_RCC_ClockConfig+0x294>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4a16      	ldr	r2, [pc, #88]	@ (8002020 <HAL_RCC_ClockConfig+0x2a4>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002010 <HAL_RCC_ClockConfig+0x294>)
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fd6:	f000 f829 	bl	800202c <HAL_RCC_GetSysClockFreq>
 8001fda:	0001      	movs	r1, r0
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002010 <HAL_RCC_ClockConfig+0x294>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	220f      	movs	r2, #15
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8002024 <HAL_RCC_ClockConfig+0x2a8>)
 8001fe8:	5cd3      	ldrb	r3, [r2, r3]
 8001fea:	000a      	movs	r2, r1
 8001fec:	40da      	lsrs	r2, r3
 8001fee:	4b0e      	ldr	r3, [pc, #56]	@ (8002028 <HAL_RCC_ClockConfig+0x2ac>)
 8001ff0:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ff2:	2003      	movs	r0, #3
 8001ff4:	f7fe fb1c 	bl	8000630 <HAL_InitTick>
  
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b004      	add	sp, #16
 8002000:	bd80      	pop	{r7, pc}
 8002002:	46c0      	nop			@ (mov r8, r8)
 8002004:	08004b88 	.word	0x08004b88
 8002008:	00000315 	.word	0x00000315
 800200c:	40022000 	.word	0x40022000
 8002010:	40021000 	.word	0x40021000
 8002014:	0000033b 	.word	0x0000033b
 8002018:	00001388 	.word	0x00001388
 800201c:	00000382 	.word	0x00000382
 8002020:	fffff8ff 	.word	0xfffff8ff
 8002024:	08004d50 	.word	0x08004d50
 8002028:	20000000 	.word	0x20000000

0800202c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002046:	4b20      	ldr	r3, [pc, #128]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	220c      	movs	r2, #12
 8002050:	4013      	ands	r3, r2
 8002052:	2b04      	cmp	r3, #4
 8002054:	d002      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0x30>
 8002056:	2b08      	cmp	r3, #8
 8002058:	d003      	beq.n	8002062 <HAL_RCC_GetSysClockFreq+0x36>
 800205a:	e02c      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800205c:	4b1b      	ldr	r3, [pc, #108]	@ (80020cc <HAL_RCC_GetSysClockFreq+0xa0>)
 800205e:	613b      	str	r3, [r7, #16]
      break;
 8002060:	e02c      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	0c9b      	lsrs	r3, r3, #18
 8002066:	220f      	movs	r2, #15
 8002068:	4013      	ands	r3, r2
 800206a:	4a19      	ldr	r2, [pc, #100]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800206c:	5cd3      	ldrb	r3, [r2, r3]
 800206e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002070:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002074:	220f      	movs	r2, #15
 8002076:	4013      	ands	r3, r2
 8002078:	4a16      	ldr	r2, [pc, #88]	@ (80020d4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800207a:	5cd3      	ldrb	r3, [r2, r3]
 800207c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	2380      	movs	r3, #128	@ 0x80
 8002082:	025b      	lsls	r3, r3, #9
 8002084:	4013      	ands	r3, r2
 8002086:	d009      	beq.n	800209c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	4810      	ldr	r0, [pc, #64]	@ (80020cc <HAL_RCC_GetSysClockFreq+0xa0>)
 800208c:	f7fe f83c 	bl	8000108 <__udivsi3>
 8002090:	0003      	movs	r3, r0
 8002092:	001a      	movs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4353      	muls	r3, r2
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	e009      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	000a      	movs	r2, r1
 80020a0:	0152      	lsls	r2, r2, #5
 80020a2:	1a52      	subs	r2, r2, r1
 80020a4:	0193      	lsls	r3, r2, #6
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	185b      	adds	r3, r3, r1
 80020ac:	021b      	lsls	r3, r3, #8
 80020ae:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	613b      	str	r3, [r7, #16]
      break;
 80020b4:	e002      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020b6:	4b05      	ldr	r3, [pc, #20]	@ (80020cc <HAL_RCC_GetSysClockFreq+0xa0>)
 80020b8:	613b      	str	r3, [r7, #16]
      break;
 80020ba:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80020bc:	693b      	ldr	r3, [r7, #16]
}
 80020be:	0018      	movs	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b006      	add	sp, #24
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	40021000 	.word	0x40021000
 80020cc:	007a1200 	.word	0x007a1200
 80020d0:	08004d68 	.word	0x08004d68
 80020d4:	08004d78 	.word	0x08004d78

080020d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020dc:	4b02      	ldr	r3, [pc, #8]	@ (80020e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	0018      	movs	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	46c0      	nop			@ (mov r8, r8)
 80020e8:	20000000 	.word	0x20000000

080020ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80020f0:	f7ff fff2 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 80020f4:	0001      	movs	r1, r0
 80020f6:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	0a1b      	lsrs	r3, r3, #8
 80020fc:	2207      	movs	r2, #7
 80020fe:	4013      	ands	r3, r2
 8002100:	4a04      	ldr	r2, [pc, #16]	@ (8002114 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002102:	5cd3      	ldrb	r3, [r2, r3]
 8002104:	40d9      	lsrs	r1, r3
 8002106:	000b      	movs	r3, r1
}    
 8002108:	0018      	movs	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			@ (mov r8, r8)
 8002110:	40021000 	.word	0x40021000
 8002114:	08004d60 	.word	0x08004d60

08002118 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d105      	bne.n	8002134 <HAL_RCC_GetClockConfig+0x1c>
 8002128:	4a17      	ldr	r2, [pc, #92]	@ (8002188 <HAL_RCC_GetClockConfig+0x70>)
 800212a:	4b18      	ldr	r3, [pc, #96]	@ (800218c <HAL_RCC_GetClockConfig+0x74>)
 800212c:	0011      	movs	r1, r2
 800212e:	0018      	movs	r0, r3
 8002130:	f7fe fa4a 	bl	80005c8 <assert_failed>
  assert_param(pFLatency != NULL);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d105      	bne.n	8002146 <HAL_RCC_GetClockConfig+0x2e>
 800213a:	4a15      	ldr	r2, [pc, #84]	@ (8002190 <HAL_RCC_GetClockConfig+0x78>)
 800213c:	4b13      	ldr	r3, [pc, #76]	@ (800218c <HAL_RCC_GetClockConfig+0x74>)
 800213e:	0011      	movs	r1, r2
 8002140:	0018      	movs	r0, r3
 8002142:	f7fe fa41 	bl	80005c8 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2207      	movs	r2, #7
 800214a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800214c:	4b11      	ldr	r3, [pc, #68]	@ (8002194 <HAL_RCC_GetClockConfig+0x7c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2203      	movs	r2, #3
 8002152:	401a      	ands	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002158:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <HAL_RCC_GetClockConfig+0x7c>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	22f0      	movs	r2, #240	@ 0xf0
 800215e:	401a      	ands	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002164:	4b0b      	ldr	r3, [pc, #44]	@ (8002194 <HAL_RCC_GetClockConfig+0x7c>)
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	23e0      	movs	r3, #224	@ 0xe0
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	401a      	ands	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8002172:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <HAL_RCC_GetClockConfig+0x80>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2201      	movs	r2, #1
 8002178:	401a      	ands	r2, r3
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	601a      	str	r2, [r3, #0]
}
 800217e:	46c0      	nop			@ (mov r8, r8)
 8002180:	46bd      	mov	sp, r7
 8002182:	b002      	add	sp, #8
 8002184:	bd80      	pop	{r7, pc}
 8002186:	46c0      	nop			@ (mov r8, r8)
 8002188:	00000513 	.word	0x00000513
 800218c:	08004b88 	.word	0x08004b88
 8002190:	00000514 	.word	0x00000514
 8002194:	40021000 	.word	0x40021000
 8002198:	40022000 	.word	0x40022000

0800219c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a7e      	ldr	r2, [pc, #504]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d904      	bls.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80021b6:	4b7e      	ldr	r3, [pc, #504]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80021b8:	216c      	movs	r1, #108	@ 0x6c
 80021ba:	0018      	movs	r0, r3
 80021bc:	f7fe fa04 	bl	80005c8 <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	2380      	movs	r3, #128	@ 0x80
 80021c6:	025b      	lsls	r3, r3, #9
 80021c8:	4013      	ands	r3, r2
 80021ca:	d100      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x32>
 80021cc:	e0a9      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d016      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	2380      	movs	r3, #128	@ 0x80
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	429a      	cmp	r2, r3
 80021e0:	d010      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	2380      	movs	r3, #128	@ 0x80
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d00a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	23c0      	movs	r3, #192	@ 0xc0
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d004      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80021fa:	4b6d      	ldr	r3, [pc, #436]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80021fc:	2172      	movs	r1, #114	@ 0x72
 80021fe:	0018      	movs	r0, r3
 8002200:	f7fe f9e2 	bl	80005c8 <assert_failed>
    
    FlagStatus       pwrclkchanged = RESET;
 8002204:	2017      	movs	r0, #23
 8002206:	183b      	adds	r3, r7, r0
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220c:	4b69      	ldr	r3, [pc, #420]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800220e:	69da      	ldr	r2, [r3, #28]
 8002210:	2380      	movs	r3, #128	@ 0x80
 8002212:	055b      	lsls	r3, r3, #21
 8002214:	4013      	ands	r3, r2
 8002216:	d110      	bne.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002218:	4b66      	ldr	r3, [pc, #408]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800221a:	69da      	ldr	r2, [r3, #28]
 800221c:	4b65      	ldr	r3, [pc, #404]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800221e:	2180      	movs	r1, #128	@ 0x80
 8002220:	0549      	lsls	r1, r1, #21
 8002222:	430a      	orrs	r2, r1
 8002224:	61da      	str	r2, [r3, #28]
 8002226:	4b63      	ldr	r3, [pc, #396]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002228:	69da      	ldr	r2, [r3, #28]
 800222a:	2380      	movs	r3, #128	@ 0x80
 800222c:	055b      	lsls	r3, r3, #21
 800222e:	4013      	ands	r3, r2
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002234:	183b      	adds	r3, r7, r0
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223a:	4b5f      	ldr	r3, [pc, #380]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	2380      	movs	r3, #128	@ 0x80
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4013      	ands	r3, r2
 8002244:	d11a      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002246:	4b5c      	ldr	r3, [pc, #368]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	4b5b      	ldr	r3, [pc, #364]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800224c:	2180      	movs	r1, #128	@ 0x80
 800224e:	0049      	lsls	r1, r1, #1
 8002250:	430a      	orrs	r2, r1
 8002252:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002254:	f7fe fb6c 	bl	8000930 <HAL_GetTick>
 8002258:	0003      	movs	r3, r0
 800225a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225c:	e008      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225e:	f7fe fb67 	bl	8000930 <HAL_GetTick>
 8002262:	0002      	movs	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b64      	cmp	r3, #100	@ 0x64
 800226a:	d901      	bls.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e099      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002270:	4b51      	ldr	r3, [pc, #324]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	2380      	movs	r3, #128	@ 0x80
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4013      	ands	r3, r2
 800227a:	d0f0      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800227c:	4b4d      	ldr	r3, [pc, #308]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800227e:	6a1a      	ldr	r2, [r3, #32]
 8002280:	23c0      	movs	r3, #192	@ 0xc0
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4013      	ands	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d034      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	23c0      	movs	r3, #192	@ 0xc0
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4013      	ands	r3, r2
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	429a      	cmp	r2, r3
 800229c:	d02c      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800229e:	4b45      	ldr	r3, [pc, #276]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	4a46      	ldr	r2, [pc, #280]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022a8:	4b42      	ldr	r3, [pc, #264]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80022aa:	6a1a      	ldr	r2, [r3, #32]
 80022ac:	4b41      	ldr	r3, [pc, #260]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80022ae:	2180      	movs	r1, #128	@ 0x80
 80022b0:	0249      	lsls	r1, r1, #9
 80022b2:	430a      	orrs	r2, r1
 80022b4:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022b6:	4b3f      	ldr	r3, [pc, #252]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80022b8:	6a1a      	ldr	r2, [r3, #32]
 80022ba:	4b3e      	ldr	r3, [pc, #248]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80022bc:	4940      	ldr	r1, [pc, #256]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80022be:	400a      	ands	r2, r1
 80022c0:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022c2:	4b3c      	ldr	r3, [pc, #240]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2201      	movs	r2, #1
 80022cc:	4013      	ands	r3, r2
 80022ce:	d013      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7fe fb2e 	bl	8000930 <HAL_GetTick>
 80022d4:	0003      	movs	r3, r0
 80022d6:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d8:	e009      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x152>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022da:	f7fe fb29 	bl	8000930 <HAL_GetTick>
 80022de:	0002      	movs	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	4a37      	ldr	r2, [pc, #220]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x152>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e05a      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ee:	4b31      	ldr	r3, [pc, #196]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	2202      	movs	r2, #2
 80022f4:	4013      	ands	r3, r2
 80022f6:	d0f0      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022f8:	4b2e      	ldr	r3, [pc, #184]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	4a2f      	ldr	r2, [pc, #188]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80022fe:	4013      	ands	r3, r2
 8002300:	0019      	movs	r1, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	4b2b      	ldr	r3, [pc, #172]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002308:	430a      	orrs	r2, r1
 800230a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800230c:	2317      	movs	r3, #23
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d105      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002316:	4b27      	ldr	r3, [pc, #156]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002318:	69da      	ldr	r2, [r3, #28]
 800231a:	4b26      	ldr	r3, [pc, #152]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800231c:	492a      	ldr	r1, [pc, #168]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800231e:	400a      	ands	r2, r1
 8002320:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2201      	movs	r2, #1
 8002328:	4013      	ands	r3, r2
 800232a:	d01e      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d010      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d00c      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d008      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d004      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 800234c:	4b18      	ldr	r3, [pc, #96]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800234e:	21b9      	movs	r1, #185	@ 0xb9
 8002350:	0018      	movs	r0, r3
 8002352:	f7fe f939 	bl	80005c8 <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002356:	4b17      	ldr	r3, [pc, #92]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	2203      	movs	r2, #3
 800235c:	4393      	bics	r3, r2
 800235e:	0019      	movs	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	4b13      	ldr	r3, [pc, #76]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002366:	430a      	orrs	r2, r1
 8002368:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2220      	movs	r2, #32
 8002370:	4013      	ands	r3, r2
 8002372:	d016      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b10      	cmp	r3, #16
 8002382:	d004      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8002384:	4b0a      	ldr	r3, [pc, #40]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002386:	21dd      	movs	r1, #221	@ 0xdd
 8002388:	0018      	movs	r0, r3
 800238a:	f7fe f91d 	bl	80005c8 <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800238e:	4b09      	ldr	r3, [pc, #36]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	2210      	movs	r2, #16
 8002394:	4393      	bics	r3, r2
 8002396:	0019      	movs	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	4b05      	ldr	r3, [pc, #20]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800239e:	430a      	orrs	r2, r1
 80023a0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	0018      	movs	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b006      	add	sp, #24
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	00010021 	.word	0x00010021
 80023b0:	08004bf8 	.word	0x08004bf8
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40007000 	.word	0x40007000
 80023bc:	fffffcff 	.word	0xfffffcff
 80023c0:	fffeffff 	.word	0xfffeffff
 80023c4:	00001388 	.word	0x00001388
 80023c8:	efffffff 	.word	0xefffffff

080023cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e0d2      	b.n	8002584 <HAL_TIM_Base_Init+0x1b8>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a6a      	ldr	r2, [pc, #424]	@ (800258c <HAL_TIM_Base_Init+0x1c0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d021      	beq.n	800242c <HAL_TIM_Base_Init+0x60>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	2380      	movs	r3, #128	@ 0x80
 80023ee:	05db      	lsls	r3, r3, #23
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d01b      	beq.n	800242c <HAL_TIM_Base_Init+0x60>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a65      	ldr	r2, [pc, #404]	@ (8002590 <HAL_TIM_Base_Init+0x1c4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d016      	beq.n	800242c <HAL_TIM_Base_Init+0x60>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a64      	ldr	r2, [pc, #400]	@ (8002594 <HAL_TIM_Base_Init+0x1c8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d011      	beq.n	800242c <HAL_TIM_Base_Init+0x60>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a62      	ldr	r2, [pc, #392]	@ (8002598 <HAL_TIM_Base_Init+0x1cc>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00c      	beq.n	800242c <HAL_TIM_Base_Init+0x60>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a61      	ldr	r2, [pc, #388]	@ (800259c <HAL_TIM_Base_Init+0x1d0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d007      	beq.n	800242c <HAL_TIM_Base_Init+0x60>
 800241c:	2314      	movs	r3, #20
 800241e:	33ff      	adds	r3, #255	@ 0xff
 8002420:	001a      	movs	r2, r3
 8002422:	4b5f      	ldr	r3, [pc, #380]	@ (80025a0 <HAL_TIM_Base_Init+0x1d4>)
 8002424:	0011      	movs	r1, r2
 8002426:	0018      	movs	r0, r3
 8002428:	f7fe f8ce 	bl	80005c8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d016      	beq.n	8002462 <HAL_TIM_Base_Init+0x96>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b10      	cmp	r3, #16
 800243a:	d012      	beq.n	8002462 <HAL_TIM_Base_Init+0x96>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	2b20      	cmp	r3, #32
 8002442:	d00e      	beq.n	8002462 <HAL_TIM_Base_Init+0x96>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b40      	cmp	r3, #64	@ 0x40
 800244a:	d00a      	beq.n	8002462 <HAL_TIM_Base_Init+0x96>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b60      	cmp	r3, #96	@ 0x60
 8002452:	d006      	beq.n	8002462 <HAL_TIM_Base_Init+0x96>
 8002454:	238a      	movs	r3, #138	@ 0x8a
 8002456:	005a      	lsls	r2, r3, #1
 8002458:	4b51      	ldr	r3, [pc, #324]	@ (80025a0 <HAL_TIM_Base_Init+0x1d4>)
 800245a:	0011      	movs	r1, r2
 800245c:	0018      	movs	r0, r3
 800245e:	f7fe f8b3 	bl	80005c8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d013      	beq.n	8002492 <HAL_TIM_Base_Init+0xc6>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691a      	ldr	r2, [r3, #16]
 800246e:	2380      	movs	r3, #128	@ 0x80
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	429a      	cmp	r2, r3
 8002474:	d00d      	beq.n	8002492 <HAL_TIM_Base_Init+0xc6>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	2380      	movs	r3, #128	@ 0x80
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	429a      	cmp	r2, r3
 8002480:	d007      	beq.n	8002492 <HAL_TIM_Base_Init+0xc6>
 8002482:	2316      	movs	r3, #22
 8002484:	33ff      	adds	r3, #255	@ 0xff
 8002486:	001a      	movs	r2, r3
 8002488:	4b45      	ldr	r3, [pc, #276]	@ (80025a0 <HAL_TIM_Base_Init+0x1d4>)
 800248a:	0011      	movs	r1, r2
 800248c:	0018      	movs	r0, r3
 800248e:	f7fe f89b 	bl	80005c8 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	2380      	movs	r3, #128	@ 0x80
 8002498:	05db      	lsls	r3, r3, #23
 800249a:	429a      	cmp	r2, r3
 800249c:	d011      	beq.n	80024c2 <HAL_TIM_Base_Init+0xf6>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d007      	beq.n	80024b6 <HAL_TIM_Base_Init+0xea>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	2380      	movs	r3, #128	@ 0x80
 80024ac:	025b      	lsls	r3, r3, #9
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d201      	bcs.n	80024b6 <HAL_TIM_Base_Init+0xea>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_TIM_Base_Init+0xec>
 80024b6:	2300      	movs	r3, #0
 80024b8:	1c1a      	adds	r2, r3, #0
 80024ba:	2301      	movs	r3, #1
 80024bc:	4013      	ands	r3, r2
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	e004      	b.n	80024cc <HAL_TIM_Base_Init+0x100>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	1e5a      	subs	r2, r3, #1
 80024c8:	4193      	sbcs	r3, r2
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d106      	bne.n	80024de <HAL_TIM_Base_Init+0x112>
 80024d0:	238b      	movs	r3, #139	@ 0x8b
 80024d2:	005a      	lsls	r2, r3, #1
 80024d4:	4b32      	ldr	r3, [pc, #200]	@ (80025a0 <HAL_TIM_Base_Init+0x1d4>)
 80024d6:	0011      	movs	r1, r2
 80024d8:	0018      	movs	r0, r3
 80024da:	f7fe f875 	bl	80005c8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00b      	beq.n	80024fe <HAL_TIM_Base_Init+0x132>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b80      	cmp	r3, #128	@ 0x80
 80024ec:	d007      	beq.n	80024fe <HAL_TIM_Base_Init+0x132>
 80024ee:	2318      	movs	r3, #24
 80024f0:	33ff      	adds	r3, #255	@ 0xff
 80024f2:	001a      	movs	r2, r3
 80024f4:	4b2a      	ldr	r3, [pc, #168]	@ (80025a0 <HAL_TIM_Base_Init+0x1d4>)
 80024f6:	0011      	movs	r1, r2
 80024f8:	0018      	movs	r0, r3
 80024fa:	f7fe f865 	bl	80005c8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	223d      	movs	r2, #61	@ 0x3d
 8002502:	5c9b      	ldrb	r3, [r3, r2]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d107      	bne.n	800251a <HAL_TIM_Base_Init+0x14e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	223c      	movs	r2, #60	@ 0x3c
 800250e:	2100      	movs	r1, #0
 8002510:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	0018      	movs	r0, r3
 8002516:	f000 f845 	bl	80025a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	223d      	movs	r2, #61	@ 0x3d
 800251e:	2102      	movs	r1, #2
 8002520:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3304      	adds	r3, #4
 800252a:	0019      	movs	r1, r3
 800252c:	0010      	movs	r0, r2
 800252e:	f000 f9f1 	bl	8002914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2246      	movs	r2, #70	@ 0x46
 8002536:	2101      	movs	r1, #1
 8002538:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	223e      	movs	r2, #62	@ 0x3e
 800253e:	2101      	movs	r1, #1
 8002540:	5499      	strb	r1, [r3, r2]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	223f      	movs	r2, #63	@ 0x3f
 8002546:	2101      	movs	r1, #1
 8002548:	5499      	strb	r1, [r3, r2]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2240      	movs	r2, #64	@ 0x40
 800254e:	2101      	movs	r1, #1
 8002550:	5499      	strb	r1, [r3, r2]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2241      	movs	r2, #65	@ 0x41
 8002556:	2101      	movs	r1, #1
 8002558:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2242      	movs	r2, #66	@ 0x42
 800255e:	2101      	movs	r1, #1
 8002560:	5499      	strb	r1, [r3, r2]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2243      	movs	r2, #67	@ 0x43
 8002566:	2101      	movs	r1, #1
 8002568:	5499      	strb	r1, [r3, r2]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2244      	movs	r2, #68	@ 0x44
 800256e:	2101      	movs	r1, #1
 8002570:	5499      	strb	r1, [r3, r2]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2245      	movs	r2, #69	@ 0x45
 8002576:	2101      	movs	r1, #1
 8002578:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	223d      	movs	r2, #61	@ 0x3d
 800257e:	2101      	movs	r1, #1
 8002580:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	0018      	movs	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	b002      	add	sp, #8
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40012c00 	.word	0x40012c00
 8002590:	40000400 	.word	0x40000400
 8002594:	40002000 	.word	0x40002000
 8002598:	40014400 	.word	0x40014400
 800259c:	40014800 	.word	0x40014800
 80025a0:	08004c68 	.word	0x08004c68

080025a4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025ac:	46c0      	nop			@ (mov r8, r8)
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b002      	add	sp, #8
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a33      	ldr	r2, [pc, #204]	@ (8002690 <HAL_TIM_Base_Start_IT+0xdc>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d020      	beq.n	8002608 <HAL_TIM_Base_Start_IT+0x54>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	2380      	movs	r3, #128	@ 0x80
 80025cc:	05db      	lsls	r3, r3, #23
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d01a      	beq.n	8002608 <HAL_TIM_Base_Start_IT+0x54>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002694 <HAL_TIM_Base_Start_IT+0xe0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d015      	beq.n	8002608 <HAL_TIM_Base_Start_IT+0x54>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002698 <HAL_TIM_Base_Start_IT+0xe4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d010      	beq.n	8002608 <HAL_TIM_Base_Start_IT+0x54>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a2c      	ldr	r2, [pc, #176]	@ (800269c <HAL_TIM_Base_Start_IT+0xe8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d00b      	beq.n	8002608 <HAL_TIM_Base_Start_IT+0x54>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a2a      	ldr	r2, [pc, #168]	@ (80026a0 <HAL_TIM_Base_Start_IT+0xec>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d006      	beq.n	8002608 <HAL_TIM_Base_Start_IT+0x54>
 80025fa:	23e8      	movs	r3, #232	@ 0xe8
 80025fc:	005a      	lsls	r2, r3, #1
 80025fe:	4b29      	ldr	r3, [pc, #164]	@ (80026a4 <HAL_TIM_Base_Start_IT+0xf0>)
 8002600:	0011      	movs	r1, r2
 8002602:	0018      	movs	r0, r3
 8002604:	f7fd ffe0 	bl	80005c8 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	223d      	movs	r2, #61	@ 0x3d
 800260c:	5c9b      	ldrb	r3, [r3, r2]
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b01      	cmp	r3, #1
 8002612:	d001      	beq.n	8002618 <HAL_TIM_Base_Start_IT+0x64>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e036      	b.n	8002686 <HAL_TIM_Base_Start_IT+0xd2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	223d      	movs	r2, #61	@ 0x3d
 800261c:	2102      	movs	r1, #2
 800261e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2101      	movs	r1, #1
 800262c:	430a      	orrs	r2, r1
 800262e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a16      	ldr	r2, [pc, #88]	@ (8002690 <HAL_TIM_Base_Start_IT+0xdc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00a      	beq.n	8002650 <HAL_TIM_Base_Start_IT+0x9c>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	2380      	movs	r3, #128	@ 0x80
 8002640:	05db      	lsls	r3, r3, #23
 8002642:	429a      	cmp	r2, r3
 8002644:	d004      	beq.n	8002650 <HAL_TIM_Base_Start_IT+0x9c>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a12      	ldr	r2, [pc, #72]	@ (8002694 <HAL_TIM_Base_Start_IT+0xe0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d111      	bne.n	8002674 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2207      	movs	r2, #7
 8002658:	4013      	ands	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b06      	cmp	r3, #6
 8002660:	d010      	beq.n	8002684 <HAL_TIM_Base_Start_IT+0xd0>
    {
      __HAL_TIM_ENABLE(htim);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2101      	movs	r1, #1
 800266e:	430a      	orrs	r2, r1
 8002670:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002672:	e007      	b.n	8002684 <HAL_TIM_Base_Start_IT+0xd0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2101      	movs	r1, #1
 8002680:	430a      	orrs	r2, r1
 8002682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	0018      	movs	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	b004      	add	sp, #16
 800268c:	bd80      	pop	{r7, pc}
 800268e:	46c0      	nop			@ (mov r8, r8)
 8002690:	40012c00 	.word	0x40012c00
 8002694:	40000400 	.word	0x40000400
 8002698:	40002000 	.word	0x40002000
 800269c:	40014400 	.word	0x40014400
 80026a0:	40014800 	.word	0x40014800
 80026a4:	08004c68 	.word	0x08004c68

080026a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2202      	movs	r2, #2
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d124      	bne.n	8002708 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2202      	movs	r2, #2
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d11d      	bne.n	8002708 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2203      	movs	r2, #3
 80026d2:	4252      	negs	r2, r2
 80026d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	2203      	movs	r2, #3
 80026e4:	4013      	ands	r3, r2
 80026e6:	d004      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	0018      	movs	r0, r3
 80026ec:	f000 f8fa 	bl	80028e4 <HAL_TIM_IC_CaptureCallback>
 80026f0:	e007      	b.n	8002702 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	0018      	movs	r0, r3
 80026f6:	f000 f8ed 	bl	80028d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f000 f8f9 	bl	80028f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	2204      	movs	r2, #4
 8002710:	4013      	ands	r3, r2
 8002712:	2b04      	cmp	r3, #4
 8002714:	d125      	bne.n	8002762 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2204      	movs	r2, #4
 800271e:	4013      	ands	r3, r2
 8002720:	2b04      	cmp	r3, #4
 8002722:	d11e      	bne.n	8002762 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2205      	movs	r2, #5
 800272a:	4252      	negs	r2, r2
 800272c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2202      	movs	r2, #2
 8002732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699a      	ldr	r2, [r3, #24]
 800273a:	23c0      	movs	r3, #192	@ 0xc0
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4013      	ands	r3, r2
 8002740:	d004      	beq.n	800274c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	0018      	movs	r0, r3
 8002746:	f000 f8cd 	bl	80028e4 <HAL_TIM_IC_CaptureCallback>
 800274a:	e007      	b.n	800275c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	0018      	movs	r0, r3
 8002750:	f000 f8c0 	bl	80028d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	0018      	movs	r0, r3
 8002758:	f000 f8cc 	bl	80028f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	2208      	movs	r2, #8
 800276a:	4013      	ands	r3, r2
 800276c:	2b08      	cmp	r3, #8
 800276e:	d124      	bne.n	80027ba <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	2208      	movs	r2, #8
 8002778:	4013      	ands	r3, r2
 800277a:	2b08      	cmp	r3, #8
 800277c:	d11d      	bne.n	80027ba <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2209      	movs	r2, #9
 8002784:	4252      	negs	r2, r2
 8002786:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2204      	movs	r2, #4
 800278c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	2203      	movs	r2, #3
 8002796:	4013      	ands	r3, r2
 8002798:	d004      	beq.n	80027a4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	0018      	movs	r0, r3
 800279e:	f000 f8a1 	bl	80028e4 <HAL_TIM_IC_CaptureCallback>
 80027a2:	e007      	b.n	80027b4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	0018      	movs	r0, r3
 80027a8:	f000 f894 	bl	80028d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	0018      	movs	r0, r3
 80027b0:	f000 f8a0 	bl	80028f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	2210      	movs	r2, #16
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b10      	cmp	r3, #16
 80027c6:	d125      	bne.n	8002814 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2210      	movs	r2, #16
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b10      	cmp	r3, #16
 80027d4:	d11e      	bne.n	8002814 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2211      	movs	r2, #17
 80027dc:	4252      	negs	r2, r2
 80027de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2208      	movs	r2, #8
 80027e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	69da      	ldr	r2, [r3, #28]
 80027ec:	23c0      	movs	r3, #192	@ 0xc0
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4013      	ands	r3, r2
 80027f2:	d004      	beq.n	80027fe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	0018      	movs	r0, r3
 80027f8:	f000 f874 	bl	80028e4 <HAL_TIM_IC_CaptureCallback>
 80027fc:	e007      	b.n	800280e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	0018      	movs	r0, r3
 8002802:	f000 f867 	bl	80028d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	0018      	movs	r0, r3
 800280a:	f000 f873 	bl	80028f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	2201      	movs	r2, #1
 800281c:	4013      	ands	r3, r2
 800281e:	2b01      	cmp	r3, #1
 8002820:	d10f      	bne.n	8002842 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	2201      	movs	r2, #1
 800282a:	4013      	ands	r3, r2
 800282c:	2b01      	cmp	r3, #1
 800282e:	d108      	bne.n	8002842 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2202      	movs	r2, #2
 8002836:	4252      	negs	r2, r2
 8002838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	0018      	movs	r0, r3
 800283e:	f7fd feab 	bl	8000598 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	2280      	movs	r2, #128	@ 0x80
 800284a:	4013      	ands	r3, r2
 800284c:	2b80      	cmp	r3, #128	@ 0x80
 800284e:	d10f      	bne.n	8002870 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2280      	movs	r2, #128	@ 0x80
 8002858:	4013      	ands	r3, r2
 800285a:	2b80      	cmp	r3, #128	@ 0x80
 800285c:	d108      	bne.n	8002870 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2281      	movs	r2, #129	@ 0x81
 8002864:	4252      	negs	r2, r2
 8002866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	0018      	movs	r0, r3
 800286c:	f000 f8d0 	bl	8002a10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2240      	movs	r2, #64	@ 0x40
 8002878:	4013      	ands	r3, r2
 800287a:	2b40      	cmp	r3, #64	@ 0x40
 800287c:	d10f      	bne.n	800289e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	2240      	movs	r2, #64	@ 0x40
 8002886:	4013      	ands	r3, r2
 8002888:	2b40      	cmp	r3, #64	@ 0x40
 800288a:	d108      	bne.n	800289e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2241      	movs	r2, #65	@ 0x41
 8002892:	4252      	negs	r2, r2
 8002894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	0018      	movs	r0, r3
 800289a:	f000 f833 	bl	8002904 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	2220      	movs	r2, #32
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d10f      	bne.n	80028cc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	2220      	movs	r2, #32
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b20      	cmp	r3, #32
 80028b8:	d108      	bne.n	80028cc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2221      	movs	r2, #33	@ 0x21
 80028c0:	4252      	negs	r2, r2
 80028c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	0018      	movs	r0, r3
 80028c8:	f000 f89a 	bl	8002a00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028cc:	46c0      	nop			@ (mov r8, r8)
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b002      	add	sp, #8
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028dc:	46c0      	nop			@ (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	b002      	add	sp, #8
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028ec:	46c0      	nop			@ (mov r8, r8)
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b002      	add	sp, #8
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028fc:	46c0      	nop			@ (mov r8, r8)
 80028fe:	46bd      	mov	sp, r7
 8002900:	b002      	add	sp, #8
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800290c:	46c0      	nop			@ (mov r8, r8)
 800290e:	46bd      	mov	sp, r7
 8002910:	b002      	add	sp, #8
 8002912:	bd80      	pop	{r7, pc}

08002914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a30      	ldr	r2, [pc, #192]	@ (80029e8 <TIM_Base_SetConfig+0xd4>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d008      	beq.n	800293e <TIM_Base_SetConfig+0x2a>
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	2380      	movs	r3, #128	@ 0x80
 8002930:	05db      	lsls	r3, r3, #23
 8002932:	429a      	cmp	r2, r3
 8002934:	d003      	beq.n	800293e <TIM_Base_SetConfig+0x2a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a2c      	ldr	r2, [pc, #176]	@ (80029ec <TIM_Base_SetConfig+0xd8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d108      	bne.n	8002950 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2270      	movs	r2, #112	@ 0x70
 8002942:	4393      	bics	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a25      	ldr	r2, [pc, #148]	@ (80029e8 <TIM_Base_SetConfig+0xd4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d014      	beq.n	8002982 <TIM_Base_SetConfig+0x6e>
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	2380      	movs	r3, #128	@ 0x80
 800295c:	05db      	lsls	r3, r3, #23
 800295e:	429a      	cmp	r2, r3
 8002960:	d00f      	beq.n	8002982 <TIM_Base_SetConfig+0x6e>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a21      	ldr	r2, [pc, #132]	@ (80029ec <TIM_Base_SetConfig+0xd8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00b      	beq.n	8002982 <TIM_Base_SetConfig+0x6e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a20      	ldr	r2, [pc, #128]	@ (80029f0 <TIM_Base_SetConfig+0xdc>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d007      	beq.n	8002982 <TIM_Base_SetConfig+0x6e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a1f      	ldr	r2, [pc, #124]	@ (80029f4 <TIM_Base_SetConfig+0xe0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d003      	beq.n	8002982 <TIM_Base_SetConfig+0x6e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a1e      	ldr	r2, [pc, #120]	@ (80029f8 <TIM_Base_SetConfig+0xe4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d108      	bne.n	8002994 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4a1d      	ldr	r2, [pc, #116]	@ (80029fc <TIM_Base_SetConfig+0xe8>)
 8002986:	4013      	ands	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4313      	orrs	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2280      	movs	r2, #128	@ 0x80
 8002998:	4393      	bics	r3, r2
 800299a:	001a      	movs	r2, r3
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a0a      	ldr	r2, [pc, #40]	@ (80029e8 <TIM_Base_SetConfig+0xd4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d007      	beq.n	80029d2 <TIM_Base_SetConfig+0xbe>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a0b      	ldr	r2, [pc, #44]	@ (80029f4 <TIM_Base_SetConfig+0xe0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d003      	beq.n	80029d2 <TIM_Base_SetConfig+0xbe>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a0a      	ldr	r2, [pc, #40]	@ (80029f8 <TIM_Base_SetConfig+0xe4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d103      	bne.n	80029da <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	615a      	str	r2, [r3, #20]
}
 80029e0:	46c0      	nop			@ (mov r8, r8)
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b004      	add	sp, #16
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40012c00 	.word	0x40012c00
 80029ec:	40000400 	.word	0x40000400
 80029f0:	40002000 	.word	0x40002000
 80029f4:	40014400 	.word	0x40014400
 80029f8:	40014800 	.word	0x40014800
 80029fc:	fffffcff 	.word	0xfffffcff

08002a00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a08:	46c0      	nop			@ (mov r8, r8)
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b002      	add	sp, #8
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a18:	46c0      	nop			@ (mov r8, r8)
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b002      	add	sp, #8
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e062      	b.n	8002af8 <HAL_UART_Init+0xd8>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_UART_Init+0x34>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a30      	ldr	r2, [pc, #192]	@ (8002b00 <HAL_UART_Init+0xe0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d014      	beq.n	8002a6e <HAL_UART_Init+0x4e>
 8002a44:	2396      	movs	r3, #150	@ 0x96
 8002a46:	005a      	lsls	r2, r3, #1
 8002a48:	4b2e      	ldr	r3, [pc, #184]	@ (8002b04 <HAL_UART_Init+0xe4>)
 8002a4a:	0011      	movs	r1, r2
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f7fd fdbb 	bl	80005c8 <assert_failed>
 8002a52:	e00c      	b.n	8002a6e <HAL_UART_Init+0x4e>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a29      	ldr	r2, [pc, #164]	@ (8002b00 <HAL_UART_Init+0xe0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d007      	beq.n	8002a6e <HAL_UART_Init+0x4e>
 8002a5e:	2332      	movs	r3, #50	@ 0x32
 8002a60:	33ff      	adds	r3, #255	@ 0xff
 8002a62:	001a      	movs	r2, r3
 8002a64:	4b27      	ldr	r3, [pc, #156]	@ (8002b04 <HAL_UART_Init+0xe4>)
 8002a66:	0011      	movs	r1, r2
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7fd fdad 	bl	80005c8 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d107      	bne.n	8002a86 <HAL_UART_Init+0x66>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2278      	movs	r2, #120	@ 0x78
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	0018      	movs	r0, r3
 8002a82:	f7fd feb1 	bl	80007e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2224      	movs	r2, #36	@ 0x24
 8002a8a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2101      	movs	r1, #1
 8002a98:	438a      	bics	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f000 fb30 	bl	8003104 <UART_SetConfig>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_UART_Init+0x8e>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e024      	b.n	8002af8 <HAL_UART_Init+0xd8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_UART_Init+0x9e>
  {
    UART_AdvFeatureConfig(huart);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f000 fcf5 	bl	80034a8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	490f      	ldr	r1, [pc, #60]	@ (8002b08 <HAL_UART_Init+0xe8>)
 8002aca:	400a      	ands	r2, r1
 8002acc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	212a      	movs	r1, #42	@ 0x2a
 8002ada:	438a      	bics	r2, r1
 8002adc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2101      	movs	r1, #1
 8002aea:	430a      	orrs	r2, r1
 8002aec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	0018      	movs	r0, r3
 8002af2:	f000 fe57 	bl	80037a4 <UART_CheckIdleState>
 8002af6:	0003      	movs	r3, r0
}
 8002af8:	0018      	movs	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b002      	add	sp, #8
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40013800 	.word	0x40013800
 8002b04:	08004cd8 	.word	0x08004cd8
 8002b08:	ffffb7ff 	.word	0xffffb7ff

08002b0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b0ab      	sub	sp, #172	@ 0xac
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	22a4      	movs	r2, #164	@ 0xa4
 8002b1c:	18b9      	adds	r1, r7, r2
 8002b1e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	20a0      	movs	r0, #160	@ 0xa0
 8002b28:	1839      	adds	r1, r7, r0
 8002b2a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	219c      	movs	r1, #156	@ 0x9c
 8002b34:	1879      	adds	r1, r7, r1
 8002b36:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b38:	0011      	movs	r1, r2
 8002b3a:	18bb      	adds	r3, r7, r2
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a99      	ldr	r2, [pc, #612]	@ (8002da4 <HAL_UART_IRQHandler+0x298>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	2298      	movs	r2, #152	@ 0x98
 8002b44:	18bc      	adds	r4, r7, r2
 8002b46:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002b48:	18bb      	adds	r3, r7, r2
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d114      	bne.n	8002b7a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b50:	187b      	adds	r3, r7, r1
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2220      	movs	r2, #32
 8002b56:	4013      	ands	r3, r2
 8002b58:	d00f      	beq.n	8002b7a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b5a:	183b      	adds	r3, r7, r0
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	4013      	ands	r3, r2
 8002b62:	d00a      	beq.n	8002b7a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d100      	bne.n	8002b6e <HAL_UART_IRQHandler+0x62>
 8002b6c:	e29e      	b.n	80030ac <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	0010      	movs	r0, r2
 8002b76:	4798      	blx	r3
      }
      return;
 8002b78:	e298      	b.n	80030ac <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002b7a:	2398      	movs	r3, #152	@ 0x98
 8002b7c:	18fb      	adds	r3, r7, r3
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d100      	bne.n	8002b86 <HAL_UART_IRQHandler+0x7a>
 8002b84:	e114      	b.n	8002db0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b86:	239c      	movs	r3, #156	@ 0x9c
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d106      	bne.n	8002ba0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002b92:	23a0      	movs	r3, #160	@ 0xa0
 8002b94:	18fb      	adds	r3, r7, r3
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a83      	ldr	r2, [pc, #524]	@ (8002da8 <HAL_UART_IRQHandler+0x29c>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d100      	bne.n	8002ba0 <HAL_UART_IRQHandler+0x94>
 8002b9e:	e107      	b.n	8002db0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ba0:	23a4      	movs	r3, #164	@ 0xa4
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d012      	beq.n	8002bd2 <HAL_UART_IRQHandler+0xc6>
 8002bac:	23a0      	movs	r3, #160	@ 0xa0
 8002bae:	18fb      	adds	r3, r7, r3
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	2380      	movs	r3, #128	@ 0x80
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d00b      	beq.n	8002bd2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2284      	movs	r2, #132	@ 0x84
 8002bc6:	589b      	ldr	r3, [r3, r2]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2184      	movs	r1, #132	@ 0x84
 8002bd0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bd2:	23a4      	movs	r3, #164	@ 0xa4
 8002bd4:	18fb      	adds	r3, r7, r3
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2202      	movs	r2, #2
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d011      	beq.n	8002c02 <HAL_UART_IRQHandler+0xf6>
 8002bde:	239c      	movs	r3, #156	@ 0x9c
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2201      	movs	r2, #1
 8002be6:	4013      	ands	r3, r2
 8002be8:	d00b      	beq.n	8002c02 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2284      	movs	r2, #132	@ 0x84
 8002bf6:	589b      	ldr	r3, [r3, r2]
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2184      	movs	r1, #132	@ 0x84
 8002c00:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c02:	23a4      	movs	r3, #164	@ 0xa4
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2204      	movs	r2, #4
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d011      	beq.n	8002c32 <HAL_UART_IRQHandler+0x126>
 8002c0e:	239c      	movs	r3, #156	@ 0x9c
 8002c10:	18fb      	adds	r3, r7, r3
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2201      	movs	r2, #1
 8002c16:	4013      	ands	r3, r2
 8002c18:	d00b      	beq.n	8002c32 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2204      	movs	r2, #4
 8002c20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2284      	movs	r2, #132	@ 0x84
 8002c26:	589b      	ldr	r3, [r3, r2]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2184      	movs	r1, #132	@ 0x84
 8002c30:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c32:	23a4      	movs	r3, #164	@ 0xa4
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2208      	movs	r2, #8
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d017      	beq.n	8002c6e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c3e:	23a0      	movs	r3, #160	@ 0xa0
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2220      	movs	r2, #32
 8002c46:	4013      	ands	r3, r2
 8002c48:	d105      	bne.n	8002c56 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c4a:	239c      	movs	r3, #156	@ 0x9c
 8002c4c:	18fb      	adds	r3, r7, r3
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2201      	movs	r2, #1
 8002c52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c54:	d00b      	beq.n	8002c6e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2208      	movs	r2, #8
 8002c5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2284      	movs	r2, #132	@ 0x84
 8002c62:	589b      	ldr	r3, [r3, r2]
 8002c64:	2208      	movs	r2, #8
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2184      	movs	r1, #132	@ 0x84
 8002c6c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c6e:	23a4      	movs	r3, #164	@ 0xa4
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	2380      	movs	r3, #128	@ 0x80
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d013      	beq.n	8002ca4 <HAL_UART_IRQHandler+0x198>
 8002c7c:	23a0      	movs	r3, #160	@ 0xa0
 8002c7e:	18fb      	adds	r3, r7, r3
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	2380      	movs	r3, #128	@ 0x80
 8002c84:	04db      	lsls	r3, r3, #19
 8002c86:	4013      	ands	r3, r2
 8002c88:	d00c      	beq.n	8002ca4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2280      	movs	r2, #128	@ 0x80
 8002c90:	0112      	lsls	r2, r2, #4
 8002c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2284      	movs	r2, #132	@ 0x84
 8002c98:	589b      	ldr	r3, [r3, r2]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2184      	movs	r1, #132	@ 0x84
 8002ca2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2284      	movs	r2, #132	@ 0x84
 8002ca8:	589b      	ldr	r3, [r3, r2]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d100      	bne.n	8002cb0 <HAL_UART_IRQHandler+0x1a4>
 8002cae:	e1ff      	b.n	80030b0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cb0:	23a4      	movs	r3, #164	@ 0xa4
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d00e      	beq.n	8002cda <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002cbc:	23a0      	movs	r3, #160	@ 0xa0
 8002cbe:	18fb      	adds	r3, r7, r3
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d008      	beq.n	8002cda <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d004      	beq.n	8002cda <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	0010      	movs	r0, r2
 8002cd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2284      	movs	r2, #132	@ 0x84
 8002cde:	589b      	ldr	r3, [r3, r2]
 8002ce0:	2194      	movs	r1, #148	@ 0x94
 8002ce2:	187a      	adds	r2, r7, r1
 8002ce4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2240      	movs	r2, #64	@ 0x40
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b40      	cmp	r3, #64	@ 0x40
 8002cf2:	d004      	beq.n	8002cfe <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002cf4:	187b      	adds	r3, r7, r1
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2228      	movs	r2, #40	@ 0x28
 8002cfa:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cfc:	d047      	beq.n	8002d8e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	0018      	movs	r0, r3
 8002d02:	f000 fe61 	bl	80039c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2240      	movs	r2, #64	@ 0x40
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2b40      	cmp	r3, #64	@ 0x40
 8002d12:	d137      	bne.n	8002d84 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d14:	f3ef 8310 	mrs	r3, PRIMASK
 8002d18:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002d1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d1c:	2090      	movs	r0, #144	@ 0x90
 8002d1e:	183a      	adds	r2, r7, r0
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	2301      	movs	r3, #1
 8002d24:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d28:	f383 8810 	msr	PRIMASK, r3
}
 8002d2c:	46c0      	nop			@ (mov r8, r8)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2140      	movs	r1, #64	@ 0x40
 8002d3a:	438a      	bics	r2, r1
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	183b      	adds	r3, r7, r0
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d46:	f383 8810 	msr	PRIMASK, r3
}
 8002d4a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d012      	beq.n	8002d7a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d58:	4a14      	ldr	r2, [pc, #80]	@ (8002dac <HAL_UART_IRQHandler+0x2a0>)
 8002d5a:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d60:	0018      	movs	r0, r3
 8002d62:	f7fd feeb 	bl	8000b3c <HAL_DMA_Abort_IT>
 8002d66:	1e03      	subs	r3, r0, #0
 8002d68:	d01a      	beq.n	8002da0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d74:	0018      	movs	r0, r3
 8002d76:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d78:	e012      	b.n	8002da0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f000 f9ad 	bl	80030dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d82:	e00d      	b.n	8002da0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	0018      	movs	r0, r3
 8002d88:	f000 f9a8 	bl	80030dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d8c:	e008      	b.n	8002da0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	0018      	movs	r0, r3
 8002d92:	f000 f9a3 	bl	80030dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2284      	movs	r2, #132	@ 0x84
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002d9e:	e187      	b.n	80030b0 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da0:	46c0      	nop			@ (mov r8, r8)
    return;
 8002da2:	e185      	b.n	80030b0 <HAL_UART_IRQHandler+0x5a4>
 8002da4:	0000080f 	.word	0x0000080f
 8002da8:	04000120 	.word	0x04000120
 8002dac:	08003a91 	.word	0x08003a91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d000      	beq.n	8002dba <HAL_UART_IRQHandler+0x2ae>
 8002db8:	e139      	b.n	800302e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002dba:	23a4      	movs	r3, #164	@ 0xa4
 8002dbc:	18fb      	adds	r3, r7, r3
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2210      	movs	r2, #16
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d100      	bne.n	8002dc8 <HAL_UART_IRQHandler+0x2bc>
 8002dc6:	e132      	b.n	800302e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002dc8:	23a0      	movs	r3, #160	@ 0xa0
 8002dca:	18fb      	adds	r3, r7, r3
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2210      	movs	r2, #16
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d100      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x2ca>
 8002dd4:	e12b      	b.n	800302e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2210      	movs	r2, #16
 8002ddc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2240      	movs	r2, #64	@ 0x40
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b40      	cmp	r3, #64	@ 0x40
 8002dea:	d000      	beq.n	8002dee <HAL_UART_IRQHandler+0x2e2>
 8002dec:	e09f      	b.n	8002f2e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	217e      	movs	r1, #126	@ 0x7e
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002dfc:	187b      	adds	r3, r7, r1
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d100      	bne.n	8002e06 <HAL_UART_IRQHandler+0x2fa>
 8002e04:	e156      	b.n	80030b4 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2258      	movs	r2, #88	@ 0x58
 8002e0a:	5a9b      	ldrh	r3, [r3, r2]
 8002e0c:	187a      	adds	r2, r7, r1
 8002e0e:	8812      	ldrh	r2, [r2, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d300      	bcc.n	8002e16 <HAL_UART_IRQHandler+0x30a>
 8002e14:	e14e      	b.n	80030b4 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	187a      	adds	r2, r7, r1
 8002e1a:	215a      	movs	r1, #90	@ 0x5a
 8002e1c:	8812      	ldrh	r2, [r2, #0]
 8002e1e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	d06f      	beq.n	8002f0a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e2e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e32:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e34:	2301      	movs	r3, #1
 8002e36:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e3a:	f383 8810 	msr	PRIMASK, r3
}
 8002e3e:	46c0      	nop			@ (mov r8, r8)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	499e      	ldr	r1, [pc, #632]	@ (80030c4 <HAL_UART_IRQHandler+0x5b8>)
 8002e4c:	400a      	ands	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e52:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e56:	f383 8810 	msr	PRIMASK, r3
}
 8002e5a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e64:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e66:	2301      	movs	r3, #1
 8002e68:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e6c:	f383 8810 	msr	PRIMASK, r3
}
 8002e70:	46c0      	nop			@ (mov r8, r8)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	438a      	bics	r2, r1
 8002e80:	609a      	str	r2, [r3, #8]
 8002e82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e84:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e88:	f383 8810 	msr	PRIMASK, r3
}
 8002e8c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e92:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002e94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e96:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e98:	2301      	movs	r3, #1
 8002e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e9e:	f383 8810 	msr	PRIMASK, r3
}
 8002ea2:	46c0      	nop			@ (mov r8, r8)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2140      	movs	r1, #64	@ 0x40
 8002eb0:	438a      	bics	r2, r1
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002eb6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002eba:	f383 8810 	msr	PRIMASK, r3
}
 8002ebe:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2280      	movs	r2, #128	@ 0x80
 8002ec4:	2120      	movs	r1, #32
 8002ec6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ece:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ed6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ed8:	2301      	movs	r3, #1
 8002eda:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002edc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ede:	f383 8810 	msr	PRIMASK, r3
}
 8002ee2:	46c0      	nop			@ (mov r8, r8)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2110      	movs	r1, #16
 8002ef0:	438a      	bics	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ef6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002efa:	f383 8810 	msr	PRIMASK, r3
}
 8002efe:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f04:	0018      	movs	r0, r3
 8002f06:	f7fd fde1 	bl	8000acc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2258      	movs	r2, #88	@ 0x58
 8002f14:	5a9a      	ldrh	r2, [r3, r2]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	215a      	movs	r1, #90	@ 0x5a
 8002f1a:	5a5b      	ldrh	r3, [r3, r1]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	0011      	movs	r1, r2
 8002f26:	0018      	movs	r0, r3
 8002f28:	f000 f8e0 	bl	80030ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f2c:	e0c2      	b.n	80030b4 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2258      	movs	r2, #88	@ 0x58
 8002f32:	5a99      	ldrh	r1, [r3, r2]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	225a      	movs	r2, #90	@ 0x5a
 8002f38:	5a9b      	ldrh	r3, [r3, r2]
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	208e      	movs	r0, #142	@ 0x8e
 8002f3e:	183b      	adds	r3, r7, r0
 8002f40:	1a8a      	subs	r2, r1, r2
 8002f42:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	225a      	movs	r2, #90	@ 0x5a
 8002f48:	5a9b      	ldrh	r3, [r3, r2]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d100      	bne.n	8002f52 <HAL_UART_IRQHandler+0x446>
 8002f50:	e0b2      	b.n	80030b8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8002f52:	183b      	adds	r3, r7, r0
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d100      	bne.n	8002f5c <HAL_UART_IRQHandler+0x450>
 8002f5a:	e0ad      	b.n	80030b8 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f60:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f62:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f64:	2488      	movs	r4, #136	@ 0x88
 8002f66:	193a      	adds	r2, r7, r4
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f383 8810 	msr	PRIMASK, r3
}
 8002f74:	46c0      	nop			@ (mov r8, r8)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4951      	ldr	r1, [pc, #324]	@ (80030c8 <HAL_UART_IRQHandler+0x5bc>)
 8002f82:	400a      	ands	r2, r1
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	193b      	adds	r3, r7, r4
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f383 8810 	msr	PRIMASK, r3
}
 8002f92:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f94:	f3ef 8310 	mrs	r3, PRIMASK
 8002f98:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f9a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9c:	2484      	movs	r4, #132	@ 0x84
 8002f9e:	193a      	adds	r2, r7, r4
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f383 8810 	msr	PRIMASK, r3
}
 8002fac:	46c0      	nop			@ (mov r8, r8)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2101      	movs	r1, #1
 8002fba:	438a      	bics	r2, r1
 8002fbc:	609a      	str	r2, [r3, #8]
 8002fbe:	193b      	adds	r3, r7, r4
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	f383 8810 	msr	PRIMASK, r3
}
 8002fca:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2280      	movs	r2, #128	@ 0x80
 8002fd0:	2120      	movs	r1, #32
 8002fd2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe8:	2480      	movs	r4, #128	@ 0x80
 8002fea:	193a      	adds	r2, r7, r4
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	2301      	movs	r3, #1
 8002ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff4:	f383 8810 	msr	PRIMASK, r3
}
 8002ff8:	46c0      	nop			@ (mov r8, r8)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2110      	movs	r1, #16
 8003006:	438a      	bics	r2, r1
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	193b      	adds	r3, r7, r4
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003012:	f383 8810 	msr	PRIMASK, r3
}
 8003016:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800301e:	183b      	adds	r3, r7, r0
 8003020:	881a      	ldrh	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	0011      	movs	r1, r2
 8003026:	0018      	movs	r0, r3
 8003028:	f000 f860 	bl	80030ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800302c:	e044      	b.n	80030b8 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800302e:	23a4      	movs	r3, #164	@ 0xa4
 8003030:	18fb      	adds	r3, r7, r3
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	2380      	movs	r3, #128	@ 0x80
 8003036:	035b      	lsls	r3, r3, #13
 8003038:	4013      	ands	r3, r2
 800303a:	d010      	beq.n	800305e <HAL_UART_IRQHandler+0x552>
 800303c:	239c      	movs	r3, #156	@ 0x9c
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	2380      	movs	r3, #128	@ 0x80
 8003044:	03db      	lsls	r3, r3, #15
 8003046:	4013      	ands	r3, r2
 8003048:	d009      	beq.n	800305e <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2280      	movs	r2, #128	@ 0x80
 8003050:	0352      	lsls	r2, r2, #13
 8003052:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	0018      	movs	r0, r3
 8003058:	f000 fd5c 	bl	8003b14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800305c:	e02f      	b.n	80030be <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800305e:	23a4      	movs	r3, #164	@ 0xa4
 8003060:	18fb      	adds	r3, r7, r3
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2280      	movs	r2, #128	@ 0x80
 8003066:	4013      	ands	r3, r2
 8003068:	d00f      	beq.n	800308a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800306a:	23a0      	movs	r3, #160	@ 0xa0
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2280      	movs	r2, #128	@ 0x80
 8003072:	4013      	ands	r3, r2
 8003074:	d009      	beq.n	800308a <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800307a:	2b00      	cmp	r3, #0
 800307c:	d01e      	beq.n	80030bc <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	0010      	movs	r0, r2
 8003086:	4798      	blx	r3
    }
    return;
 8003088:	e018      	b.n	80030bc <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800308a:	23a4      	movs	r3, #164	@ 0xa4
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2240      	movs	r2, #64	@ 0x40
 8003092:	4013      	ands	r3, r2
 8003094:	d013      	beq.n	80030be <HAL_UART_IRQHandler+0x5b2>
 8003096:	23a0      	movs	r3, #160	@ 0xa0
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2240      	movs	r2, #64	@ 0x40
 800309e:	4013      	ands	r3, r2
 80030a0:	d00d      	beq.n	80030be <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	0018      	movs	r0, r3
 80030a6:	f000 fd0a 	bl	8003abe <UART_EndTransmit_IT>
    return;
 80030aa:	e008      	b.n	80030be <HAL_UART_IRQHandler+0x5b2>
      return;
 80030ac:	46c0      	nop			@ (mov r8, r8)
 80030ae:	e006      	b.n	80030be <HAL_UART_IRQHandler+0x5b2>
    return;
 80030b0:	46c0      	nop			@ (mov r8, r8)
 80030b2:	e004      	b.n	80030be <HAL_UART_IRQHandler+0x5b2>
      return;
 80030b4:	46c0      	nop			@ (mov r8, r8)
 80030b6:	e002      	b.n	80030be <HAL_UART_IRQHandler+0x5b2>
      return;
 80030b8:	46c0      	nop			@ (mov r8, r8)
 80030ba:	e000      	b.n	80030be <HAL_UART_IRQHandler+0x5b2>
    return;
 80030bc:	46c0      	nop			@ (mov r8, r8)
  }

}
 80030be:	46bd      	mov	sp, r7
 80030c0:	b02b      	add	sp, #172	@ 0xac
 80030c2:	bd90      	pop	{r4, r7, pc}
 80030c4:	fffffeff 	.word	0xfffffeff
 80030c8:	fffffedf 	.word	0xfffffedf

080030cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030d4:	46c0      	nop			@ (mov r8, r8)
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b002      	add	sp, #8
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030e4:	46c0      	nop			@ (mov r8, r8)
 80030e6:	46bd      	mov	sp, r7
 80030e8:	b002      	add	sp, #8
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	000a      	movs	r2, r1
 80030f6:	1cbb      	adds	r3, r7, #2
 80030f8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030fa:	46c0      	nop			@ (mov r8, r8)
 80030fc:	46bd      	mov	sp, r7
 80030fe:	b002      	add	sp, #8
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800310c:	231e      	movs	r3, #30
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4aba      	ldr	r2, [pc, #744]	@ (8003404 <UART_SetConfig+0x300>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d905      	bls.n	800312a <UART_SetConfig+0x26>
 800311e:	4aba      	ldr	r2, [pc, #744]	@ (8003408 <UART_SetConfig+0x304>)
 8003120:	4bba      	ldr	r3, [pc, #744]	@ (800340c <UART_SetConfig+0x308>)
 8003122:	0011      	movs	r1, r2
 8003124:	0018      	movs	r0, r3
 8003126:	f7fd fa4f 	bl	80005c8 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00b      	beq.n	800314a <UART_SetConfig+0x46>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	2380      	movs	r3, #128	@ 0x80
 8003138:	015b      	lsls	r3, r3, #5
 800313a:	429a      	cmp	r2, r3
 800313c:	d005      	beq.n	800314a <UART_SetConfig+0x46>
 800313e:	4ab4      	ldr	r2, [pc, #720]	@ (8003410 <UART_SetConfig+0x30c>)
 8003140:	4bb2      	ldr	r3, [pc, #712]	@ (800340c <UART_SetConfig+0x308>)
 8003142:	0011      	movs	r1, r2
 8003144:	0018      	movs	r0, r3
 8003146:	f7fd fa3f 	bl	80005c8 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	2380      	movs	r3, #128	@ 0x80
 8003150:	015b      	lsls	r3, r3, #5
 8003152:	429a      	cmp	r2, r3
 8003154:	d015      	beq.n	8003182 <UART_SetConfig+0x7e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d011      	beq.n	8003182 <UART_SetConfig+0x7e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	23c0      	movs	r3, #192	@ 0xc0
 8003164:	019b      	lsls	r3, r3, #6
 8003166:	429a      	cmp	r2, r3
 8003168:	d00b      	beq.n	8003182 <UART_SetConfig+0x7e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	2380      	movs	r3, #128	@ 0x80
 8003170:	019b      	lsls	r3, r3, #6
 8003172:	429a      	cmp	r2, r3
 8003174:	d005      	beq.n	8003182 <UART_SetConfig+0x7e>
 8003176:	4aa7      	ldr	r2, [pc, #668]	@ (8003414 <UART_SetConfig+0x310>)
 8003178:	4ba4      	ldr	r3, [pc, #656]	@ (800340c <UART_SetConfig+0x308>)
 800317a:	0011      	movs	r1, r2
 800317c:	0018      	movs	r0, r3
 800317e:	f7fd fa23 	bl	80005c8 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00b      	beq.n	80031a2 <UART_SetConfig+0x9e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1a      	ldr	r2, [r3, #32]
 800318e:	2380      	movs	r3, #128	@ 0x80
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	429a      	cmp	r2, r3
 8003194:	d005      	beq.n	80031a2 <UART_SetConfig+0x9e>
 8003196:	4aa0      	ldr	r2, [pc, #640]	@ (8003418 <UART_SetConfig+0x314>)
 8003198:	4b9c      	ldr	r3, [pc, #624]	@ (800340c <UART_SetConfig+0x308>)
 800319a:	0011      	movs	r1, r2
 800319c:	0018      	movs	r0, r3
 800319e:	f7fd fa13 	bl	80005c8 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d011      	beq.n	80031ce <UART_SetConfig+0xca>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691a      	ldr	r2, [r3, #16]
 80031ae:	2380      	movs	r3, #128	@ 0x80
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d00b      	beq.n	80031ce <UART_SetConfig+0xca>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	23c0      	movs	r3, #192	@ 0xc0
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	429a      	cmp	r2, r3
 80031c0:	d005      	beq.n	80031ce <UART_SetConfig+0xca>
 80031c2:	4a96      	ldr	r2, [pc, #600]	@ (800341c <UART_SetConfig+0x318>)
 80031c4:	4b91      	ldr	r3, [pc, #580]	@ (800340c <UART_SetConfig+0x308>)
 80031c6:	0011      	movs	r1, r2
 80031c8:	0018      	movs	r0, r3
 80031ca:	f7fd f9fd 	bl	80005c8 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	220c      	movs	r2, #12
 80031d4:	4393      	bics	r3, r2
 80031d6:	d103      	bne.n	80031e0 <UART_SetConfig+0xdc>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d106      	bne.n	80031ee <UART_SetConfig+0xea>
 80031e0:	23bf      	movs	r3, #191	@ 0xbf
 80031e2:	011a      	lsls	r2, r3, #4
 80031e4:	4b89      	ldr	r3, [pc, #548]	@ (800340c <UART_SetConfig+0x308>)
 80031e6:	0011      	movs	r1, r2
 80031e8:	0018      	movs	r0, r3
 80031ea:	f7fd f9ed 	bl	80005c8 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d017      	beq.n	8003226 <UART_SetConfig+0x122>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	2380      	movs	r3, #128	@ 0x80
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	429a      	cmp	r2, r3
 8003200:	d011      	beq.n	8003226 <UART_SetConfig+0x122>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	2380      	movs	r3, #128	@ 0x80
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	429a      	cmp	r2, r3
 800320c:	d00b      	beq.n	8003226 <UART_SetConfig+0x122>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	23c0      	movs	r3, #192	@ 0xc0
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	429a      	cmp	r2, r3
 8003218:	d005      	beq.n	8003226 <UART_SetConfig+0x122>
 800321a:	4a81      	ldr	r2, [pc, #516]	@ (8003420 <UART_SetConfig+0x31c>)
 800321c:	4b7b      	ldr	r3, [pc, #492]	@ (800340c <UART_SetConfig+0x308>)
 800321e:	0011      	movs	r1, r2
 8003220:	0018      	movs	r0, r3
 8003222:	f7fd f9d1 	bl	80005c8 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00b      	beq.n	8003246 <UART_SetConfig+0x142>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69da      	ldr	r2, [r3, #28]
 8003232:	2380      	movs	r3, #128	@ 0x80
 8003234:	021b      	lsls	r3, r3, #8
 8003236:	429a      	cmp	r2, r3
 8003238:	d005      	beq.n	8003246 <UART_SetConfig+0x142>
 800323a:	4a7a      	ldr	r2, [pc, #488]	@ (8003424 <UART_SetConfig+0x320>)
 800323c:	4b73      	ldr	r3, [pc, #460]	@ (800340c <UART_SetConfig+0x308>)
 800323e:	0011      	movs	r1, r2
 8003240:	0018      	movs	r0, r3
 8003242:	f7fd f9c1 	bl	80005c8 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a70      	ldr	r2, [pc, #448]	@ (8003428 <UART_SetConfig+0x324>)
 8003266:	4013      	ands	r3, r2
 8003268:	0019      	movs	r1, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	430a      	orrs	r2, r1
 8003272:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4a6c      	ldr	r2, [pc, #432]	@ (800342c <UART_SetConfig+0x328>)
 800327c:	4013      	ands	r3, r2
 800327e:	0019      	movs	r1, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	4a63      	ldr	r2, [pc, #396]	@ (8003430 <UART_SetConfig+0x32c>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	0019      	movs	r1, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032b2:	4b60      	ldr	r3, [pc, #384]	@ (8003434 <UART_SetConfig+0x330>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	2203      	movs	r2, #3
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d00d      	beq.n	80032da <UART_SetConfig+0x1d6>
 80032be:	d81b      	bhi.n	80032f8 <UART_SetConfig+0x1f4>
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d014      	beq.n	80032ee <UART_SetConfig+0x1ea>
 80032c4:	d818      	bhi.n	80032f8 <UART_SetConfig+0x1f4>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <UART_SetConfig+0x1cc>
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d00a      	beq.n	80032e4 <UART_SetConfig+0x1e0>
 80032ce:	e013      	b.n	80032f8 <UART_SetConfig+0x1f4>
 80032d0:	231f      	movs	r3, #31
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	2200      	movs	r2, #0
 80032d6:	701a      	strb	r2, [r3, #0]
 80032d8:	e012      	b.n	8003300 <UART_SetConfig+0x1fc>
 80032da:	231f      	movs	r3, #31
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	2202      	movs	r2, #2
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	e00d      	b.n	8003300 <UART_SetConfig+0x1fc>
 80032e4:	231f      	movs	r3, #31
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	2204      	movs	r2, #4
 80032ea:	701a      	strb	r2, [r3, #0]
 80032ec:	e008      	b.n	8003300 <UART_SetConfig+0x1fc>
 80032ee:	231f      	movs	r3, #31
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	2208      	movs	r2, #8
 80032f4:	701a      	strb	r2, [r3, #0]
 80032f6:	e003      	b.n	8003300 <UART_SetConfig+0x1fc>
 80032f8:	231f      	movs	r3, #31
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	2210      	movs	r2, #16
 80032fe:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	2380      	movs	r3, #128	@ 0x80
 8003306:	021b      	lsls	r3, r3, #8
 8003308:	429a      	cmp	r2, r3
 800330a:	d15c      	bne.n	80033c6 <UART_SetConfig+0x2c2>
  {
    switch (clocksource)
 800330c:	231f      	movs	r3, #31
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b08      	cmp	r3, #8
 8003314:	d015      	beq.n	8003342 <UART_SetConfig+0x23e>
 8003316:	dc18      	bgt.n	800334a <UART_SetConfig+0x246>
 8003318:	2b04      	cmp	r3, #4
 800331a:	d00d      	beq.n	8003338 <UART_SetConfig+0x234>
 800331c:	dc15      	bgt.n	800334a <UART_SetConfig+0x246>
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <UART_SetConfig+0x224>
 8003322:	2b02      	cmp	r3, #2
 8003324:	d005      	beq.n	8003332 <UART_SetConfig+0x22e>
 8003326:	e010      	b.n	800334a <UART_SetConfig+0x246>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003328:	f7fe fee0 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 800332c:	0003      	movs	r3, r0
 800332e:	61bb      	str	r3, [r7, #24]
        break;
 8003330:	e012      	b.n	8003358 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003332:	4b41      	ldr	r3, [pc, #260]	@ (8003438 <UART_SetConfig+0x334>)
 8003334:	61bb      	str	r3, [r7, #24]
        break;
 8003336:	e00f      	b.n	8003358 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003338:	f7fe fe78 	bl	800202c <HAL_RCC_GetSysClockFreq>
 800333c:	0003      	movs	r3, r0
 800333e:	61bb      	str	r3, [r7, #24]
        break;
 8003340:	e00a      	b.n	8003358 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003342:	2380      	movs	r3, #128	@ 0x80
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	61bb      	str	r3, [r7, #24]
        break;
 8003348:	e006      	b.n	8003358 <UART_SetConfig+0x254>
      default:
        pclk = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800334e:	231e      	movs	r3, #30
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
        break;
 8003356:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d100      	bne.n	8003360 <UART_SetConfig+0x25c>
 800335e:	e096      	b.n	800348e <UART_SetConfig+0x38a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	005a      	lsls	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	085b      	lsrs	r3, r3, #1
 800336a:	18d2      	adds	r2, r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	0019      	movs	r1, r3
 8003372:	0010      	movs	r0, r2
 8003374:	f7fc fec8 	bl	8000108 <__udivsi3>
 8003378:	0003      	movs	r3, r0
 800337a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	2b0f      	cmp	r3, #15
 8003380:	d91c      	bls.n	80033bc <UART_SetConfig+0x2b8>
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	2380      	movs	r3, #128	@ 0x80
 8003386:	025b      	lsls	r3, r3, #9
 8003388:	429a      	cmp	r2, r3
 800338a:	d217      	bcs.n	80033bc <UART_SetConfig+0x2b8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	b29a      	uxth	r2, r3
 8003390:	200e      	movs	r0, #14
 8003392:	183b      	adds	r3, r7, r0
 8003394:	210f      	movs	r1, #15
 8003396:	438a      	bics	r2, r1
 8003398:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	085b      	lsrs	r3, r3, #1
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2207      	movs	r2, #7
 80033a2:	4013      	ands	r3, r2
 80033a4:	b299      	uxth	r1, r3
 80033a6:	183b      	adds	r3, r7, r0
 80033a8:	183a      	adds	r2, r7, r0
 80033aa:	8812      	ldrh	r2, [r2, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	183a      	adds	r2, r7, r0
 80033b6:	8812      	ldrh	r2, [r2, #0]
 80033b8:	60da      	str	r2, [r3, #12]
 80033ba:	e068      	b.n	800348e <UART_SetConfig+0x38a>
      }
      else
      {
        ret = HAL_ERROR;
 80033bc:	231e      	movs	r3, #30
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	2201      	movs	r2, #1
 80033c2:	701a      	strb	r2, [r3, #0]
 80033c4:	e063      	b.n	800348e <UART_SetConfig+0x38a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033c6:	231f      	movs	r3, #31
 80033c8:	18fb      	adds	r3, r7, r3
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d015      	beq.n	80033fc <UART_SetConfig+0x2f8>
 80033d0:	dc34      	bgt.n	800343c <UART_SetConfig+0x338>
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d00d      	beq.n	80033f2 <UART_SetConfig+0x2ee>
 80033d6:	dc31      	bgt.n	800343c <UART_SetConfig+0x338>
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <UART_SetConfig+0x2de>
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d005      	beq.n	80033ec <UART_SetConfig+0x2e8>
 80033e0:	e02c      	b.n	800343c <UART_SetConfig+0x338>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033e2:	f7fe fe83 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 80033e6:	0003      	movs	r3, r0
 80033e8:	61bb      	str	r3, [r7, #24]
        break;
 80033ea:	e02e      	b.n	800344a <UART_SetConfig+0x346>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033ec:	4b12      	ldr	r3, [pc, #72]	@ (8003438 <UART_SetConfig+0x334>)
 80033ee:	61bb      	str	r3, [r7, #24]
        break;
 80033f0:	e02b      	b.n	800344a <UART_SetConfig+0x346>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033f2:	f7fe fe1b 	bl	800202c <HAL_RCC_GetSysClockFreq>
 80033f6:	0003      	movs	r3, r0
 80033f8:	61bb      	str	r3, [r7, #24]
        break;
 80033fa:	e026      	b.n	800344a <UART_SetConfig+0x346>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033fc:	2380      	movs	r3, #128	@ 0x80
 80033fe:	021b      	lsls	r3, r3, #8
 8003400:	61bb      	str	r3, [r7, #24]
        break;
 8003402:	e022      	b.n	800344a <UART_SetConfig+0x346>
 8003404:	005b8d80 	.word	0x005b8d80
 8003408:	00000bea 	.word	0x00000bea
 800340c:	08004cd8 	.word	0x08004cd8
 8003410:	00000beb 	.word	0x00000beb
 8003414:	00000bec 	.word	0x00000bec
 8003418:	00000bed 	.word	0x00000bed
 800341c:	00000bef 	.word	0x00000bef
 8003420:	00000bf1 	.word	0x00000bf1
 8003424:	00000bf2 	.word	0x00000bf2
 8003428:	ffff69f3 	.word	0xffff69f3
 800342c:	ffffcfff 	.word	0xffffcfff
 8003430:	fffff4ff 	.word	0xfffff4ff
 8003434:	40021000 	.word	0x40021000
 8003438:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003440:	231e      	movs	r3, #30
 8003442:	18fb      	adds	r3, r7, r3
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]
        break;
 8003448:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01e      	beq.n	800348e <UART_SetConfig+0x38a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	085a      	lsrs	r2, r3, #1
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	18d2      	adds	r2, r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	0019      	movs	r1, r3
 8003460:	0010      	movs	r0, r2
 8003462:	f7fc fe51 	bl	8000108 <__udivsi3>
 8003466:	0003      	movs	r3, r0
 8003468:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	2b0f      	cmp	r3, #15
 800346e:	d90a      	bls.n	8003486 <UART_SetConfig+0x382>
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	2380      	movs	r3, #128	@ 0x80
 8003474:	025b      	lsls	r3, r3, #9
 8003476:	429a      	cmp	r2, r3
 8003478:	d205      	bcs.n	8003486 <UART_SetConfig+0x382>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	b29a      	uxth	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	60da      	str	r2, [r3, #12]
 8003484:	e003      	b.n	800348e <UART_SetConfig+0x38a>
      }
      else
      {
        ret = HAL_ERROR;
 8003486:	231e      	movs	r3, #30
 8003488:	18fb      	adds	r3, r7, r3
 800348a:	2201      	movs	r2, #1
 800348c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800349a:	231e      	movs	r3, #30
 800349c:	18fb      	adds	r3, r7, r3
 800349e:	781b      	ldrb	r3, [r3, #0]
}
 80034a0:	0018      	movs	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b008      	add	sp, #32
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b4:	2bff      	cmp	r3, #255	@ 0xff
 80034b6:	d905      	bls.n	80034c4 <UART_AdvFeatureConfig+0x1c>
 80034b8:	4aa5      	ldr	r2, [pc, #660]	@ (8003750 <UART_AdvFeatureConfig+0x2a8>)
 80034ba:	4ba6      	ldr	r3, [pc, #664]	@ (8003754 <UART_AdvFeatureConfig+0x2ac>)
 80034bc:	0011      	movs	r1, r2
 80034be:	0018      	movs	r0, r3
 80034c0:	f7fd f882 	bl	80005c8 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	2201      	movs	r2, #1
 80034ca:	4013      	ands	r3, r2
 80034cc:	d01b      	beq.n	8003506 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00b      	beq.n	80034ee <UART_AdvFeatureConfig+0x46>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034da:	2380      	movs	r3, #128	@ 0x80
 80034dc:	029b      	lsls	r3, r3, #10
 80034de:	429a      	cmp	r2, r3
 80034e0:	d005      	beq.n	80034ee <UART_AdvFeatureConfig+0x46>
 80034e2:	4a9d      	ldr	r2, [pc, #628]	@ (8003758 <UART_AdvFeatureConfig+0x2b0>)
 80034e4:	4b9b      	ldr	r3, [pc, #620]	@ (8003754 <UART_AdvFeatureConfig+0x2ac>)
 80034e6:	0011      	movs	r1, r2
 80034e8:	0018      	movs	r0, r3
 80034ea:	f7fd f86d 	bl	80005c8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4a99      	ldr	r2, [pc, #612]	@ (800375c <UART_AdvFeatureConfig+0x2b4>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	0019      	movs	r1, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350a:	2202      	movs	r2, #2
 800350c:	4013      	ands	r3, r2
 800350e:	d01b      	beq.n	8003548 <UART_AdvFeatureConfig+0xa0>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00b      	beq.n	8003530 <UART_AdvFeatureConfig+0x88>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800351c:	2380      	movs	r3, #128	@ 0x80
 800351e:	025b      	lsls	r3, r3, #9
 8003520:	429a      	cmp	r2, r3
 8003522:	d005      	beq.n	8003530 <UART_AdvFeatureConfig+0x88>
 8003524:	4a8e      	ldr	r2, [pc, #568]	@ (8003760 <UART_AdvFeatureConfig+0x2b8>)
 8003526:	4b8b      	ldr	r3, [pc, #556]	@ (8003754 <UART_AdvFeatureConfig+0x2ac>)
 8003528:	0011      	movs	r1, r2
 800352a:	0018      	movs	r0, r3
 800352c:	f7fd f84c 	bl	80005c8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	4a8b      	ldr	r2, [pc, #556]	@ (8003764 <UART_AdvFeatureConfig+0x2bc>)
 8003538:	4013      	ands	r3, r2
 800353a:	0019      	movs	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354c:	2204      	movs	r2, #4
 800354e:	4013      	ands	r3, r2
 8003550:	d01c      	beq.n	800358c <UART_AdvFeatureConfig+0xe4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00c      	beq.n	8003574 <UART_AdvFeatureConfig+0xcc>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800355e:	2380      	movs	r3, #128	@ 0x80
 8003560:	02db      	lsls	r3, r3, #11
 8003562:	429a      	cmp	r2, r3
 8003564:	d006      	beq.n	8003574 <UART_AdvFeatureConfig+0xcc>
 8003566:	23c8      	movs	r3, #200	@ 0xc8
 8003568:	011a      	lsls	r2, r3, #4
 800356a:	4b7a      	ldr	r3, [pc, #488]	@ (8003754 <UART_AdvFeatureConfig+0x2ac>)
 800356c:	0011      	movs	r1, r2
 800356e:	0018      	movs	r0, r3
 8003570:	f7fd f82a 	bl	80005c8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4a7b      	ldr	r2, [pc, #492]	@ (8003768 <UART_AdvFeatureConfig+0x2c0>)
 800357c:	4013      	ands	r3, r2
 800357e:	0019      	movs	r1, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	2208      	movs	r2, #8
 8003592:	4013      	ands	r3, r2
 8003594:	d01b      	beq.n	80035ce <UART_AdvFeatureConfig+0x126>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00b      	beq.n	80035b6 <UART_AdvFeatureConfig+0x10e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035a2:	2380      	movs	r3, #128	@ 0x80
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d005      	beq.n	80035b6 <UART_AdvFeatureConfig+0x10e>
 80035aa:	4a70      	ldr	r2, [pc, #448]	@ (800376c <UART_AdvFeatureConfig+0x2c4>)
 80035ac:	4b69      	ldr	r3, [pc, #420]	@ (8003754 <UART_AdvFeatureConfig+0x2ac>)
 80035ae:	0011      	movs	r1, r2
 80035b0:	0018      	movs	r0, r3
 80035b2:	f7fd f809 	bl	80005c8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	4a6c      	ldr	r2, [pc, #432]	@ (8003770 <UART_AdvFeatureConfig+0x2c8>)
 80035be:	4013      	ands	r3, r2
 80035c0:	0019      	movs	r1, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	2210      	movs	r2, #16
 80035d4:	4013      	ands	r3, r2
 80035d6:	d01b      	beq.n	8003610 <UART_AdvFeatureConfig+0x168>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00b      	beq.n	80035f8 <UART_AdvFeatureConfig+0x150>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035e4:	2380      	movs	r3, #128	@ 0x80
 80035e6:	015b      	lsls	r3, r3, #5
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d005      	beq.n	80035f8 <UART_AdvFeatureConfig+0x150>
 80035ec:	4a61      	ldr	r2, [pc, #388]	@ (8003774 <UART_AdvFeatureConfig+0x2cc>)
 80035ee:	4b59      	ldr	r3, [pc, #356]	@ (8003754 <UART_AdvFeatureConfig+0x2ac>)
 80035f0:	0011      	movs	r1, r2
 80035f2:	0018      	movs	r0, r3
 80035f4:	f7fc ffe8 	bl	80005c8 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	4a5e      	ldr	r2, [pc, #376]	@ (8003778 <UART_AdvFeatureConfig+0x2d0>)
 8003600:	4013      	ands	r3, r2
 8003602:	0019      	movs	r1, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	2220      	movs	r2, #32
 8003616:	4013      	ands	r3, r2
 8003618:	d01b      	beq.n	8003652 <UART_AdvFeatureConfig+0x1aa>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00b      	beq.n	800363a <UART_AdvFeatureConfig+0x192>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003626:	2380      	movs	r3, #128	@ 0x80
 8003628:	019b      	lsls	r3, r3, #6
 800362a:	429a      	cmp	r2, r3
 800362c:	d005      	beq.n	800363a <UART_AdvFeatureConfig+0x192>
 800362e:	4a53      	ldr	r2, [pc, #332]	@ (800377c <UART_AdvFeatureConfig+0x2d4>)
 8003630:	4b48      	ldr	r3, [pc, #288]	@ (8003754 <UART_AdvFeatureConfig+0x2ac>)
 8003632:	0011      	movs	r1, r2
 8003634:	0018      	movs	r0, r3
 8003636:	f7fc ffc7 	bl	80005c8 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4a4f      	ldr	r2, [pc, #316]	@ (8003780 <UART_AdvFeatureConfig+0x2d8>)
 8003642:	4013      	ands	r3, r2
 8003644:	0019      	movs	r1, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003656:	2240      	movs	r2, #64	@ 0x40
 8003658:	4013      	ands	r3, r2
 800365a:	d054      	beq.n	8003706 <UART_AdvFeatureConfig+0x25e>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a48      	ldr	r2, [pc, #288]	@ (8003784 <UART_AdvFeatureConfig+0x2dc>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d005      	beq.n	8003672 <UART_AdvFeatureConfig+0x1ca>
 8003666:	4a48      	ldr	r2, [pc, #288]	@ (8003788 <UART_AdvFeatureConfig+0x2e0>)
 8003668:	4b3a      	ldr	r3, [pc, #232]	@ (8003754 <UART_AdvFeatureConfig+0x2ac>)
 800366a:	0011      	movs	r1, r2
 800366c:	0018      	movs	r0, r3
 800366e:	f7fc ffab 	bl	80005c8 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <UART_AdvFeatureConfig+0x1ea>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800367e:	2380      	movs	r3, #128	@ 0x80
 8003680:	035b      	lsls	r3, r3, #13
 8003682:	429a      	cmp	r2, r3
 8003684:	d005      	beq.n	8003692 <UART_AdvFeatureConfig+0x1ea>
 8003686:	4a41      	ldr	r2, [pc, #260]	@ (800378c <UART_AdvFeatureConfig+0x2e4>)
 8003688:	4b32      	ldr	r3, [pc, #200]	@ (8003754 <UART_AdvFeatureConfig+0x2ac>)
 800368a:	0011      	movs	r1, r2
 800368c:	0018      	movs	r0, r3
 800368e:	f7fc ff9b 	bl	80005c8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	4a3d      	ldr	r2, [pc, #244]	@ (8003790 <UART_AdvFeatureConfig+0x2e8>)
 800369a:	4013      	ands	r3, r2
 800369c:	0019      	movs	r1, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036ae:	2380      	movs	r3, #128	@ 0x80
 80036b0:	035b      	lsls	r3, r3, #13
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d127      	bne.n	8003706 <UART_AdvFeatureConfig+0x25e>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d017      	beq.n	80036ee <UART_AdvFeatureConfig+0x246>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036c2:	2380      	movs	r3, #128	@ 0x80
 80036c4:	039b      	lsls	r3, r3, #14
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d011      	beq.n	80036ee <UART_AdvFeatureConfig+0x246>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036ce:	2380      	movs	r3, #128	@ 0x80
 80036d0:	03db      	lsls	r3, r3, #15
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d00b      	beq.n	80036ee <UART_AdvFeatureConfig+0x246>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036da:	23c0      	movs	r3, #192	@ 0xc0
 80036dc:	03db      	lsls	r3, r3, #15
 80036de:	429a      	cmp	r2, r3
 80036e0:	d005      	beq.n	80036ee <UART_AdvFeatureConfig+0x246>
 80036e2:	4a2c      	ldr	r2, [pc, #176]	@ (8003794 <UART_AdvFeatureConfig+0x2ec>)
 80036e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003754 <UART_AdvFeatureConfig+0x2ac>)
 80036e6:	0011      	movs	r1, r2
 80036e8:	0018      	movs	r0, r3
 80036ea:	f7fc ff6d 	bl	80005c8 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	4a28      	ldr	r2, [pc, #160]	@ (8003798 <UART_AdvFeatureConfig+0x2f0>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	0019      	movs	r1, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370a:	2280      	movs	r2, #128	@ 0x80
 800370c:	4013      	ands	r3, r2
 800370e:	d01b      	beq.n	8003748 <UART_AdvFeatureConfig+0x2a0>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00b      	beq.n	8003730 <UART_AdvFeatureConfig+0x288>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800371c:	2380      	movs	r3, #128	@ 0x80
 800371e:	031b      	lsls	r3, r3, #12
 8003720:	429a      	cmp	r2, r3
 8003722:	d005      	beq.n	8003730 <UART_AdvFeatureConfig+0x288>
 8003724:	4a1d      	ldr	r2, [pc, #116]	@ (800379c <UART_AdvFeatureConfig+0x2f4>)
 8003726:	4b0b      	ldr	r3, [pc, #44]	@ (8003754 <UART_AdvFeatureConfig+0x2ac>)
 8003728:	0011      	movs	r1, r2
 800372a:	0018      	movs	r0, r3
 800372c:	f7fc ff4c 	bl	80005c8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	4a1a      	ldr	r2, [pc, #104]	@ (80037a0 <UART_AdvFeatureConfig+0x2f8>)
 8003738:	4013      	ands	r3, r2
 800373a:	0019      	movs	r1, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	605a      	str	r2, [r3, #4]
  }
}
 8003748:	46c0      	nop			@ (mov r8, r8)
 800374a:	46bd      	mov	sp, r7
 800374c:	b002      	add	sp, #8
 800374e:	bd80      	pop	{r7, pc}
 8003750:	00000c6d 	.word	0x00000c6d
 8003754:	08004cd8 	.word	0x08004cd8
 8003758:	00000c72 	.word	0x00000c72
 800375c:	fffdffff 	.word	0xfffdffff
 8003760:	00000c79 	.word	0x00000c79
 8003764:	fffeffff 	.word	0xfffeffff
 8003768:	fffbffff 	.word	0xfffbffff
 800376c:	00000c87 	.word	0x00000c87
 8003770:	ffff7fff 	.word	0xffff7fff
 8003774:	00000c8e 	.word	0x00000c8e
 8003778:	ffffefff 	.word	0xffffefff
 800377c:	00000c95 	.word	0x00000c95
 8003780:	ffffdfff 	.word	0xffffdfff
 8003784:	40013800 	.word	0x40013800
 8003788:	00000c9c 	.word	0x00000c9c
 800378c:	00000c9d 	.word	0x00000c9d
 8003790:	ffefffff 	.word	0xffefffff
 8003794:	00000ca2 	.word	0x00000ca2
 8003798:	ff9fffff 	.word	0xff9fffff
 800379c:	00000caa 	.word	0x00000caa
 80037a0:	fff7ffff 	.word	0xfff7ffff

080037a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b092      	sub	sp, #72	@ 0x48
 80037a8:	af02      	add	r7, sp, #8
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2284      	movs	r2, #132	@ 0x84
 80037b0:	2100      	movs	r1, #0
 80037b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037b4:	f7fd f8bc 	bl	8000930 <HAL_GetTick>
 80037b8:	0003      	movs	r3, r0
 80037ba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2208      	movs	r2, #8
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d12c      	bne.n	8003824 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037cc:	2280      	movs	r2, #128	@ 0x80
 80037ce:	0391      	lsls	r1, r2, #14
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	4a46      	ldr	r2, [pc, #280]	@ (80038ec <UART_CheckIdleState+0x148>)
 80037d4:	9200      	str	r2, [sp, #0]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f000 f88c 	bl	80038f4 <UART_WaitOnFlagUntilTimeout>
 80037dc:	1e03      	subs	r3, r0, #0
 80037de:	d021      	beq.n	8003824 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e0:	f3ef 8310 	mrs	r3, PRIMASK
 80037e4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80037e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037ea:	2301      	movs	r3, #1
 80037ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f0:	f383 8810 	msr	PRIMASK, r3
}
 80037f4:	46c0      	nop			@ (mov r8, r8)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2180      	movs	r1, #128	@ 0x80
 8003802:	438a      	bics	r2, r1
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003808:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380c:	f383 8810 	msr	PRIMASK, r3
}
 8003810:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2278      	movs	r2, #120	@ 0x78
 800381c:	2100      	movs	r1, #0
 800381e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e05f      	b.n	80038e4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2204      	movs	r2, #4
 800382c:	4013      	ands	r3, r2
 800382e:	2b04      	cmp	r3, #4
 8003830:	d146      	bne.n	80038c0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003834:	2280      	movs	r2, #128	@ 0x80
 8003836:	03d1      	lsls	r1, r2, #15
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	4a2c      	ldr	r2, [pc, #176]	@ (80038ec <UART_CheckIdleState+0x148>)
 800383c:	9200      	str	r2, [sp, #0]
 800383e:	2200      	movs	r2, #0
 8003840:	f000 f858 	bl	80038f4 <UART_WaitOnFlagUntilTimeout>
 8003844:	1e03      	subs	r3, r0, #0
 8003846:	d03b      	beq.n	80038c0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003848:	f3ef 8310 	mrs	r3, PRIMASK
 800384c:	60fb      	str	r3, [r7, #12]
  return(result);
 800384e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003850:	637b      	str	r3, [r7, #52]	@ 0x34
 8003852:	2301      	movs	r3, #1
 8003854:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f383 8810 	msr	PRIMASK, r3
}
 800385c:	46c0      	nop			@ (mov r8, r8)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4921      	ldr	r1, [pc, #132]	@ (80038f0 <UART_CheckIdleState+0x14c>)
 800386a:	400a      	ands	r2, r1
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003870:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f383 8810 	msr	PRIMASK, r3
}
 8003878:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800387a:	f3ef 8310 	mrs	r3, PRIMASK
 800387e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003880:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003882:	633b      	str	r3, [r7, #48]	@ 0x30
 8003884:	2301      	movs	r3, #1
 8003886:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f383 8810 	msr	PRIMASK, r3
}
 800388e:	46c0      	nop			@ (mov r8, r8)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2101      	movs	r1, #1
 800389c:	438a      	bics	r2, r1
 800389e:	609a      	str	r2, [r3, #8]
 80038a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	f383 8810 	msr	PRIMASK, r3
}
 80038aa:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2280      	movs	r2, #128	@ 0x80
 80038b0:	2120      	movs	r1, #32
 80038b2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2278      	movs	r2, #120	@ 0x78
 80038b8:	2100      	movs	r1, #0
 80038ba:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e011      	b.n	80038e4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2280      	movs	r2, #128	@ 0x80
 80038ca:	2120      	movs	r1, #32
 80038cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2278      	movs	r2, #120	@ 0x78
 80038de:	2100      	movs	r1, #0
 80038e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	0018      	movs	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b010      	add	sp, #64	@ 0x40
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	01ffffff 	.word	0x01ffffff
 80038f0:	fffffedf 	.word	0xfffffedf

080038f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	603b      	str	r3, [r7, #0]
 8003900:	1dfb      	adds	r3, r7, #7
 8003902:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003904:	e04b      	b.n	800399e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	3301      	adds	r3, #1
 800390a:	d048      	beq.n	800399e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800390c:	f7fd f810 	bl	8000930 <HAL_GetTick>
 8003910:	0002      	movs	r2, r0
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	429a      	cmp	r2, r3
 800391a:	d302      	bcc.n	8003922 <UART_WaitOnFlagUntilTimeout+0x2e>
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e04b      	b.n	80039be <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2204      	movs	r2, #4
 800392e:	4013      	ands	r3, r2
 8003930:	d035      	beq.n	800399e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	2208      	movs	r2, #8
 800393a:	4013      	ands	r3, r2
 800393c:	2b08      	cmp	r3, #8
 800393e:	d111      	bne.n	8003964 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2208      	movs	r2, #8
 8003946:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	0018      	movs	r0, r3
 800394c:	f000 f83c 	bl	80039c8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2284      	movs	r2, #132	@ 0x84
 8003954:	2108      	movs	r1, #8
 8003956:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2278      	movs	r2, #120	@ 0x78
 800395c:	2100      	movs	r1, #0
 800395e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e02c      	b.n	80039be <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	69da      	ldr	r2, [r3, #28]
 800396a:	2380      	movs	r3, #128	@ 0x80
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	401a      	ands	r2, r3
 8003970:	2380      	movs	r3, #128	@ 0x80
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	429a      	cmp	r2, r3
 8003976:	d112      	bne.n	800399e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2280      	movs	r2, #128	@ 0x80
 800397e:	0112      	lsls	r2, r2, #4
 8003980:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	0018      	movs	r0, r3
 8003986:	f000 f81f 	bl	80039c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2284      	movs	r2, #132	@ 0x84
 800398e:	2120      	movs	r1, #32
 8003990:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2278      	movs	r2, #120	@ 0x78
 8003996:	2100      	movs	r1, #0
 8003998:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e00f      	b.n	80039be <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	4013      	ands	r3, r2
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	425a      	negs	r2, r3
 80039ae:	4153      	adcs	r3, r2
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	001a      	movs	r2, r3
 80039b4:	1dfb      	adds	r3, r7, #7
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d0a4      	beq.n	8003906 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	0018      	movs	r0, r3
 80039c0:	46bd      	mov	sp, r7
 80039c2:	b004      	add	sp, #16
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08e      	sub	sp, #56	@ 0x38
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039d0:	f3ef 8310 	mrs	r3, PRIMASK
 80039d4:	617b      	str	r3, [r7, #20]
  return(result);
 80039d6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80039da:	2301      	movs	r3, #1
 80039dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	f383 8810 	msr	PRIMASK, r3
}
 80039e4:	46c0      	nop			@ (mov r8, r8)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4926      	ldr	r1, [pc, #152]	@ (8003a8c <UART_EndRxTransfer+0xc4>)
 80039f2:	400a      	ands	r2, r1
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f383 8810 	msr	PRIMASK, r3
}
 8003a00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a02:	f3ef 8310 	mrs	r3, PRIMASK
 8003a06:	623b      	str	r3, [r7, #32]
  return(result);
 8003a08:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a12:	f383 8810 	msr	PRIMASK, r3
}
 8003a16:	46c0      	nop			@ (mov r8, r8)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2101      	movs	r1, #1
 8003a24:	438a      	bics	r2, r1
 8003a26:	609a      	str	r2, [r3, #8]
 8003a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a2e:	f383 8810 	msr	PRIMASK, r3
}
 8003a32:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d118      	bne.n	8003a6e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a40:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a42:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a46:	2301      	movs	r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f383 8810 	msr	PRIMASK, r3
}
 8003a50:	46c0      	nop			@ (mov r8, r8)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2110      	movs	r1, #16
 8003a5e:	438a      	bics	r2, r1
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f383 8810 	msr	PRIMASK, r3
}
 8003a6c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2280      	movs	r2, #128	@ 0x80
 8003a72:	2120      	movs	r1, #32
 8003a74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003a82:	46c0      	nop			@ (mov r8, r8)
 8003a84:	46bd      	mov	sp, r7
 8003a86:	b00e      	add	sp, #56	@ 0x38
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	46c0      	nop			@ (mov r8, r8)
 8003a8c:	fffffedf 	.word	0xfffffedf

08003a90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	225a      	movs	r2, #90	@ 0x5a
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2252      	movs	r2, #82	@ 0x52
 8003aaa:	2100      	movs	r1, #0
 8003aac:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f7ff fb13 	bl	80030dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ab6:	46c0      	nop			@ (mov r8, r8)
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	b004      	add	sp, #16
 8003abc:	bd80      	pop	{r7, pc}

08003abe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b086      	sub	sp, #24
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aca:	60bb      	str	r3, [r7, #8]
  return(result);
 8003acc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f383 8810 	msr	PRIMASK, r3
}
 8003ada:	46c0      	nop			@ (mov r8, r8)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2140      	movs	r1, #64	@ 0x40
 8003ae8:	438a      	bics	r2, r1
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f383 8810 	msr	PRIMASK, r3
}
 8003af6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	0018      	movs	r0, r3
 8003b08:	f7ff fae0 	bl	80030cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b0c:	46c0      	nop			@ (mov r8, r8)
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b006      	add	sp, #24
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b1c:	46c0      	nop			@ (mov r8, r8)
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b002      	add	sp, #8
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003b28:	f000 fb86 	bl	8004238 <vTaskStartScheduler>
  
  return osOK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	0018      	movs	r0, r3
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d037      	beq.n	8003bb6 <vPortFree+0x82>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003b46:	2308      	movs	r3, #8
 8003b48:	425b      	negs	r3, r3
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	18d3      	adds	r3, r2, r3
 8003b4e:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	4b19      	ldr	r3, [pc, #100]	@ (8003bc0 <vPortFree+0x8c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	d102      	bne.n	8003b66 <vPortFree+0x32>
 8003b60:	b672      	cpsid	i
 8003b62:	46c0      	nop			@ (mov r8, r8)
 8003b64:	e7fd      	b.n	8003b62 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <vPortFree+0x40>
 8003b6e:	b672      	cpsid	i
 8003b70:	46c0      	nop			@ (mov r8, r8)
 8003b72:	e7fd      	b.n	8003b70 <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	4b11      	ldr	r3, [pc, #68]	@ (8003bc0 <vPortFree+0x8c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	d01a      	beq.n	8003bb6 <vPortFree+0x82>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d116      	bne.n	8003bb6 <vPortFree+0x82>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc0 <vPortFree+0x8c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	43db      	mvns	r3, r3
 8003b92:	401a      	ands	r2, r3
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003b98:	f000 fba6 	bl	80042e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	4b08      	ldr	r3, [pc, #32]	@ (8003bc4 <vPortFree+0x90>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	18d2      	adds	r2, r2, r3
 8003ba6:	4b07      	ldr	r3, [pc, #28]	@ (8003bc4 <vPortFree+0x90>)
 8003ba8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	0018      	movs	r0, r3
 8003bae:	f000 f80b 	bl	8003bc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003bb2:	f000 fba5 	bl	8004300 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003bb6:	46c0      	nop			@ (mov r8, r8)
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	b004      	add	sp, #16
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	46c0      	nop			@ (mov r8, r8)
 8003bc0:	200003d4 	.word	0x200003d4
 8003bc4:	200003d0 	.word	0x200003d0

08003bc8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003bd0:	4b27      	ldr	r3, [pc, #156]	@ (8003c70 <prvInsertBlockIntoFreeList+0xa8>)
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	e002      	b.n	8003bdc <prvInsertBlockIntoFreeList+0x14>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d8f7      	bhi.n	8003bd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	18d3      	adds	r3, r2, r3
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d108      	bne.n	8003c0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	18d2      	adds	r2, r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	18d2      	adds	r2, r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d118      	bne.n	8003c50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	4b14      	ldr	r3, [pc, #80]	@ (8003c74 <prvInsertBlockIntoFreeList+0xac>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d00d      	beq.n	8003c46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	18d2      	adds	r2, r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	e008      	b.n	8003c58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003c46:	4b0b      	ldr	r3, [pc, #44]	@ (8003c74 <prvInsertBlockIntoFreeList+0xac>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	e003      	b.n	8003c58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d002      	beq.n	8003c66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c66:	46c0      	nop			@ (mov r8, r8)
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b004      	add	sp, #16
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	46c0      	nop			@ (mov r8, r8)
 8003c70:	200003c4 	.word	0x200003c4
 8003c74:	200003cc 	.word	0x200003cc

08003c78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3308      	adds	r3, #8
 8003c84:	001a      	movs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	4252      	negs	r2, r2
 8003c90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3308      	adds	r3, #8
 8003c96:	001a      	movs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3308      	adds	r3, #8
 8003ca0:	001a      	movs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003cac:	46c0      	nop			@ (mov r8, r8)
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b002      	add	sp, #8
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003cc2:	46c0      	nop			@ (mov r8, r8)
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	b002      	add	sp, #8
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b084      	sub	sp, #16
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	601a      	str	r2, [r3, #0]
}
 8003d06:	46c0      	nop			@ (mov r8, r8)
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b004      	add	sp, #16
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6892      	ldr	r2, [r2, #8]
 8003d24:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6852      	ldr	r2, [r2, #4]
 8003d2e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d103      	bne.n	8003d42 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	1e5a      	subs	r2, r3, #1
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
}
 8003d56:	0018      	movs	r0, r3
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b004      	add	sp, #16
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3b04      	subs	r3, #4
 8003d70:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2280      	movs	r2, #128	@ 0x80
 8003d76:	0452      	lsls	r2, r2, #17
 8003d78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3b04      	subs	r3, #4
 8003d7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	3b04      	subs	r3, #4
 8003d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d8c:	4a08      	ldr	r2, [pc, #32]	@ (8003db0 <pxPortInitialiseStack+0x50>)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	3b14      	subs	r3, #20
 8003d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	3b20      	subs	r3, #32
 8003da2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003da4:	68fb      	ldr	r3, [r7, #12]
}
 8003da6:	0018      	movs	r0, r3
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b004      	add	sp, #16
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	46c0      	nop			@ (mov r8, r8)
 8003db0:	08003db5 	.word	0x08003db5

08003db4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003dbe:	4b08      	ldr	r3, [pc, #32]	@ (8003de0 <prvTaskExitError+0x2c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	d002      	beq.n	8003dcc <prvTaskExitError+0x18>
 8003dc6:	b672      	cpsid	i
 8003dc8:	46c0      	nop			@ (mov r8, r8)
 8003dca:	e7fd      	b.n	8003dc8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8003dcc:	b672      	cpsid	i
	while( ulDummy == 0 )
 8003dce:	46c0      	nop			@ (mov r8, r8)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0fc      	beq.n	8003dd0 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003dd6:	46c0      	nop			@ (mov r8, r8)
 8003dd8:	46c0      	nop			@ (mov r8, r8)
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b002      	add	sp, #8
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	2000000c 	.word	0x2000000c

08003de4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8003de8:	46c0      	nop			@ (mov r8, r8)
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003df0:	4a0b      	ldr	r2, [pc, #44]	@ (8003e20 <pxCurrentTCBConst2>)
 8003df2:	6813      	ldr	r3, [r2, #0]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	3020      	adds	r0, #32
 8003df8:	f380 8809 	msr	PSP, r0
 8003dfc:	2002      	movs	r0, #2
 8003dfe:	f380 8814 	msr	CONTROL, r0
 8003e02:	f3bf 8f6f 	isb	sy
 8003e06:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003e08:	46ae      	mov	lr, r5
 8003e0a:	bc08      	pop	{r3}
 8003e0c:	bc04      	pop	{r2}
 8003e0e:	b662      	cpsie	i
 8003e10:	4718      	bx	r3
 8003e12:	46c0      	nop			@ (mov r8, r8)
 8003e14:	46c0      	nop			@ (mov r8, r8)
 8003e16:	46c0      	nop			@ (mov r8, r8)
 8003e18:	46c0      	nop			@ (mov r8, r8)
 8003e1a:	46c0      	nop			@ (mov r8, r8)
 8003e1c:	46c0      	nop			@ (mov r8, r8)
 8003e1e:	46c0      	nop			@ (mov r8, r8)

08003e20 <pxCurrentTCBConst2>:
 8003e20:	200003d8 	.word	0x200003d8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8003e24:	46c0      	nop			@ (mov r8, r8)
 8003e26:	46c0      	nop			@ (mov r8, r8)

08003e28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8003e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8003e68 <xPortStartScheduler+0x40>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4b0d      	ldr	r3, [pc, #52]	@ (8003e68 <xPortStartScheduler+0x40>)
 8003e32:	21ff      	movs	r1, #255	@ 0xff
 8003e34:	0409      	lsls	r1, r1, #16
 8003e36:	430a      	orrs	r2, r1
 8003e38:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e68 <xPortStartScheduler+0x40>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e68 <xPortStartScheduler+0x40>)
 8003e40:	21ff      	movs	r1, #255	@ 0xff
 8003e42:	0609      	lsls	r1, r1, #24
 8003e44:	430a      	orrs	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8003e48:	f000 f898 	bl	8003f7c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003e4c:	4b07      	ldr	r3, [pc, #28]	@ (8003e6c <xPortStartScheduler+0x44>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8003e52:	f7ff ffcd 	bl	8003df0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003e56:	f000 fb95 	bl	8004584 <vTaskSwitchContext>
	prvTaskExitError();
 8003e5a:	f7ff ffab 	bl	8003db4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	0018      	movs	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	46c0      	nop			@ (mov r8, r8)
 8003e68:	e000ed20 	.word	0xe000ed20
 8003e6c:	2000000c 	.word	0x2000000c

08003e70 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003e74:	4b05      	ldr	r3, [pc, #20]	@ (8003e8c <vPortYield+0x1c>)
 8003e76:	2280      	movs	r2, #128	@ 0x80
 8003e78:	0552      	lsls	r2, r2, #21
 8003e7a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8003e7c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003e80:	f3bf 8f6f 	isb	sy
}
 8003e84:	46c0      	nop			@ (mov r8, r8)
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	46c0      	nop			@ (mov r8, r8)
 8003e8c:	e000ed04 	.word	0xe000ed04

08003e90 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003e94:	b672      	cpsid	i
    uxCriticalNesting++;
 8003e96:	4b06      	ldr	r3, [pc, #24]	@ (8003eb0 <vPortEnterCritical+0x20>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	4b04      	ldr	r3, [pc, #16]	@ (8003eb0 <vPortEnterCritical+0x20>)
 8003e9e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8003ea0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003ea4:	f3bf 8f6f 	isb	sy
}
 8003ea8:	46c0      	nop			@ (mov r8, r8)
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	46c0      	nop			@ (mov r8, r8)
 8003eb0:	2000000c 	.word	0x2000000c

08003eb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003eb8:	4b09      	ldr	r3, [pc, #36]	@ (8003ee0 <vPortExitCritical+0x2c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d102      	bne.n	8003ec6 <vPortExitCritical+0x12>
 8003ec0:	b672      	cpsid	i
 8003ec2:	46c0      	nop			@ (mov r8, r8)
 8003ec4:	e7fd      	b.n	8003ec2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003ec6:	4b06      	ldr	r3, [pc, #24]	@ (8003ee0 <vPortExitCritical+0x2c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	1e5a      	subs	r2, r3, #1
 8003ecc:	4b04      	ldr	r3, [pc, #16]	@ (8003ee0 <vPortExitCritical+0x2c>)
 8003ece:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8003ed0:	4b03      	ldr	r3, [pc, #12]	@ (8003ee0 <vPortExitCritical+0x2c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d100      	bne.n	8003eda <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8003ed8:	b662      	cpsie	i
    }
}
 8003eda:	46c0      	nop			@ (mov r8, r8)
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	2000000c 	.word	0x2000000c

08003ee4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8003ee4:	f3ef 8010 	mrs	r0, PRIMASK
 8003ee8:	b672      	cpsid	i
 8003eea:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8003eec:	46c0      	nop			@ (mov r8, r8)
 8003eee:	0018      	movs	r0, r3

08003ef0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8003ef0:	f380 8810 	msr	PRIMASK, r0
 8003ef4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8003ef6:	46c0      	nop			@ (mov r8, r8)
	...

08003f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f00:	f3ef 8009 	mrs	r0, PSP
 8003f04:	4b0e      	ldr	r3, [pc, #56]	@ (8003f40 <pxCurrentTCBConst>)
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	3820      	subs	r0, #32
 8003f0a:	6010      	str	r0, [r2, #0]
 8003f0c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003f0e:	4644      	mov	r4, r8
 8003f10:	464d      	mov	r5, r9
 8003f12:	4656      	mov	r6, sl
 8003f14:	465f      	mov	r7, fp
 8003f16:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003f18:	b508      	push	{r3, lr}
 8003f1a:	b672      	cpsid	i
 8003f1c:	f000 fb32 	bl	8004584 <vTaskSwitchContext>
 8003f20:	b662      	cpsie	i
 8003f22:	bc0c      	pop	{r2, r3}
 8003f24:	6811      	ldr	r1, [r2, #0]
 8003f26:	6808      	ldr	r0, [r1, #0]
 8003f28:	3010      	adds	r0, #16
 8003f2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003f2c:	46a0      	mov	r8, r4
 8003f2e:	46a9      	mov	r9, r5
 8003f30:	46b2      	mov	sl, r6
 8003f32:	46bb      	mov	fp, r7
 8003f34:	f380 8809 	msr	PSP, r0
 8003f38:	3820      	subs	r0, #32
 8003f3a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003f3c:	4718      	bx	r3
 8003f3e:	46c0      	nop			@ (mov r8, r8)

08003f40 <pxCurrentTCBConst>:
 8003f40:	200003d8 	.word	0x200003d8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8003f44:	46c0      	nop			@ (mov r8, r8)
 8003f46:	46c0      	nop			@ (mov r8, r8)

08003f48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f4e:	f7ff ffc9 	bl	8003ee4 <ulSetInterruptMaskFromISR>
 8003f52:	0003      	movs	r3, r0
 8003f54:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003f56:	f000 fa5f 	bl	8004418 <xTaskIncrementTick>
 8003f5a:	1e03      	subs	r3, r0, #0
 8003f5c:	d003      	beq.n	8003f66 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8003f5e:	4b06      	ldr	r3, [pc, #24]	@ (8003f78 <SysTick_Handler+0x30>)
 8003f60:	2280      	movs	r2, #128	@ 0x80
 8003f62:	0552      	lsls	r2, r2, #21
 8003f64:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f7ff ffc1 	bl	8003ef0 <vClearInterruptMaskFromISR>
}
 8003f6e:	46c0      	nop			@ (mov r8, r8)
 8003f70:	46bd      	mov	sp, r7
 8003f72:	b002      	add	sp, #8
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	46c0      	nop			@ (mov r8, r8)
 8003f78:	e000ed04 	.word	0xe000ed04

08003f7c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8003f80:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb0 <prvSetupTimerInterrupt+0x34>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8003f86:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb4 <prvSetupTimerInterrupt+0x38>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb8 <prvSetupTimerInterrupt+0x3c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	22fa      	movs	r2, #250	@ 0xfa
 8003f92:	0091      	lsls	r1, r2, #2
 8003f94:	0018      	movs	r0, r3
 8003f96:	f7fc f8b7 	bl	8000108 <__udivsi3>
 8003f9a:	0003      	movs	r3, r0
 8003f9c:	001a      	movs	r2, r3
 8003f9e:	4b07      	ldr	r3, [pc, #28]	@ (8003fbc <prvSetupTimerInterrupt+0x40>)
 8003fa0:	3a01      	subs	r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003fa4:	4b02      	ldr	r3, [pc, #8]	@ (8003fb0 <prvSetupTimerInterrupt+0x34>)
 8003fa6:	2207      	movs	r2, #7
 8003fa8:	601a      	str	r2, [r3, #0]
}
 8003faa:	46c0      	nop			@ (mov r8, r8)
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	e000e010 	.word	0xe000e010
 8003fb4:	e000e018 	.word	0xe000e018
 8003fb8:	20000000 	.word	0x20000000
 8003fbc:	e000e014 	.word	0xe000e014

08003fc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003fc0:	b590      	push	{r4, r7, lr}
 8003fc2:	b08d      	sub	sp, #52	@ 0x34
 8003fc4:	af04      	add	r7, sp, #16
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d102      	bne.n	8003fda <xTaskCreateStatic+0x1a>
 8003fd4:	b672      	cpsid	i
 8003fd6:	46c0      	nop			@ (mov r8, r8)
 8003fd8:	e7fd      	b.n	8003fd6 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8003fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d102      	bne.n	8003fe6 <xTaskCreateStatic+0x26>
 8003fe0:	b672      	cpsid	i
 8003fe2:	46c0      	nop			@ (mov r8, r8)
 8003fe4:	e7fd      	b.n	8003fe2 <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fe6:	23a0      	movs	r3, #160	@ 0xa0
 8003fe8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2ba0      	cmp	r3, #160	@ 0xa0
 8003fee:	d002      	beq.n	8003ff6 <xTaskCreateStatic+0x36>
 8003ff0:	b672      	cpsid	i
 8003ff2:	46c0      	nop			@ (mov r8, r8)
 8003ff4:	e7fd      	b.n	8003ff2 <xTaskCreateStatic+0x32>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d020      	beq.n	800403e <xTaskCreateStatic+0x7e>
 8003ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d01d      	beq.n	800403e <xTaskCreateStatic+0x7e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004004:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800400a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	229d      	movs	r2, #157	@ 0x9d
 8004010:	2102      	movs	r1, #2
 8004012:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004014:	683c      	ldr	r4, [r7, #0]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	68b9      	ldr	r1, [r7, #8]
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	2300      	movs	r3, #0
 800401e:	9303      	str	r3, [sp, #12]
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	9302      	str	r3, [sp, #8]
 8004024:	2318      	movs	r3, #24
 8004026:	18fb      	adds	r3, r7, r3
 8004028:	9301      	str	r3, [sp, #4]
 800402a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	0023      	movs	r3, r4
 8004030:	f000 f80c 	bl	800404c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	0018      	movs	r0, r3
 8004038:	f000 f89a 	bl	8004170 <prvAddNewTaskToReadyList>
 800403c:	e001      	b.n	8004042 <xTaskCreateStatic+0x82>
		}
		else
		{
			xReturn = NULL;
 800403e:	2300      	movs	r3, #0
 8004040:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004042:	69bb      	ldr	r3, [r7, #24]
	}
 8004044:	0018      	movs	r0, r3
 8004046:	46bd      	mov	sp, r7
 8004048:	b009      	add	sp, #36	@ 0x24
 800404a:	bd90      	pop	{r4, r7, pc}

0800404c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800405a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	493f      	ldr	r1, [pc, #252]	@ (8004160 <prvInitialiseNewTask+0x114>)
 8004062:	468c      	mov	ip, r1
 8004064:	4463      	add	r3, ip
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	18d3      	adds	r3, r2, r3
 800406a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	2207      	movs	r2, #7
 8004070:	4393      	bics	r3, r2
 8004072:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	2207      	movs	r2, #7
 8004078:	4013      	ands	r3, r2
 800407a:	d002      	beq.n	8004082 <prvInitialiseNewTask+0x36>
 800407c:	b672      	cpsid	i
 800407e:	46c0      	nop			@ (mov r8, r8)
 8004080:	e7fd      	b.n	800407e <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	e013      	b.n	80040b0 <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	18d3      	adds	r3, r2, r3
 800408e:	7818      	ldrb	r0, [r3, #0]
 8004090:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004092:	2134      	movs	r1, #52	@ 0x34
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	18d3      	adds	r3, r2, r3
 8004098:	185b      	adds	r3, r3, r1
 800409a:	1c02      	adds	r2, r0, #0
 800409c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	18d3      	adds	r3, r2, r3
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d006      	beq.n	80040b8 <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	3301      	adds	r3, #1
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2b0f      	cmp	r3, #15
 80040b4:	d9e8      	bls.n	8004088 <prvInitialiseNewTask+0x3c>
 80040b6:	e000      	b.n	80040ba <prvInitialiseNewTask+0x6e>
		{
			break;
 80040b8:	46c0      	nop			@ (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040bc:	2243      	movs	r2, #67	@ 0x43
 80040be:	2100      	movs	r1, #0
 80040c0:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	2b06      	cmp	r3, #6
 80040c6:	d901      	bls.n	80040cc <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040c8:	2306      	movs	r3, #6
 80040ca:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ce:	6a3a      	ldr	r2, [r7, #32]
 80040d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d4:	6a3a      	ldr	r2, [r7, #32]
 80040d6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80040d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040da:	2200      	movs	r2, #0
 80040dc:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e0:	3304      	adds	r3, #4
 80040e2:	0018      	movs	r0, r3
 80040e4:	f7ff fde6 	bl	8003cb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ea:	3318      	adds	r3, #24
 80040ec:	0018      	movs	r0, r3
 80040ee:	f7ff fde1 	bl	8003cb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	2207      	movs	r2, #7
 80040fc:	1ad2      	subs	r2, r2, r3
 80040fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004100:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004104:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004106:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410a:	2298      	movs	r2, #152	@ 0x98
 800410c:	2100      	movs	r1, #0
 800410e:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004112:	229c      	movs	r2, #156	@ 0x9c
 8004114:	2100      	movs	r1, #0
 8004116:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411a:	334c      	adds	r3, #76	@ 0x4c
 800411c:	224c      	movs	r2, #76	@ 0x4c
 800411e:	2100      	movs	r1, #0
 8004120:	0018      	movs	r0, r3
 8004122:	f000 fb5d 	bl	80047e0 <memset>
 8004126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004128:	4a0e      	ldr	r2, [pc, #56]	@ (8004164 <prvInitialiseNewTask+0x118>)
 800412a:	651a      	str	r2, [r3, #80]	@ 0x50
 800412c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800412e:	4a0e      	ldr	r2, [pc, #56]	@ (8004168 <prvInitialiseNewTask+0x11c>)
 8004130:	655a      	str	r2, [r3, #84]	@ 0x54
 8004132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004134:	4a0d      	ldr	r2, [pc, #52]	@ (800416c <prvInitialiseNewTask+0x120>)
 8004136:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	68f9      	ldr	r1, [r7, #12]
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	0018      	movs	r0, r3
 8004140:	f7ff fe0e 	bl	8003d60 <pxPortInitialiseStack>
 8004144:	0002      	movs	r2, r0
 8004146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004148:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004152:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004156:	46c0      	nop			@ (mov r8, r8)
 8004158:	46bd      	mov	sp, r7
 800415a:	b006      	add	sp, #24
 800415c:	bd80      	pop	{r7, pc}
 800415e:	46c0      	nop			@ (mov r8, r8)
 8004160:	3fffffff 	.word	0x3fffffff
 8004164:	20000504 	.word	0x20000504
 8004168:	2000056c 	.word	0x2000056c
 800416c:	200005d4 	.word	0x200005d4

08004170 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004178:	f7ff fe8a 	bl	8003e90 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800417c:	4b28      	ldr	r3, [pc, #160]	@ (8004220 <prvAddNewTaskToReadyList+0xb0>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	4b27      	ldr	r3, [pc, #156]	@ (8004220 <prvAddNewTaskToReadyList+0xb0>)
 8004184:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004186:	4b27      	ldr	r3, [pc, #156]	@ (8004224 <prvAddNewTaskToReadyList+0xb4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800418e:	4b25      	ldr	r3, [pc, #148]	@ (8004224 <prvAddNewTaskToReadyList+0xb4>)
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004194:	4b22      	ldr	r3, [pc, #136]	@ (8004220 <prvAddNewTaskToReadyList+0xb0>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d110      	bne.n	80041be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800419c:	f000 fa5c 	bl	8004658 <prvInitialiseTaskLists>
 80041a0:	e00d      	b.n	80041be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80041a2:	4b21      	ldr	r3, [pc, #132]	@ (8004228 <prvAddNewTaskToReadyList+0xb8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d109      	bne.n	80041be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004224 <prvAddNewTaskToReadyList+0xb4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d802      	bhi.n	80041be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80041b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004224 <prvAddNewTaskToReadyList+0xb4>)
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80041be:	4b1b      	ldr	r3, [pc, #108]	@ (800422c <prvAddNewTaskToReadyList+0xbc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	4b19      	ldr	r3, [pc, #100]	@ (800422c <prvAddNewTaskToReadyList+0xbc>)
 80041c6:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041cc:	4b18      	ldr	r3, [pc, #96]	@ (8004230 <prvAddNewTaskToReadyList+0xc0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d903      	bls.n	80041dc <prvAddNewTaskToReadyList+0x6c>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d8:	4b15      	ldr	r3, [pc, #84]	@ (8004230 <prvAddNewTaskToReadyList+0xc0>)
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041e0:	0013      	movs	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	189b      	adds	r3, r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4a12      	ldr	r2, [pc, #72]	@ (8004234 <prvAddNewTaskToReadyList+0xc4>)
 80041ea:	189a      	adds	r2, r3, r2
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3304      	adds	r3, #4
 80041f0:	0019      	movs	r1, r3
 80041f2:	0010      	movs	r0, r2
 80041f4:	f7ff fd69 	bl	8003cca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041f8:	f7ff fe5c 	bl	8003eb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004228 <prvAddNewTaskToReadyList+0xb8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004204:	4b07      	ldr	r3, [pc, #28]	@ (8004224 <prvAddNewTaskToReadyList+0xb4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420e:	429a      	cmp	r2, r3
 8004210:	d201      	bcs.n	8004216 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004212:	f7ff fe2d 	bl	8003e70 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004216:	46c0      	nop			@ (mov r8, r8)
 8004218:	46bd      	mov	sp, r7
 800421a:	b002      	add	sp, #8
 800421c:	bd80      	pop	{r7, pc}
 800421e:	46c0      	nop			@ (mov r8, r8)
 8004220:	200004d8 	.word	0x200004d8
 8004224:	200003d8 	.word	0x200003d8
 8004228:	200004e4 	.word	0x200004e4
 800422c:	200004f4 	.word	0x200004f4
 8004230:	200004e0 	.word	0x200004e0
 8004234:	200003dc 	.word	0x200003dc

08004238 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004238:	b590      	push	{r4, r7, lr}
 800423a:	b089      	sub	sp, #36	@ 0x24
 800423c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800423e:	2300      	movs	r3, #0
 8004240:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004242:	2300      	movs	r3, #0
 8004244:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004246:	003a      	movs	r2, r7
 8004248:	1d39      	adds	r1, r7, #4
 800424a:	2308      	movs	r3, #8
 800424c:	18fb      	adds	r3, r7, r3
 800424e:	0018      	movs	r0, r3
 8004250:	f7fb ffe6 	bl	8000220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004254:	683c      	ldr	r4, [r7, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	491b      	ldr	r1, [pc, #108]	@ (80042c8 <vTaskStartScheduler+0x90>)
 800425c:	481b      	ldr	r0, [pc, #108]	@ (80042cc <vTaskStartScheduler+0x94>)
 800425e:	9202      	str	r2, [sp, #8]
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	2300      	movs	r3, #0
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	2300      	movs	r3, #0
 8004268:	0022      	movs	r2, r4
 800426a:	f7ff fea9 	bl	8003fc0 <xTaskCreateStatic>
 800426e:	0002      	movs	r2, r0
 8004270:	4b17      	ldr	r3, [pc, #92]	@ (80042d0 <vTaskStartScheduler+0x98>)
 8004272:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004274:	4b16      	ldr	r3, [pc, #88]	@ (80042d0 <vTaskStartScheduler+0x98>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800427c:	2301      	movs	r3, #1
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	e001      	b.n	8004286 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d113      	bne.n	80042b4 <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800428c:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800428e:	4b11      	ldr	r3, [pc, #68]	@ (80042d4 <vTaskStartScheduler+0x9c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	334c      	adds	r3, #76	@ 0x4c
 8004294:	001a      	movs	r2, r3
 8004296:	4b10      	ldr	r3, [pc, #64]	@ (80042d8 <vTaskStartScheduler+0xa0>)
 8004298:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800429a:	4b10      	ldr	r3, [pc, #64]	@ (80042dc <vTaskStartScheduler+0xa4>)
 800429c:	2201      	movs	r2, #1
 800429e:	4252      	negs	r2, r2
 80042a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042a2:	4b0f      	ldr	r3, [pc, #60]	@ (80042e0 <vTaskStartScheduler+0xa8>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80042a8:	4b0e      	ldr	r3, [pc, #56]	@ (80042e4 <vTaskStartScheduler+0xac>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042ae:	f7ff fdbb 	bl	8003e28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042b2:	e005      	b.n	80042c0 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	3301      	adds	r3, #1
 80042b8:	d102      	bne.n	80042c0 <vTaskStartScheduler+0x88>
 80042ba:	b672      	cpsid	i
 80042bc:	46c0      	nop			@ (mov r8, r8)
 80042be:	e7fd      	b.n	80042bc <vTaskStartScheduler+0x84>
}
 80042c0:	46c0      	nop			@ (mov r8, r8)
 80042c2:	46bd      	mov	sp, r7
 80042c4:	b005      	add	sp, #20
 80042c6:	bd90      	pop	{r4, r7, pc}
 80042c8:	08004d48 	.word	0x08004d48
 80042cc:	08004639 	.word	0x08004639
 80042d0:	200004fc 	.word	0x200004fc
 80042d4:	200003d8 	.word	0x200003d8
 80042d8:	20000010 	.word	0x20000010
 80042dc:	200004f8 	.word	0x200004f8
 80042e0:	200004e4 	.word	0x200004e4
 80042e4:	200004dc 	.word	0x200004dc

080042e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80042ec:	4b03      	ldr	r3, [pc, #12]	@ (80042fc <vTaskSuspendAll+0x14>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	4b02      	ldr	r3, [pc, #8]	@ (80042fc <vTaskSuspendAll+0x14>)
 80042f4:	601a      	str	r2, [r3, #0]
}
 80042f6:	46c0      	nop			@ (mov r8, r8)
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	20000500 	.word	0x20000500

08004300 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800430a:	2300      	movs	r3, #0
 800430c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800430e:	4b3a      	ldr	r3, [pc, #232]	@ (80043f8 <xTaskResumeAll+0xf8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d102      	bne.n	800431c <xTaskResumeAll+0x1c>
 8004316:	b672      	cpsid	i
 8004318:	46c0      	nop			@ (mov r8, r8)
 800431a:	e7fd      	b.n	8004318 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800431c:	f7ff fdb8 	bl	8003e90 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004320:	4b35      	ldr	r3, [pc, #212]	@ (80043f8 <xTaskResumeAll+0xf8>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	1e5a      	subs	r2, r3, #1
 8004326:	4b34      	ldr	r3, [pc, #208]	@ (80043f8 <xTaskResumeAll+0xf8>)
 8004328:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800432a:	4b33      	ldr	r3, [pc, #204]	@ (80043f8 <xTaskResumeAll+0xf8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d15b      	bne.n	80043ea <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004332:	4b32      	ldr	r3, [pc, #200]	@ (80043fc <xTaskResumeAll+0xfc>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d057      	beq.n	80043ea <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800433a:	e02f      	b.n	800439c <xTaskResumeAll+0x9c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800433c:	4b30      	ldr	r3, [pc, #192]	@ (8004400 <xTaskResumeAll+0x100>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	3318      	adds	r3, #24
 8004348:	0018      	movs	r0, r3
 800434a:	f7ff fce0 	bl	8003d0e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	3304      	adds	r3, #4
 8004352:	0018      	movs	r0, r3
 8004354:	f7ff fcdb 	bl	8003d0e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800435c:	4b29      	ldr	r3, [pc, #164]	@ (8004404 <xTaskResumeAll+0x104>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d903      	bls.n	800436c <xTaskResumeAll+0x6c>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004368:	4b26      	ldr	r3, [pc, #152]	@ (8004404 <xTaskResumeAll+0x104>)
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004370:	0013      	movs	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	189b      	adds	r3, r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4a23      	ldr	r2, [pc, #140]	@ (8004408 <xTaskResumeAll+0x108>)
 800437a:	189a      	adds	r2, r3, r2
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3304      	adds	r3, #4
 8004380:	0019      	movs	r1, r3
 8004382:	0010      	movs	r0, r2
 8004384:	f7ff fca1 	bl	8003cca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800438c:	4b1f      	ldr	r3, [pc, #124]	@ (800440c <xTaskResumeAll+0x10c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004392:	429a      	cmp	r2, r3
 8004394:	d302      	bcc.n	800439c <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8004396:	4b1e      	ldr	r3, [pc, #120]	@ (8004410 <xTaskResumeAll+0x110>)
 8004398:	2201      	movs	r2, #1
 800439a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800439c:	4b18      	ldr	r3, [pc, #96]	@ (8004400 <xTaskResumeAll+0x100>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1cb      	bne.n	800433c <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043aa:	f000 f9f5 	bl	8004798 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80043ae:	4b19      	ldr	r3, [pc, #100]	@ (8004414 <xTaskResumeAll+0x114>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00f      	beq.n	80043da <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043ba:	f000 f82d 	bl	8004418 <xTaskIncrementTick>
 80043be:	1e03      	subs	r3, r0, #0
 80043c0:	d002      	beq.n	80043c8 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 80043c2:	4b13      	ldr	r3, [pc, #76]	@ (8004410 <xTaskResumeAll+0x110>)
 80043c4:	2201      	movs	r2, #1
 80043c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1f2      	bne.n	80043ba <xTaskResumeAll+0xba>

						uxPendedTicks = 0;
 80043d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004414 <xTaskResumeAll+0x114>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043da:	4b0d      	ldr	r3, [pc, #52]	@ (8004410 <xTaskResumeAll+0x110>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80043e2:	2301      	movs	r3, #1
 80043e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80043e6:	f7ff fd43 	bl	8003e70 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043ea:	f7ff fd63 	bl	8003eb4 <vPortExitCritical>

	return xAlreadyYielded;
 80043ee:	68bb      	ldr	r3, [r7, #8]
}
 80043f0:	0018      	movs	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b004      	add	sp, #16
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	20000500 	.word	0x20000500
 80043fc:	200004d8 	.word	0x200004d8
 8004400:	20000498 	.word	0x20000498
 8004404:	200004e0 	.word	0x200004e0
 8004408:	200003dc 	.word	0x200003dc
 800440c:	200003d8 	.word	0x200003d8
 8004410:	200004ec 	.word	0x200004ec
 8004414:	200004e8 	.word	0x200004e8

08004418 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800441e:	2300      	movs	r3, #0
 8004420:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004422:	4b4d      	ldr	r3, [pc, #308]	@ (8004558 <xTaskIncrementTick+0x140>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d000      	beq.n	800442c <xTaskIncrementTick+0x14>
 800442a:	e084      	b.n	8004536 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800442c:	4b4b      	ldr	r3, [pc, #300]	@ (800455c <xTaskIncrementTick+0x144>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3301      	adds	r3, #1
 8004432:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004434:	4b49      	ldr	r3, [pc, #292]	@ (800455c <xTaskIncrementTick+0x144>)
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d118      	bne.n	8004472 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004440:	4b47      	ldr	r3, [pc, #284]	@ (8004560 <xTaskIncrementTick+0x148>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <xTaskIncrementTick+0x38>
 800444a:	b672      	cpsid	i
 800444c:	46c0      	nop			@ (mov r8, r8)
 800444e:	e7fd      	b.n	800444c <xTaskIncrementTick+0x34>
 8004450:	4b43      	ldr	r3, [pc, #268]	@ (8004560 <xTaskIncrementTick+0x148>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	4b43      	ldr	r3, [pc, #268]	@ (8004564 <xTaskIncrementTick+0x14c>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4b41      	ldr	r3, [pc, #260]	@ (8004560 <xTaskIncrementTick+0x148>)
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	4b41      	ldr	r3, [pc, #260]	@ (8004564 <xTaskIncrementTick+0x14c>)
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	4b40      	ldr	r3, [pc, #256]	@ (8004568 <xTaskIncrementTick+0x150>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	4b3f      	ldr	r3, [pc, #252]	@ (8004568 <xTaskIncrementTick+0x150>)
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	f000 f993 	bl	8004798 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004472:	4b3e      	ldr	r3, [pc, #248]	@ (800456c <xTaskIncrementTick+0x154>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	429a      	cmp	r2, r3
 800447a:	d34e      	bcc.n	800451a <xTaskIncrementTick+0x102>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800447c:	4b38      	ldr	r3, [pc, #224]	@ (8004560 <xTaskIncrementTick+0x148>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <xTaskIncrementTick+0x72>
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <xTaskIncrementTick+0x74>
 800448a:	2300      	movs	r3, #0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d004      	beq.n	800449a <xTaskIncrementTick+0x82>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004490:	4b36      	ldr	r3, [pc, #216]	@ (800456c <xTaskIncrementTick+0x154>)
 8004492:	2201      	movs	r2, #1
 8004494:	4252      	negs	r2, r2
 8004496:	601a      	str	r2, [r3, #0]
					break;
 8004498:	e03f      	b.n	800451a <xTaskIncrementTick+0x102>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800449a:	4b31      	ldr	r3, [pc, #196]	@ (8004560 <xTaskIncrementTick+0x148>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d203      	bcs.n	80044ba <xTaskIncrementTick+0xa2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044b2:	4b2e      	ldr	r3, [pc, #184]	@ (800456c <xTaskIncrementTick+0x154>)
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	601a      	str	r2, [r3, #0]
						break;
 80044b8:	e02f      	b.n	800451a <xTaskIncrementTick+0x102>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	3304      	adds	r3, #4
 80044be:	0018      	movs	r0, r3
 80044c0:	f7ff fc25 	bl	8003d0e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d004      	beq.n	80044d6 <xTaskIncrementTick+0xbe>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	3318      	adds	r3, #24
 80044d0:	0018      	movs	r0, r3
 80044d2:	f7ff fc1c 	bl	8003d0e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044da:	4b25      	ldr	r3, [pc, #148]	@ (8004570 <xTaskIncrementTick+0x158>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d903      	bls.n	80044ea <xTaskIncrementTick+0xd2>
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044e6:	4b22      	ldr	r3, [pc, #136]	@ (8004570 <xTaskIncrementTick+0x158>)
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ee:	0013      	movs	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	189b      	adds	r3, r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004574 <xTaskIncrementTick+0x15c>)
 80044f8:	189a      	adds	r2, r3, r2
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	3304      	adds	r3, #4
 80044fe:	0019      	movs	r1, r3
 8004500:	0010      	movs	r0, r2
 8004502:	f7ff fbe2 	bl	8003cca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800450a:	4b1b      	ldr	r3, [pc, #108]	@ (8004578 <xTaskIncrementTick+0x160>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004510:	429a      	cmp	r2, r3
 8004512:	d3b3      	bcc.n	800447c <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8004514:	2301      	movs	r3, #1
 8004516:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004518:	e7b0      	b.n	800447c <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800451a:	4b17      	ldr	r3, [pc, #92]	@ (8004578 <xTaskIncrementTick+0x160>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004520:	4914      	ldr	r1, [pc, #80]	@ (8004574 <xTaskIncrementTick+0x15c>)
 8004522:	0013      	movs	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	189b      	adds	r3, r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	585b      	ldr	r3, [r3, r1]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d907      	bls.n	8004540 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8004530:	2301      	movs	r3, #1
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	e004      	b.n	8004540 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004536:	4b11      	ldr	r3, [pc, #68]	@ (800457c <xTaskIncrementTick+0x164>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	4b0f      	ldr	r3, [pc, #60]	@ (800457c <xTaskIncrementTick+0x164>)
 800453e:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004540:	4b0f      	ldr	r3, [pc, #60]	@ (8004580 <xTaskIncrementTick+0x168>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <xTaskIncrementTick+0x134>
		{
			xSwitchRequired = pdTRUE;
 8004548:	2301      	movs	r3, #1
 800454a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800454c:	697b      	ldr	r3, [r7, #20]
}
 800454e:	0018      	movs	r0, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	b006      	add	sp, #24
 8004554:	bd80      	pop	{r7, pc}
 8004556:	46c0      	nop			@ (mov r8, r8)
 8004558:	20000500 	.word	0x20000500
 800455c:	200004dc 	.word	0x200004dc
 8004560:	20000490 	.word	0x20000490
 8004564:	20000494 	.word	0x20000494
 8004568:	200004f0 	.word	0x200004f0
 800456c:	200004f8 	.word	0x200004f8
 8004570:	200004e0 	.word	0x200004e0
 8004574:	200003dc 	.word	0x200003dc
 8004578:	200003d8 	.word	0x200003d8
 800457c:	200004e8 	.word	0x200004e8
 8004580:	200004ec 	.word	0x200004ec

08004584 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800458a:	4b25      	ldr	r3, [pc, #148]	@ (8004620 <vTaskSwitchContext+0x9c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004592:	4b24      	ldr	r3, [pc, #144]	@ (8004624 <vTaskSwitchContext+0xa0>)
 8004594:	2201      	movs	r2, #1
 8004596:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004598:	e03e      	b.n	8004618 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800459a:	4b22      	ldr	r3, [pc, #136]	@ (8004624 <vTaskSwitchContext+0xa0>)
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80045a0:	4b21      	ldr	r3, [pc, #132]	@ (8004628 <vTaskSwitchContext+0xa4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	607b      	str	r3, [r7, #4]
 80045a6:	e008      	b.n	80045ba <vTaskSwitchContext+0x36>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <vTaskSwitchContext+0x30>
 80045ae:	b672      	cpsid	i
 80045b0:	46c0      	nop			@ (mov r8, r8)
 80045b2:	e7fd      	b.n	80045b0 <vTaskSwitchContext+0x2c>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	607b      	str	r3, [r7, #4]
 80045ba:	491c      	ldr	r1, [pc, #112]	@ (800462c <vTaskSwitchContext+0xa8>)
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	0013      	movs	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	189b      	adds	r3, r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	585b      	ldr	r3, [r3, r1]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0ed      	beq.n	80045a8 <vTaskSwitchContext+0x24>
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	0013      	movs	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	189b      	adds	r3, r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4a15      	ldr	r2, [pc, #84]	@ (800462c <vTaskSwitchContext+0xa8>)
 80045d8:	189b      	adds	r3, r3, r2
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	605a      	str	r2, [r3, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	3308      	adds	r3, #8
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d104      	bne.n	80045fc <vTaskSwitchContext+0x78>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	605a      	str	r2, [r3, #4]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	4b0b      	ldr	r3, [pc, #44]	@ (8004630 <vTaskSwitchContext+0xac>)
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	4b08      	ldr	r3, [pc, #32]	@ (8004628 <vTaskSwitchContext+0xa4>)
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800460c:	4b08      	ldr	r3, [pc, #32]	@ (8004630 <vTaskSwitchContext+0xac>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	334c      	adds	r3, #76	@ 0x4c
 8004612:	001a      	movs	r2, r3
 8004614:	4b07      	ldr	r3, [pc, #28]	@ (8004634 <vTaskSwitchContext+0xb0>)
 8004616:	601a      	str	r2, [r3, #0]
}
 8004618:	46c0      	nop			@ (mov r8, r8)
 800461a:	46bd      	mov	sp, r7
 800461c:	b002      	add	sp, #8
 800461e:	bd80      	pop	{r7, pc}
 8004620:	20000500 	.word	0x20000500
 8004624:	200004ec 	.word	0x200004ec
 8004628:	200004e0 	.word	0x200004e0
 800462c:	200003dc 	.word	0x200003dc
 8004630:	200003d8 	.word	0x200003d8
 8004634:	20000010 	.word	0x20000010

08004638 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004640:	f000 f84e 	bl	80046e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004644:	4b03      	ldr	r3, [pc, #12]	@ (8004654 <prvIdleTask+0x1c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d9f9      	bls.n	8004640 <prvIdleTask+0x8>
			{
				taskYIELD();
 800464c:	f7ff fc10 	bl	8003e70 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004650:	e7f6      	b.n	8004640 <prvIdleTask+0x8>
 8004652:	46c0      	nop			@ (mov r8, r8)
 8004654:	200003dc 	.word	0x200003dc

08004658 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800465e:	2300      	movs	r3, #0
 8004660:	607b      	str	r3, [r7, #4]
 8004662:	e00c      	b.n	800467e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	0013      	movs	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	189b      	adds	r3, r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4a14      	ldr	r2, [pc, #80]	@ (80046c0 <prvInitialiseTaskLists+0x68>)
 8004670:	189b      	adds	r3, r3, r2
 8004672:	0018      	movs	r0, r3
 8004674:	f7ff fb00 	bl	8003c78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3301      	adds	r3, #1
 800467c:	607b      	str	r3, [r7, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b06      	cmp	r3, #6
 8004682:	d9ef      	bls.n	8004664 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004684:	4b0f      	ldr	r3, [pc, #60]	@ (80046c4 <prvInitialiseTaskLists+0x6c>)
 8004686:	0018      	movs	r0, r3
 8004688:	f7ff faf6 	bl	8003c78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800468c:	4b0e      	ldr	r3, [pc, #56]	@ (80046c8 <prvInitialiseTaskLists+0x70>)
 800468e:	0018      	movs	r0, r3
 8004690:	f7ff faf2 	bl	8003c78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004694:	4b0d      	ldr	r3, [pc, #52]	@ (80046cc <prvInitialiseTaskLists+0x74>)
 8004696:	0018      	movs	r0, r3
 8004698:	f7ff faee 	bl	8003c78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800469c:	4b0c      	ldr	r3, [pc, #48]	@ (80046d0 <prvInitialiseTaskLists+0x78>)
 800469e:	0018      	movs	r0, r3
 80046a0:	f7ff faea 	bl	8003c78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046a4:	4b0b      	ldr	r3, [pc, #44]	@ (80046d4 <prvInitialiseTaskLists+0x7c>)
 80046a6:	0018      	movs	r0, r3
 80046a8:	f7ff fae6 	bl	8003c78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046ac:	4b0a      	ldr	r3, [pc, #40]	@ (80046d8 <prvInitialiseTaskLists+0x80>)
 80046ae:	4a05      	ldr	r2, [pc, #20]	@ (80046c4 <prvInitialiseTaskLists+0x6c>)
 80046b0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046b2:	4b0a      	ldr	r3, [pc, #40]	@ (80046dc <prvInitialiseTaskLists+0x84>)
 80046b4:	4a04      	ldr	r2, [pc, #16]	@ (80046c8 <prvInitialiseTaskLists+0x70>)
 80046b6:	601a      	str	r2, [r3, #0]
}
 80046b8:	46c0      	nop			@ (mov r8, r8)
 80046ba:	46bd      	mov	sp, r7
 80046bc:	b002      	add	sp, #8
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	200003dc 	.word	0x200003dc
 80046c4:	20000468 	.word	0x20000468
 80046c8:	2000047c 	.word	0x2000047c
 80046cc:	20000498 	.word	0x20000498
 80046d0:	200004ac 	.word	0x200004ac
 80046d4:	200004c4 	.word	0x200004c4
 80046d8:	20000490 	.word	0x20000490
 80046dc:	20000494 	.word	0x20000494

080046e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046e6:	e01a      	b.n	800471e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80046e8:	f7ff fbd2 	bl	8003e90 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80046ec:	4b10      	ldr	r3, [pc, #64]	@ (8004730 <prvCheckTasksWaitingTermination+0x50>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3304      	adds	r3, #4
 80046f8:	0018      	movs	r0, r3
 80046fa:	f7ff fb08 	bl	8003d0e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80046fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004734 <prvCheckTasksWaitingTermination+0x54>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	1e5a      	subs	r2, r3, #1
 8004704:	4b0b      	ldr	r3, [pc, #44]	@ (8004734 <prvCheckTasksWaitingTermination+0x54>)
 8004706:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004708:	4b0b      	ldr	r3, [pc, #44]	@ (8004738 <prvCheckTasksWaitingTermination+0x58>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	1e5a      	subs	r2, r3, #1
 800470e:	4b0a      	ldr	r3, [pc, #40]	@ (8004738 <prvCheckTasksWaitingTermination+0x58>)
 8004710:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004712:	f7ff fbcf 	bl	8003eb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	0018      	movs	r0, r3
 800471a:	f000 f80f 	bl	800473c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800471e:	4b06      	ldr	r3, [pc, #24]	@ (8004738 <prvCheckTasksWaitingTermination+0x58>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e0      	bne.n	80046e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004726:	46c0      	nop			@ (mov r8, r8)
 8004728:	46c0      	nop			@ (mov r8, r8)
 800472a:	46bd      	mov	sp, r7
 800472c:	b002      	add	sp, #8
 800472e:	bd80      	pop	{r7, pc}
 8004730:	200004ac 	.word	0x200004ac
 8004734:	200004d8 	.word	0x200004d8
 8004738:	200004c0 	.word	0x200004c0

0800473c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	334c      	adds	r3, #76	@ 0x4c
 8004748:	0018      	movs	r0, r3
 800474a:	f000 f851 	bl	80047f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	229d      	movs	r2, #157	@ 0x9d
 8004752:	5c9b      	ldrb	r3, [r3, r2]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d109      	bne.n	800476c <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475c:	0018      	movs	r0, r3
 800475e:	f7ff f9e9 	bl	8003b34 <vPortFree>
				vPortFree( pxTCB );
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	0018      	movs	r0, r3
 8004766:	f7ff f9e5 	bl	8003b34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800476a:	e011      	b.n	8004790 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	229d      	movs	r2, #157	@ 0x9d
 8004770:	5c9b      	ldrb	r3, [r3, r2]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d104      	bne.n	8004780 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	0018      	movs	r0, r3
 800477a:	f7ff f9db 	bl	8003b34 <vPortFree>
	}
 800477e:	e007      	b.n	8004790 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	229d      	movs	r2, #157	@ 0x9d
 8004784:	5c9b      	ldrb	r3, [r3, r2]
 8004786:	2b02      	cmp	r3, #2
 8004788:	d002      	beq.n	8004790 <prvDeleteTCB+0x54>
 800478a:	b672      	cpsid	i
 800478c:	46c0      	nop			@ (mov r8, r8)
 800478e:	e7fd      	b.n	800478c <prvDeleteTCB+0x50>
	}
 8004790:	46c0      	nop			@ (mov r8, r8)
 8004792:	46bd      	mov	sp, r7
 8004794:	b002      	add	sp, #8
 8004796:	bd80      	pop	{r7, pc}

08004798 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800479e:	4b0e      	ldr	r3, [pc, #56]	@ (80047d8 <prvResetNextTaskUnblockTime+0x40>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <prvResetNextTaskUnblockTime+0x14>
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <prvResetNextTaskUnblockTime+0x16>
 80047ac:	2300      	movs	r3, #0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d004      	beq.n	80047bc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047b2:	4b0a      	ldr	r3, [pc, #40]	@ (80047dc <prvResetNextTaskUnblockTime+0x44>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	4252      	negs	r2, r2
 80047b8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047ba:	e008      	b.n	80047ce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80047bc:	4b06      	ldr	r3, [pc, #24]	@ (80047d8 <prvResetNextTaskUnblockTime+0x40>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	4b04      	ldr	r3, [pc, #16]	@ (80047dc <prvResetNextTaskUnblockTime+0x44>)
 80047cc:	601a      	str	r2, [r3, #0]
}
 80047ce:	46c0      	nop			@ (mov r8, r8)
 80047d0:	46bd      	mov	sp, r7
 80047d2:	b002      	add	sp, #8
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	46c0      	nop			@ (mov r8, r8)
 80047d8:	20000490 	.word	0x20000490
 80047dc:	200004f8 	.word	0x200004f8

080047e0 <memset>:
 80047e0:	0003      	movs	r3, r0
 80047e2:	1882      	adds	r2, r0, r2
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d100      	bne.n	80047ea <memset+0xa>
 80047e8:	4770      	bx	lr
 80047ea:	7019      	strb	r1, [r3, #0]
 80047ec:	3301      	adds	r3, #1
 80047ee:	e7f9      	b.n	80047e4 <memset+0x4>

080047f0 <_reclaim_reent>:
 80047f0:	4b2e      	ldr	r3, [pc, #184]	@ (80048ac <_reclaim_reent+0xbc>)
 80047f2:	b570      	push	{r4, r5, r6, lr}
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	0004      	movs	r4, r0
 80047f8:	4283      	cmp	r3, r0
 80047fa:	d04f      	beq.n	800489c <_reclaim_reent+0xac>
 80047fc:	69c3      	ldr	r3, [r0, #28]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d017      	beq.n	8004832 <_reclaim_reent+0x42>
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00d      	beq.n	8004824 <_reclaim_reent+0x34>
 8004808:	2500      	movs	r5, #0
 800480a:	69e3      	ldr	r3, [r4, #28]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	5959      	ldr	r1, [r3, r5]
 8004810:	2900      	cmp	r1, #0
 8004812:	d144      	bne.n	800489e <_reclaim_reent+0xae>
 8004814:	3504      	adds	r5, #4
 8004816:	2d80      	cmp	r5, #128	@ 0x80
 8004818:	d1f7      	bne.n	800480a <_reclaim_reent+0x1a>
 800481a:	69e3      	ldr	r3, [r4, #28]
 800481c:	0020      	movs	r0, r4
 800481e:	68d9      	ldr	r1, [r3, #12]
 8004820:	f000 f86c 	bl	80048fc <_free_r>
 8004824:	69e3      	ldr	r3, [r4, #28]
 8004826:	6819      	ldr	r1, [r3, #0]
 8004828:	2900      	cmp	r1, #0
 800482a:	d002      	beq.n	8004832 <_reclaim_reent+0x42>
 800482c:	0020      	movs	r0, r4
 800482e:	f000 f865 	bl	80048fc <_free_r>
 8004832:	6961      	ldr	r1, [r4, #20]
 8004834:	2900      	cmp	r1, #0
 8004836:	d002      	beq.n	800483e <_reclaim_reent+0x4e>
 8004838:	0020      	movs	r0, r4
 800483a:	f000 f85f 	bl	80048fc <_free_r>
 800483e:	69e1      	ldr	r1, [r4, #28]
 8004840:	2900      	cmp	r1, #0
 8004842:	d002      	beq.n	800484a <_reclaim_reent+0x5a>
 8004844:	0020      	movs	r0, r4
 8004846:	f000 f859 	bl	80048fc <_free_r>
 800484a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800484c:	2900      	cmp	r1, #0
 800484e:	d002      	beq.n	8004856 <_reclaim_reent+0x66>
 8004850:	0020      	movs	r0, r4
 8004852:	f000 f853 	bl	80048fc <_free_r>
 8004856:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004858:	2900      	cmp	r1, #0
 800485a:	d002      	beq.n	8004862 <_reclaim_reent+0x72>
 800485c:	0020      	movs	r0, r4
 800485e:	f000 f84d 	bl	80048fc <_free_r>
 8004862:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004864:	2900      	cmp	r1, #0
 8004866:	d002      	beq.n	800486e <_reclaim_reent+0x7e>
 8004868:	0020      	movs	r0, r4
 800486a:	f000 f847 	bl	80048fc <_free_r>
 800486e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004870:	2900      	cmp	r1, #0
 8004872:	d002      	beq.n	800487a <_reclaim_reent+0x8a>
 8004874:	0020      	movs	r0, r4
 8004876:	f000 f841 	bl	80048fc <_free_r>
 800487a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800487c:	2900      	cmp	r1, #0
 800487e:	d002      	beq.n	8004886 <_reclaim_reent+0x96>
 8004880:	0020      	movs	r0, r4
 8004882:	f000 f83b 	bl	80048fc <_free_r>
 8004886:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004888:	2900      	cmp	r1, #0
 800488a:	d002      	beq.n	8004892 <_reclaim_reent+0xa2>
 800488c:	0020      	movs	r0, r4
 800488e:	f000 f835 	bl	80048fc <_free_r>
 8004892:	6a23      	ldr	r3, [r4, #32]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <_reclaim_reent+0xac>
 8004898:	0020      	movs	r0, r4
 800489a:	4798      	blx	r3
 800489c:	bd70      	pop	{r4, r5, r6, pc}
 800489e:	680e      	ldr	r6, [r1, #0]
 80048a0:	0020      	movs	r0, r4
 80048a2:	f000 f82b 	bl	80048fc <_free_r>
 80048a6:	0031      	movs	r1, r6
 80048a8:	e7b2      	b.n	8004810 <_reclaim_reent+0x20>
 80048aa:	46c0      	nop			@ (mov r8, r8)
 80048ac:	20000010 	.word	0x20000010

080048b0 <__libc_init_array>:
 80048b0:	b570      	push	{r4, r5, r6, lr}
 80048b2:	2600      	movs	r6, #0
 80048b4:	4c0c      	ldr	r4, [pc, #48]	@ (80048e8 <__libc_init_array+0x38>)
 80048b6:	4d0d      	ldr	r5, [pc, #52]	@ (80048ec <__libc_init_array+0x3c>)
 80048b8:	1b64      	subs	r4, r4, r5
 80048ba:	10a4      	asrs	r4, r4, #2
 80048bc:	42a6      	cmp	r6, r4
 80048be:	d109      	bne.n	80048d4 <__libc_init_array+0x24>
 80048c0:	2600      	movs	r6, #0
 80048c2:	f000 f875 	bl	80049b0 <_init>
 80048c6:	4c0a      	ldr	r4, [pc, #40]	@ (80048f0 <__libc_init_array+0x40>)
 80048c8:	4d0a      	ldr	r5, [pc, #40]	@ (80048f4 <__libc_init_array+0x44>)
 80048ca:	1b64      	subs	r4, r4, r5
 80048cc:	10a4      	asrs	r4, r4, #2
 80048ce:	42a6      	cmp	r6, r4
 80048d0:	d105      	bne.n	80048de <__libc_init_array+0x2e>
 80048d2:	bd70      	pop	{r4, r5, r6, pc}
 80048d4:	00b3      	lsls	r3, r6, #2
 80048d6:	58eb      	ldr	r3, [r5, r3]
 80048d8:	4798      	blx	r3
 80048da:	3601      	adds	r6, #1
 80048dc:	e7ee      	b.n	80048bc <__libc_init_array+0xc>
 80048de:	00b3      	lsls	r3, r6, #2
 80048e0:	58eb      	ldr	r3, [r5, r3]
 80048e2:	4798      	blx	r3
 80048e4:	3601      	adds	r6, #1
 80048e6:	e7f2      	b.n	80048ce <__libc_init_array+0x1e>
 80048e8:	08004d88 	.word	0x08004d88
 80048ec:	08004d88 	.word	0x08004d88
 80048f0:	08004d8c 	.word	0x08004d8c
 80048f4:	08004d88 	.word	0x08004d88

080048f8 <__retarget_lock_acquire_recursive>:
 80048f8:	4770      	bx	lr

080048fa <__retarget_lock_release_recursive>:
 80048fa:	4770      	bx	lr

080048fc <_free_r>:
 80048fc:	b570      	push	{r4, r5, r6, lr}
 80048fe:	0005      	movs	r5, r0
 8004900:	1e0c      	subs	r4, r1, #0
 8004902:	d010      	beq.n	8004926 <_free_r+0x2a>
 8004904:	3c04      	subs	r4, #4
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	da00      	bge.n	800490e <_free_r+0x12>
 800490c:	18e4      	adds	r4, r4, r3
 800490e:	0028      	movs	r0, r5
 8004910:	f000 f83e 	bl	8004990 <__malloc_lock>
 8004914:	4a1d      	ldr	r2, [pc, #116]	@ (800498c <_free_r+0x90>)
 8004916:	6813      	ldr	r3, [r2, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d105      	bne.n	8004928 <_free_r+0x2c>
 800491c:	6063      	str	r3, [r4, #4]
 800491e:	6014      	str	r4, [r2, #0]
 8004920:	0028      	movs	r0, r5
 8004922:	f000 f83d 	bl	80049a0 <__malloc_unlock>
 8004926:	bd70      	pop	{r4, r5, r6, pc}
 8004928:	42a3      	cmp	r3, r4
 800492a:	d908      	bls.n	800493e <_free_r+0x42>
 800492c:	6820      	ldr	r0, [r4, #0]
 800492e:	1821      	adds	r1, r4, r0
 8004930:	428b      	cmp	r3, r1
 8004932:	d1f3      	bne.n	800491c <_free_r+0x20>
 8004934:	6819      	ldr	r1, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	1809      	adds	r1, r1, r0
 800493a:	6021      	str	r1, [r4, #0]
 800493c:	e7ee      	b.n	800491c <_free_r+0x20>
 800493e:	001a      	movs	r2, r3
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <_free_r+0x4e>
 8004946:	42a3      	cmp	r3, r4
 8004948:	d9f9      	bls.n	800493e <_free_r+0x42>
 800494a:	6811      	ldr	r1, [r2, #0]
 800494c:	1850      	adds	r0, r2, r1
 800494e:	42a0      	cmp	r0, r4
 8004950:	d10b      	bne.n	800496a <_free_r+0x6e>
 8004952:	6820      	ldr	r0, [r4, #0]
 8004954:	1809      	adds	r1, r1, r0
 8004956:	1850      	adds	r0, r2, r1
 8004958:	6011      	str	r1, [r2, #0]
 800495a:	4283      	cmp	r3, r0
 800495c:	d1e0      	bne.n	8004920 <_free_r+0x24>
 800495e:	6818      	ldr	r0, [r3, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	1841      	adds	r1, r0, r1
 8004964:	6011      	str	r1, [r2, #0]
 8004966:	6053      	str	r3, [r2, #4]
 8004968:	e7da      	b.n	8004920 <_free_r+0x24>
 800496a:	42a0      	cmp	r0, r4
 800496c:	d902      	bls.n	8004974 <_free_r+0x78>
 800496e:	230c      	movs	r3, #12
 8004970:	602b      	str	r3, [r5, #0]
 8004972:	e7d5      	b.n	8004920 <_free_r+0x24>
 8004974:	6820      	ldr	r0, [r4, #0]
 8004976:	1821      	adds	r1, r4, r0
 8004978:	428b      	cmp	r3, r1
 800497a:	d103      	bne.n	8004984 <_free_r+0x88>
 800497c:	6819      	ldr	r1, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	1809      	adds	r1, r1, r0
 8004982:	6021      	str	r1, [r4, #0]
 8004984:	6063      	str	r3, [r4, #4]
 8004986:	6054      	str	r4, [r2, #4]
 8004988:	e7ca      	b.n	8004920 <_free_r+0x24>
 800498a:	46c0      	nop			@ (mov r8, r8)
 800498c:	20000640 	.word	0x20000640

08004990 <__malloc_lock>:
 8004990:	b510      	push	{r4, lr}
 8004992:	4802      	ldr	r0, [pc, #8]	@ (800499c <__malloc_lock+0xc>)
 8004994:	f7ff ffb0 	bl	80048f8 <__retarget_lock_acquire_recursive>
 8004998:	bd10      	pop	{r4, pc}
 800499a:	46c0      	nop			@ (mov r8, r8)
 800499c:	2000063c 	.word	0x2000063c

080049a0 <__malloc_unlock>:
 80049a0:	b510      	push	{r4, lr}
 80049a2:	4802      	ldr	r0, [pc, #8]	@ (80049ac <__malloc_unlock+0xc>)
 80049a4:	f7ff ffa9 	bl	80048fa <__retarget_lock_release_recursive>
 80049a8:	bd10      	pop	{r4, pc}
 80049aa:	46c0      	nop			@ (mov r8, r8)
 80049ac:	2000063c 	.word	0x2000063c

080049b0 <_init>:
 80049b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b2:	46c0      	nop			@ (mov r8, r8)
 80049b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b6:	bc08      	pop	{r3}
 80049b8:	469e      	mov	lr, r3
 80049ba:	4770      	bx	lr

080049bc <_fini>:
 80049bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049be:	46c0      	nop			@ (mov r8, r8)
 80049c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c2:	bc08      	pop	{r3}
 80049c4:	469e      	mov	lr, r3
 80049c6:	4770      	bx	lr
